<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameDesigner</name>
    </assembly>
    <members>
        <member name="T:Net.AOI.Grid">
            <summary>
            格子类
            </summary>
        </member>
        <member name="M:Net.AOI.Grid.GetGridBodiesAll">
            <summary>
            获取九宫格的所有物体
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.AOI.GridType">
            <summary>
            格子类型 -- 支持2D和3D游戏
            </summary>
        </member>
        <member name="F:Net.AOI.GridType.Horizontal">
            <summary>
            水平方式的格子, 用于3D游戏
            </summary>
        </member>
        <member name="F:Net.AOI.GridType.Vertical">
            <summary>
            垂直方式的格子, 适用2D游戏
            </summary>
        </member>
        <member name="T:Net.AOI.GridWorld">
            <summary>
            九宫格世界
            </summary>
        </member>
        <member name="F:Net.AOI.GridWorld.OnOverflow">
            <summary>
            当越界提示事件
            </summary>
        </member>
        <member name="M:Net.AOI.GridWorld.Init(System.Single,System.Single,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            初始化九宫格
            </summary>
            <param name="xPos">x开始位置</param>
            <param name="zPos">z开始位置</param>
            <param name="xMax">x列最大值</param>
            <param name="zMax">z列最大值</param>
            <param name="width">格子长度</param>
            <param name="height">格子高度</param>
        </member>
        <member name="M:Net.AOI.GridWorld.Insert(Net.AOI.IGridBody)">
            <summary>
            插入物体到九宫格感兴趣区域
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Net.AOI.GridWorld.TryGetGrid(Net.AOI.IGridBody)">
            <summary>
            获取物体的感兴趣九宫格区域
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Net.AOI.GridWorld.Remove(Net.AOI.IGridBody)">
            <summary>
            移除感兴趣物体
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Net.AOI.GridWorld.EnterHandler(Net.AOI.IGridBody,Net.AOI.IGridBody)">
            <summary>
            当一个物体进入另外一个物体处理
            </summary>
            <param name="body"></param>
            <param name="other"></param>
        </member>
        <member name="M:Net.AOI.GridWorld.ExitHandler(Net.AOI.IGridBody,Net.AOI.IGridBody)">
            <summary>
            当一个物体退出另外一个物体处理
            </summary>
            <param name="body"></param>
            <param name="other"></param>
        </member>
        <member name="M:Net.AOI.GridWorld.UpdateHandler">
            <summary>
            更新感兴趣的移除和添加物体
            </summary>
        </member>
        <member name="T:Net.AOI.IGridActor">
            <summary>
            格子演员接口, 怪物, 角色都属于演员
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.ActorID">
            <summary>
            演员ID 可用于实例化客户端哪个id的预制体
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Hair">
            <summary>
            头发
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Head">
            <summary>
            头部
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Jacket">
            <summary>
            上衣
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Belt">
            <summary>
            腰带
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Pants">
            <summary>
            裤子
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Shoe">
            <summary>
            鞋子
            </summary>
        </member>
        <member name="P:Net.AOI.IGridActor.Weapon">
            <summary>
            武器
            </summary>
        </member>
        <member name="T:Net.AOI.IGridBody">
            <summary>
            九宫格格子物体接口
            </summary>
        </member>
        <member name="P:Net.AOI.IGridBody.ID">
            <summary>
            格子的ID
            </summary>
        </member>
        <member name="P:Net.AOI.IGridBody.Identity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Net.AOI.IGridBody.Position">
            <summary>
            格子的位置
            </summary>
        </member>
        <member name="P:Net.AOI.IGridBody.Grid">
            <summary>
            当前所在的格子
            </summary>
        </member>
        <member name="P:Net.AOI.IGridBody.MainRole">
            <summary>
            主角? true:其他演员进入或退出都会通知自己 false:当自己进入新的格子时, 别人会通知你进来了, 当你退出旧的格子时, 别人也会通知你退出了旧的格子, 而你是无感知的
            </summary>
        </member>
        <member name="M:Net.AOI.IGridBody.OnInit">
            <summary>
            当初始化完成后调用
            </summary>
        </member>
        <member name="M:Net.AOI.IGridBody.OnBodyUpdate">
            <summary>
            当更新方法, 可以更新位置=unity的transform.position
            </summary>
        </member>
        <member name="M:Net.AOI.IGridBody.OnEnter(Net.AOI.IGridBody)">
            <summary>
            当body物体进入感兴趣区域
            </summary>
        </member>
        <member name="M:Net.AOI.IGridBody.OnExit(Net.AOI.IGridBody)">
            <summary>
            当body物体退出感兴趣区域
            </summary>
        </member>
        <member name="T:Net.Component.Command">
            <summary>
            网络操作指令 (系统命令使用0-100, 基础网络组件使用100-150) 请从150开始自定义命令
            </summary>
        </member>
        <member name="F:Net.Component.Command.Input">
            <summary>
            客户端输入操作指令
            </summary>
        </member>
        <member name="F:Net.Component.Command.Movement">
            <summary>
            玩家运动命令
            </summary>
        </member>
        <member name="F:Net.Component.Command.CreatePlayer">
            <summary>
            创建玩家命令
            </summary>
        </member>
        <member name="F:Net.Component.Command.Attack">
            <summary>
            玩家攻击命令
            </summary>
        </member>
        <member name="F:Net.Component.Command.SyncHealth">
            <summary>
            同步生命值
            </summary>
        </member>
        <member name="F:Net.Component.Command.Damage">
            <summary>
            玩家攻击到敌人
            </summary>
        </member>
        <member name="F:Net.Component.Command.EnemySync">
            <summary>
            敌人怪物AI同步指令
            </summary>
        </member>
        <member name="F:Net.Component.Command.SwitchState">
            <summary>
            玩家切换状态
            </summary>
        </member>
        <member name="F:Net.Component.Command.EnemySwitchState">
            <summary>
            怪物切换状态
            </summary>
        </member>
        <member name="F:Net.Component.Command.Transform">
            <summary>
            Transform同步指令
            <code><see cref="F:Net.Share.Operation.identity"/> 作为网络物体标识</code>
            <code><see cref="F:Net.Share.Operation.index"/> 作为要实例化registerObjects的物体索引</code>
            <code><see cref="F:Net.Share.Operation.index1"/> 用作NetComponentID区分</code> 
            <code><see cref="F:Net.Share.Operation.index2"/> 作为父子转换组件索引</code>
            <code><see cref="F:Net.Share.Operation.cmd1"/> 作为SyncMode(同步模式)</code>
            <code><see cref="F:Net.Share.Operation.position"/> 作为位置同步</code>
            <code><see cref="F:Net.Share.Operation.rotation"/> 作为旋转同步</code>
            <code><see cref="F:Net.Share.Operation.direction"/> 作为缩放同步</code>
            </summary>
        </member>
        <member name="F:Net.Component.Command.Destroy">
            <summary>
            NetworkIdentity组件被销毁指令
            </summary>
        </member>
        <member name="F:Net.Component.Command.OnPlayerEnter">
            <summary>
            当玩家进入场景后通知
            </summary>
        </member>
        <member name="F:Net.Component.Command.OnPlayerExit">
            <summary>
            当客户端退出游戏, 通知其他客户端删除此客户端所生成的NetworkIdentity物体
            </summary>
        </member>
        <member name="F:Net.Component.Command.NetworkComponent">
            <summary>
            网络行为组件命令，当你继承NetworkBehaviour组件实现你的网络组件时需要使用这个命令进行同步
            </summary>
        </member>
        <member name="T:Net.Common.FastLocking">
            <summary>
            快速锁 (共享锁), 比lock性能要好很多
            </summary>
        </member>
        <member name="M:Net.Common.FastLocking.Enter">
            <summary>
            进入锁
            </summary>
        </member>
        <member name="M:Net.Common.FastLocking.TryEnter">
            <summary>
            尝试获取锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Common.FastLocking.Exit">
            <summary>
            退出锁
            </summary>
        </member>
        <member name="M:Net.Common.FastLocking.Lock">
            <summary>
            加锁
            </summary>
        </member>
        <member name="M:Net.Common.FastLocking.Release">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:Net.Common.IPropertyObserver`1">
            <summary>
            属性观察接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Net.Common.IPropertyObserver`1.Value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="P:Net.Common.IPropertyObserver`1.OnValueChanged">
            <summary>
            当属性被修改事件
            </summary>
        </member>
        <member name="M:Net.Common.IPropertyObserver`1.GetValue">
            <summary>
            获取属性值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Common.IPropertyObserver`1.SetValue(`0,System.Boolean)">
            <summary>
            设置属性值
            </summary>
            <param name="value">新的属性值</param>
            <param name="isNotify">是否通知事件</param>
        </member>
        <member name="T:Net.Common.PropertyObserver`1">
            <summary>
            属性观察类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Net.Common.ObscuredPropertyObserver`1">
            <summary>
            模糊属性观察类, 此类只支持byte, sbyte, short, ushort, char, int, uint, float, long, ulong, double
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Net.Common.PropertyObserverAuto`1">
            <summary>
            属性观察自动类, 可模糊,不模糊
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.Common.PropertyObserverAuto`1.#ctor(System.String,System.Boolean,System.Action{`0})">
            <summary>
            属性观察自动类构造
            </summary>
            <param name="name">当属性被发现修改时提示名称</param>
            <param name="available">使用模糊属性?</param>
            <param name="onValueChanged">当属性被修改事件</param>
        </member>
        <member name="T:Net.Common.Singleton`1">
            <summary>
            通用类单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Net.Common.TransformEntity">
            <summary>
            新的Trasnform实体类, 性能可能要好点
            </summary>
        </member>
        <member name="T:Net.Common.EntityTransform">
            <summary>
            新的Trasnform实体类, 性能可能要好点
            </summary>
        </member>
        <member name="T:Net.Distributed.ItemConfig">
            <summary>
            负载均衡配置项
            </summary>
        </member>
        <member name="P:Net.Distributed.ItemConfig.Name">
            <summary>
            服务器节点名称
            </summary>
        </member>
        <member name="P:Net.Distributed.ItemConfig.Host">
            <summary>
            服务器主机IP
            </summary>
        </member>
        <member name="P:Net.Distributed.ItemConfig.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="P:Net.Distributed.ItemConfig.Args">
            <summary>
            额外参数，可以是自定义参数或者使用Json记录
            </summary>
        </member>
        <member name="T:Net.Distributed.LoadBalanceConfig">
            <summary>
            负载均衡配置
            </summary>
        </member>
        <member name="P:Net.Distributed.LoadBalanceConfig.Items">
            <summary>
            服务器节点配置项
            </summary>
        </member>
        <member name="P:Net.Distributed.LoadBalanceConfig.Count">
            <summary>
            虚拟节点数量, 也是真实节点的客户端连接数量
            </summary>
        </member>
        <member name="T:Net.Distributed.VirtualNode`1">
            <summary>
            一致性哈希虚拟节点
            </summary>
        </member>
        <member name="P:Net.Distributed.VirtualNode`1.VirtualNodeName">
            <summary>
            虚拟节点名称
            </summary>
        </member>
        <member name="P:Net.Distributed.VirtualNode`1.PhysicalNodeName">
            <summary>
            物理节点名称, 即数据库服务器的真实节点
            </summary>
        </member>
        <member name="P:Net.Distributed.VirtualNode`1.StartHash">
            <summary>
            哈希开始范围
            </summary>
        </member>
        <member name="P:Net.Distributed.VirtualNode`1.EndHash">
            <summary>
            哈希结束范围
            </summary>
        </member>
        <member name="P:Net.Distributed.VirtualNode`1.Token">
            <summary>
            对象参数
            </summary>
        </member>
        <member name="M:Net.Distributed.VirtualNode`1.#ctor(System.String,System.String)">
            <summary>
            虚拟节点
            </summary>
            <param name="virtualNode"></param>
            <param name="physicalNodeName"></param>
        </member>
        <member name="T:Net.Distributed.ConsistentHashing`1">
            <summary>
            一致性哈希, 节点的顺序是0-uint.maxValue, 当只有一个节点时哈希值从0-uint.maxValue, 当有两个节点时,节点1的哈希计算是从节点1的hash值开始到节点2的hash值结束, 
            节点2计算从节点2的hash值开始到尾部(uint.maxValue)和节点1的开始hash值为止, 以此类推
            |__________node_a____________->__________________node_b_______________->_________________|uint.maxValue|_________->________node_a____|
            </summary>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.#ctor(System.Int32)">
            <summary>
            一致性哈希构造
            </summary>
            <param name="virtualNodeReplicas">虚拟节点因子</param>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.AddNode(System.String,`0)">
            <summary>
            添加节点
            </summary>
            <param name="node"></param>
            <param name="token"></param>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.AddNodeGet(System.String,`0)">
            <summary>
            添加节点并获得虚拟节点列表
            </summary>
            <param name="node"></param>
            <param name="token"></param>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.RemoveNode(System.String)">
            <summary>
            移除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.GetNode(System.String)">
            <summary>
            根据键获取对应的数据库节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.GetAffectedNodes(System.String)">
            <summary>
            获取受影响的节点列表
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Distributed.ConsistentHashing`1.RecalculateNode">
            <summary>
            计算节点的范围
            </summary>
        </member>
        <member name="T:Net.Distributed.LoadBalance`1">
            <summary>
            负载均衡类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Net.Distributed.LoadBalance`1.Config">
            <summary>
            客户端配置属性
            </summary>
        </member>
        <member name="P:Net.Distributed.LoadBalance`1.LBConfig">
            <summary>
            负载均衡配置属性
            </summary>
        </member>
        <member name="P:Net.Distributed.LoadBalance`1.MaxThread">
            <summary>
            并发线程数量, 发送线程和接收处理线程数量
            </summary>
        </member>
        <member name="M:Net.Distributed.LoadBalance`1.Init">
            <summary>
            初始化负载均衡
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Net.Distributed.LoadBalance`1.RemoteConfig``1(System.String,System.Int32,Net.Config.ClientConfig,System.UInt32,System.Object[])">
            <summary>
            获取远程配置数据, 获取配置服务器的数据
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="config"></param>
            <param name="protocol"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Net.Distributed.LoadBalance`1.GetHash(System.String)">
            <summary>
            获取一致性哈希的虚拟节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Distributed.LoadBalance`1.GetRoundRobin">
            <summary>
            获取轮询的虚拟节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Distributed.UniqueIdGenerator">
            <summary>
            唯一ID生成器
            </summary>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.SetMachineIdBits(System.Int32)">
            <summary>
            设置机器ID占用比特位
            </summary>
            <param name="machineIdBits"></param>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.SetMachineId(System.Int32)">
            <summary>
            设置机器ID
            </summary>
            <param name="machineId"></param>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.SetSequenceId(System.Int64)">
            <summary>
            设置当前序号
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.NewUniqueId">
            <summary>
            获取新的唯一ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.CurrentId">
            <summary>
            获取当前唯一ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Distributed.UniqueIdGenerator.GetBinaryBits(System.Int64)">
            <summary>
            获取二进制比特位字符串
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Server.NetPlayer">
            <summary>
            网络玩家 - 当客户端连接服务器后都会为每个客户端生成一个网络玩家对象，(玩家对象由服务器管理) 2019.9.9
            <code>注意:不要试图new player出来, new出来后是没有作用的!</code>
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Name">
            <summary>
            玩家名称
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Client">
            <summary>
            Tcp套接字
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.ReceiveArgs">
            <summary>
            io完成端口接收对象
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.RemotePoint">
            <summary>
            存储客户端终端
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.SceneName">
            <summary>
            此玩家所在的场景名称
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.PlayerID">
            <summary>
            客户端玩家的标识
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Scene">
            <summary>
            玩家所在的场景实体
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.RpcCollectDic">
            <summary>
            远程调用方法收集
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.MemberInfos">
            <summary>
            已经收集过的类信息
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.RpcTargetHash">
            <summary>
            当前收集rpc的对象信息
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.SyncVarDic">
            <summary>
            字段同步信息
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.WorkerQueue">
            <summary>
            跨线程调用任务队列
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.heart">
            <summary>
            跳动的心
            </summary>
        </member>
        <member name="F:Net.Server.NetPlayer.stacking">
            <summary>
            TCP叠包值， 0:正常 >1:叠包次数 >25:清空叠包缓存流
            </summary>
        </member>
        <member name="F:Net.Server.NetPlayer.BufferStream">
            <summary>
            数据缓冲流
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.UserID">
            <summary>
            用户唯一身份标识
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Group">
            <summary>
            当前玩家所在的线程组对象
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Connected">
            <summary>
            是否处于连接
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.QueueUpNo">
            <summary>
            当前排队座号
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.IsQueueUp">
            <summary>
            是否属于排队状态
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Gcp">
            <summary>
            GCP协议接口
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.ConnectTime">
            <summary>
            客户端连接时间
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.ReconnectTimeout">
            <summary>
            断线重连等待时间
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.BytesReceived">
            <summary>
            此客户端接收到的字节总量
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Token">
            <summary>
            当前客户端请求的Token, 用于客户端响应, 如果在Rpc执行方法使用异步, 则需要记录一下token再异步, 否则token会被冲掉, 导致响应token错误
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.Server">
            <summary>
            服务器对象
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.CRCError">
            <summary>
            CRC校验错误次数, 如果有错误每秒提示一次
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.WindowFullError">
            <summary>
            发送窗口已满提示次数
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.DataSizeError">
            <summary>
            数据大小错误, 数据被拦截修改或者其他问题导致错误
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.DataQueueOverflowError">
            <summary>
            数据队列溢出错误, 当要发送的数据队列堆积到<see cref="!:ServerBase&lt;Player, Scene&gt;.LimitQueueCount"/> 后提示错误
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.BigDataCacheLengthError">
            <summary>
            大数据传输缓存最大长度错误次数, 请在<see cref="!:ServerBase&lt;Player, Scene&gt;.BigDataCacheLength"/>设置最大缓存长度
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.ProtocolError">
            <summary>
            协议出错次数，这是解析数据包时协议码不正确时提示
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.OnRevdFileProgress">
            <summary>
            当接收到发送的文件进度
            </summary>
        </member>
        <member name="P:Net.Server.NetPlayer.OnSendFileProgress">
            <summary>
            当发送的文件进度
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.#ctor">
            <summary>
            构造网络客户端
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.#ctor(System.Net.Sockets.Socket)">
            <summary>
            构造网络客户端，Tcp
            </summary>
            <param name="client">客户端套接字</param>
        </member>
        <member name="M:Net.Server.NetPlayer.#ctor(System.Net.EndPoint)">
            <summary>
            构造网络客户端
            </summary>
            <param name="remotePoint"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.Finalize">
            <summary>
            析构网络客户端
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.AddRpc(System.Boolean)">
            <summary>
            添加远程过程调用函数,从对象进行收集
            </summary>
            <param name="append">可以重复添加rpc?</param>
        </member>
        <member name="M:Net.Server.NetPlayer.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加远程过程调用函数,从对象进行收集
            </summary>
            <param name="target"></param>
            <param name="append">可以重复添加rpc?</param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.RemoveRpc(System.Object)">
            <summary>
            移除网络远程过程调用函数
            </summary>
            <param name="target">移除的rpc对象</param>
        </member>
        <member name="M:Net.Server.NetPlayer.OnUnClientRequest(Net.Share.RPCModel)">
            <summary>
            当未知客户端发送数据请求，返回<see langword="false"/>，不做任何事，返回<see langword="true"/>，添加到<see cref="!:ServerBase&lt;Player, Scene&gt;.Players"/>中
            客户端玩家的入口点，在这里可以控制客户端是否可以进入服务器与其他客户端进行网络交互
            在这里可以用来判断客户端登录和注册等等进站许可
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.NetPlayer.OnWSUnClientRequest(Net.Share.MessageModel)">
            <summary>
            当web服务器未知客户端发送数据请求，返回<see langword="false"/>，不做任何事，返回<see langword="true"/>，添加到<see cref="!:ServerBase&lt;Player, Scene&gt;.Players"/>中
            客户端玩家的入口点，在这里可以控制客户端是否可以进入服务器与其他客户端进行网络交互
            在这里可以用来判断客户端登录和注册等等进站许可
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.NetPlayer.OnRevdBufferHandle(Net.Share.RPCModel)">
            <summary>
            当接收到客户端自定义数据请求,在这里可以使用你自己的网络命令，系列化方式等进行解析网络数据。（你可以在这里使用ProtoBuf或Json来解析网络数据）
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.OnWSRevdBuffer(Net.Share.MessageModel)">
            <summary>
            当接收到webSocket客户端自定义数据请求,在这里可以使用你自己的网络命令，系列化方式等进行解析网络数据。（你可以在这里使用ProtoBuf或Json来解析网络数据）
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.OnConnectLost">
            <summary>
            当客户端连接中断, 此时还会等待客户端重连, 如果10秒后没有重连上来就会真的断开
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnReconnecting">
            <summary>
            当断线重连成功触发
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnRemoveClient">
            <summary>
            当服务器判定客户端为断线或连接异常时，移除客户端时调用
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnRpcExecute(Net.Share.RPCModel)">
            <summary>
            当执行Rpc(远程过程调用函数)时, 提高性能可重写此方法进行指定要调用的函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.OnStart">
            <summary>
            当玩家登录成功初始化调用
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnUpdate">
            <summary>
            当玩家更新操作
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnEnter">
            <summary>
            当玩家进入场景 ->场景对象在Scene属性
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnExit">
            <summary>
            当玩家退出场景 ->场景对象在Scene属性
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnSignOut">
            <summary>
            当玩家退出登录时调用
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnRemove">
            <summary>
            当场景被移除 ->场景对象在Scene属性
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.OnOperationSync(Net.Share.OperationList)">
            <summary>
            当接收到客户端使用<see cref="!:Net.Client.ClientBase.AddOperation(Operation)"/>方法发送的请求时调用. 如果重写此方法, 
            <code>返回false, 则服务器对象类会重新把操作列表加入到场景中, 你可以重写服务器的<see cref="M:Net.Server.ServerBase`2.OnOperationSync(`0,Net.Share.OperationList)"/>方法让此方法失效</code>
            <code>返回true, 服务器不再把数据加入到场景列表, 认为你已经在此处把数据处理了</code>
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.NetPlayer.OnSyncPropertyHandler(Net.Share.RPCModel)">
            <summary>
            当属性同步-- 当MysqlBuild生成的类属性在客户端被修改后同步上来会调用此方法
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.NetPlayer.Close">
            <summary>
            此方法需要自己实现, 实现内容如下: <see langword="xxServer.Instance.RemoveClient(this);"/>
            </summary>
        </member>
        <member name="M:Net.Server.NetPlayer.SendFile(System.String,System.Int32)">
            <summary>
            发送文件, 客户端可以使用事件<see cref="P:Net.Client.ClientBase.OnReceiveFileHandle"/>来监听并处理
            </summary>
            <param name="filePath"></param>
            <param name="bufferSize">每次发送数据大小, 如果想最大化发送，你可以设置bufferSize参数为PackageSize - 2048</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.NetPlayer.CheckCall">
            <summary>
            检查send方法的发送队列是否已到达极限, 到达极限则不允许新的数据放入发送队列, 需要等待队列消耗后才能放入新的发送数据
            </summary>
            <returns>是否可发送数据</returns>
        </member>
        <member name="T:Net.Server.ServerBase`1">
            <summary>
            网络服务器核心基类 2023.11.13
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.Players">
            <summary>
            登录的客户端 与<see cref="P:Net.Server.ServerBase`1.UIDClients"/>为互助字典 所添加的键值为<see cref="P:Net.Server.NetPlayer.PlayerID"/>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.UIDClients">
            <summary>
            登录的客户端 与<see cref="P:Net.Server.ServerBase`1.Players"/>为互助字典 所添加的键值为<see cref="P:Net.Server.NetPlayer.UserID"/>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.AllClients">
            <summary>
            所有客户端列表
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.Clients">
            <summary>
            所有在线的客户端
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.UnClients">
            <summary>
            未知客户端连接 或 刚连接服务器还未登录账号的IP
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnlinePlayers">
            <summary>
            获取登录游戏的玩家在线人数
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnlineUnPlayers">
            <summary>
            获取未登录的玩家在线人数
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.Instance">
            <summary>
            网络服务器单例
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase`1.ThreadPool">
            <summary>
            网络线程管线处理池
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase`1.QueueUp">
            <summary>
            排队队列
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnHasConnectHandle">
            <summary>
            当前有客户端连接触发事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnAddClientHandle">
            <summary>
            当添加客户端到所有在线的玩家集合中触发的事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnRevdBufferHandle">
            <summary>
            当接收到自定义的网络指令时处理事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnRemoveClientHandle">
            <summary>
            当移除客户端时触发事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnOperationSyncHandle">
            <summary>
            当客户端在时间帧发送的操作数据， 当使用客户端的<see cref="!:Client.ClientBase.AddOperation(Operation)"/>方法时调用
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnCallProgressHandle">
            <summary>
            当服务器发送可靠数据时, 可监听此事件显示进度值 (NetworkServer,TcpServer类无效)
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase`1.OnPingCallback">
            <summary>
            ping服务器回调 参数double为延迟毫秒单位 当<see cref="!:RTOMode"/>=<see cref="!:RTOMode.Variable"/>可变重传时, 内核将会每秒自动ping一次
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase`1.OnSendErrorHandle">
            <summary>
            当socket发送失败调用.参数1:玩家对象, 参数2:发送的字节数组, 参数3:发送标志(可靠和不可靠)  ->可通过<see cref="M:Net.Server.ServerBase`1.SendByteData(`0,Net.System.ISegment)"/>方法重新发送
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnRPCExecute">
            <summary>
            当执行调用远程过程方法时触发
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnDownloadFileHandle">
            <summary>
            当开始下载文件时调用, 参数1(Player):下载哪个玩家上传的文件 参数2(string):客户端上传的文件名 返回值(string):开发者指定保存的文件路径(全路径名称)
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnReceiveFileHandle">
            <summary>
            当客户端发送的文件完成, 接收到文件后调用, 返回true:框架内部释放文件流和删除临时文件(默认) false:使用者处理
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnRevdFileProgress">
            <summary>
            当接收到发送的文件进度
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.OnSendFileProgress">
            <summary>
            当发送的文件进度
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.#ctor">
            <summary>
            构造网络服务器函数
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`1.Item(System.Net.EndPoint)">
            <summary>
            玩家索引
            </summary>
            <param name="remotePoint"></param>
            <returns></returns>
        </member>
        <member name="P:Net.Server.ServerBase`1.Item(System.Int32)">
            <summary>
            uid索引
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.GetClients">
            <summary>
            获得所有在线的客户端对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnUnClientRequest(`0,Net.Share.RPCModel)">
            <summary>
            当未知客户端发送数据请求，返回<see langword="false"/>，不允许<see langword="unClient"/>进入服务器!，如果返回的是<see langword="true"/>，则允许<see langword="unClient"/>客户端进入服务器
            同时会将<see langword="unClient"/>添加到<see cref="P:Net.Server.ServerBase`1.Players"/>和<see cref="P:Net.Server.ServerBase`1.UIDClients"/>在线字典中.
            <code>客户端玩家的入口点，在这里可以控制客户端是否可以进入服务器与其他客户端进行网络交互</code>
            在这里可以用来判断客户端登录和注册等等进站许可 (默认是允许进入服务器)
            </summary>
            <param name="unClient">尚未登录的客户端对象</param>
            <param name="model">数据模型</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnStarting">
            <summary>
            当开始启动服务器
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnStartupCompleted">
            <summary>
            当服务器启动完毕
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnAddPlayerToScene(`0)">
            <summary>
            当添加玩家到默认场景， 如果不想添加刚登录游戏成功的玩家进入主场景，可重写此方法让其失效
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnHasConnect(`0)">
            <summary>
            当有客户端连接
            </summary>
            <param name="client">客户端套接字</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnConnectLost(`0)">
            <summary>
            当客户端连接中断, 此时还会等待客户端重连, 如果10秒后没有重连上来就会真的断开
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnReconnecting(`0)">
            <summary>
            当断线重连成功触发
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnRemoveClient(`0)">
            <summary>
            当服务器判定客户端为断线或连接异常时，移除客户端时调用
            </summary>
            <param name="client">要移除的客户端</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnReceiveBuffer(`0,Net.Share.RPCModel)">
            <summary>
            当接收到客户端自定义数据请求,在这里可以使用你自己的网络命令，系列化方式等进行解析网络数据。（你可以在这里使用ProtoBuf或Json来解析网络数据）
            </summary>
            <param name="client">当前客户端</param>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnReceiveFile(`0,Net.Share.BigData)">
            <summary>
            当接收到客户端发送的文件
            </summary>
            <param name="client">当前客户端</param>
            <param name="fileData">文件数据</param>
            <returns>true:框架内部释放文件流和删除临时文件(默认) false:使用者处理</returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnOperationSync(`0,Net.Share.OperationList)">
            <summary>
            当接收到客户端使用<see cref="!:Client.ClientBase.AddOperation(Operation)"/>方法发送的请求时调用
            </summary>
            <param name="client">当前客户端</param>
            <param name="list">操作列表</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnCallProgress(`0,Net.Share.BigDataProgress)">
            <summary>
            当服务器发送的大数据时, 可监听此事件显示进度值
            </summary>
            <param name="client"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnSerializeRpc(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当内核序列化远程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义序列化协议
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnDeserializeRpc(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当内核解析远程过程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义解析协议
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnSceneRelay(`0,Net.Share.RPCModel)">
            <summary>
            当客户端使用场景转发命令会调用此方法
            </summary>
            <param name="client"></param>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnNoticeRelay(`0,Net.Share.RPCModel)">
            <summary>
            当客户端使用公告转发命令会调用此方法
            </summary>
            <param name="client"></param>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.Run(System.UInt16)">
            <summary>
            运行服务器
            </summary>
            <param name="port">服务器端口号</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.Start(System.UInt16)">
            <summary>
            启动服务器
            </summary>
            <param name="port">端口</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.InitUserID">
            <summary>
            初始化玩家唯一标识栈
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.SceneUpdateHandle">
            <summary>
            网络场景推动玩家同步更新处理线程, 如果想自己处理场景同步, 可重写此方法让同步失效
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.DataTrafficHandler">
            <summary>
            流量统计线程
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.StartSocketHandler">
            <summary>
            开始接收数据
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.NetworkProcessing(Net.Share.ThreadGroup{`0})">
            <summary>
            业务处理线程组
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.LoginHandler(`0)">
            <summary>
            主动登录服务器, 类似OnUnClientRequest重写方法的返回值为true
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.SendDirect(`0)">
            <summary>
            立刻发送, 不需要等待内核时间 (当你要强制把客户端下线时,你还希望客户端先发送完数据后,再强制客户端退出游戏用到)
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.ResetDataHead(Net.System.ISegment)">
            <summary>
            重置头部数据大小, 在小数据达到<see cref="!:PackageLength"/>以上时会将这部分的数据先发送, 发送后还有连带的数据, 需要重置头部数据,装入大货车
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnRpcExecute(`0,Net.Share.RPCModel)">
            <summary>
            当执行Rpc(远程过程调用函数)时调用, 如果想提升服务器Rpc调用性能(默认反射调用), 可以重写此方法, 指定要调用的方法
            </summary>
            <param name="client">客户端</param>
            <param name="model">数据模型</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.CheckHeart(`0,System.UInt32)">
            <summary>
            检查心跳
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.DeletePlayer(`0)">
            <summary>
            从所有在线玩家字典中删除(移除)玩家实体
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.RemovePlayer(`0)">
            <summary>
            从所有在线玩家字典中移除玩家实体
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.RemoveClient(`0)">
            <summary>
            从客户端字典中移除客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.Close">
            <summary>
            关闭服务器
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.Multicast(System.Collections.Generic.IList{`0},System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Net.Server.ServerBase`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Net.Server.ServerBase`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.Byte[],System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Net.Server.ServerBase`1.Multicast(System.Collections.Generic.IList{`0},System.UInt32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Net.Server.ServerBase`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.UInt32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Net.Server.ServerBase`1.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加Rpc
            </summary>
            <param name="target">注册的对象实例</param>
            <param name="append">一个Rpc方法是否可以多次添加到Rpcs里面？</param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.AddRpcHandle(System.Object)">
            <summary>
            添加网络Rpc(注册远程方法)
            </summary>
            <param name="target">注册的对象实例</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.AddRpcHandle(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加网络Rpc(注册远程方法)
            </summary>
            <param name="target">注册的对象实例</param>
            <param name="append">一个Rpc方法是否可以多次添加到Rpcs里面？</param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.RemoveRpc(System.Object)">
            <summary>
            移除对象的Rpc注册
            </summary>
            <param name="target">将此对象的所有带有RPC特性的函数移除</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.IsOnline(System.Object)">
            <summary>
            playerID玩家是否在线?
            </summary>
            <param name="playerID"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.IsOnline(System.Object,`0@)">
            <summary>
            playerID玩家是否在线? 并且如果在线则out 在线玩家的对象
            </summary>
            <param name="playerID"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.OfflineHandle(`0)">
            <summary>
            强制下线处理, 将client客户端从在线字段<see cref="P:Net.Server.ServerBase`1.Players"/>和<see cref="P:Net.Server.ServerBase`1.UIDClients"/>和<see cref="P:Net.Server.ServerBase`1.AllClients"/>字段中移除
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.SignOut(`0)">
            <summary>
            退出登录, 将client客户端从在线字段<see cref="P:Net.Server.ServerBase`1.Players"/>和<see cref="P:Net.Server.ServerBase`1.UIDClients"/>字段中移除
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnSignOut(`0)">
            <summary>
            当客户端退出登录, 如果两个账号同时登录或者在心跳时间还没到检测时另外一个玩家也登录了相同的账号, 则会强制退出上一个账号的登录
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.SetHeartTime(System.Byte,System.Int32)">
            <summary>
            设置心跳时间
            </summary>
            <param name="timeoutLimit">心跳检测次数, 默认检测5次</param>
            <param name="interval">心跳时间间隔, 每interval毫秒会检测一次</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.Ping(`0)">
            <summary>
            ping测试网络延迟, 通过<see cref="F:Net.Server.ServerBase`1.OnPingCallback"/>事件回调
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.Ping(`0,System.Action{`0,System.UInt32})">
            <summary>
            ping测试网络延迟, 此方法帮你监听<see cref="F:Net.Server.ServerBase`1.OnPingCallback"/>事件, 如果不使用的时候必须保证能移除委托, 建议不要用框名函数, 那样会无法移除委托
            </summary>
            <param name="client"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.AddAdapter(Net.Share.IAdapter)">
            <summary>
            添加适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.AddAdapter(Net.Share.AdapterType,Net.Share.IAdapter)">
            <summary>
            添加适配器
            </summary>
            <param name="type"></param>
            <param name="adapter"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.SyncVarHandler(`0)">
            <summary>
            字段,属性同步线程
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.SendFile(`0,System.String,System.Int32)">
            <summary>
            发送文件, 客户端可以使用事件<see cref="P:Net.Client.ClientBase.OnReceiveFileHandle"/>来监听并处理
            </summary>
            <param name="client"></param>
            <param name="filePath"></param>
            <param name="bufferSize">每次发送数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.CheckCall(`0)">
            <summary>
            检查send方法的发送队列是否已到达极限, 到达极限则不允许新的数据放入发送队列, 需要等待队列消耗后才能放入新的发送数据
            </summary>
            <returns>是否可发送数据</returns>
        </member>
        <member name="M:Net.Server.ServerBase`1.SetAttackProtect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置攻击防护(SYN-ACK攻击)
            </summary>
            <param name="synAttackProtect">0:不开启 1:系统通过减少重传次数和延迟未连接时路由缓冲项(route cache entry)防范SYN攻击 2:(Microsoft推荐使用此值)</param>
            <param name="tcpMaxConnectResponseRetransmissions">确定 TCP 重新传输未应答的 SYN-ACK（连接请求确认）的次数</param>
            <param name="tcpMaxHalfOpen">服务器可以保持多少个连接处于半开（SYN-RCVD）状态</param>
            <param name="tcpMaxHalfOpenRetried">确定服务器可以在半打开 (SYN-RCVD) 状态下保持多少连接, 此条目的值应小于TCPMaxHalfOpen条目的值</param>
            <param name="tcpMaxPortsExhausted">指定触发 SYN 洪水攻击保护所必须超过的 TCP 连接请求数的阈值。</param>
        </member>
        <member name="M:Net.Server.ServerBase`1.CheckOnLinePlayers">
            <summary>
            检查在线人数，当服务器长时间运行，显示的在线人数不对时，默认是十分钟检查一次
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`1.OnDataQueueOverflow(`0)">
            <summary>
            当数据堆积超过<see cref="!:LimitQueueCount"/>后触发的提示
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`1.ExitSceneHandler(`0)">
            <summary>
            退出场景处理
            </summary>
        </member>
        <member name="T:Net.Server.NetScene`1">
            <summary>
            网络场景
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.Name">
            <summary>
            场景名称
            </summary>
        </member>
        <member name="F:Net.Server.NetScene`1.sceneCapacity">
            <summary>
            场景容纳人数
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.Players">
            <summary>
            当前网络场景的玩家, 此字段不要使用Add, Remove进行调用
            </summary>
        </member>
        <member name="F:Net.Server.NetScene`1.frame">
            <summary>
            当前帧
            </summary>
        </member>
        <member name="F:Net.Server.NetScene`1.operations">
            <summary>
            备用操作, 当玩家被移除后速度比update更新要快而没有地方收集操作指令, 所以在玩家即将被移除时, 可以访问这个变量进行添加操作同步数据
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.SceneNumber">
            <summary>
            获取场景当前人数
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.Count">
            <summary>
            获取场景当前人数
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.Capacity">
            <summary>
            获取场景容纳人数
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.IsFull">
            <summary>
            场景(房间)人数是否已满？
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.Split">
            <summary>
            操作列表分段值, 当operations.Count的长度大于Split值时, 就会裁剪为多段数据发送 默认为500长度分段
            </summary>
        </member>
        <member name="P:Net.Server.NetScene`1.FPS">
            <summary>
            场景帧数
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.#ctor">
            <summary>
            构造网络场景
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.#ctor(System.Int32)">
            <summary>
            添加网络主场景并增加主场景最大容纳人数
            </summary>
            <param name="number">主场景最大容纳人数</param>
        </member>
        <member name="M:Net.Server.NetScene`1.#ctor(`0,System.Int32)">
            <summary>
            添加网络场景并增加当前场景人数
            </summary>
            <param name="client">网络玩家</param>
            <param name="number">创建场景容纳人数</param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddPlayer(`0)">
            <summary>
            添加玩家
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnEnter(`0)">
            <summary>
            当进入场景的玩家
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnBeginExit(`0)">
            <summary>
            当开始退出场景，当调用此方法时client还在Clients属性里面
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnExit(`0)">
            <summary>
            当退出场景的玩家, 当调用此方法后client已经被移出Clients属性
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnRemove">
            <summary>
            当场景被移除
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.OnOperationSync(`0,Net.Share.OperationList)">
            <summary>
            当接收到客户端使用Client.AddOperation方法发送的请求时调用
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.AddPlayers(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加玩家
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.Update(Net.Share.IServerSendHandle{`0},System.Byte)">
            <summary>
            网络帧同步, 状态同步更新, 帧时间根据服务器主类的SyncSceneTime属性来调整速率
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.SendOperitions(Net.Share.IServerSendHandle{`0},System.Byte,Net.System.FastList{Net.Share.Operation})">
            <summary>
            发送操作, 如果超过Split属性则会进行拆分发送
            </summary>
            <param name="handle"></param>
            <param name="cmd"></param>
            <param name="operations"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.SendOperitions(Net.Share.IServerSendHandle{`0},System.Byte,`0,Net.System.FastList{Net.Share.Operation})">
            <summary>
            发送操作, 如果超过Split属性则会进行拆分发送
            </summary>
            <param name="handle"></param>
            <param name="cmd"></param>
            <param name="client"></param>
            <param name="operations"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnPacket(Net.Share.IServerSendHandle{`0},System.Byte,System.Int32)">
            <summary>
            当封包数据时调用
            </summary>
            <param name="handle"></param>
            <param name="cmd"></param>
            <param name="count"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnPacket(Net.Share.IServerSendHandle{`0},System.Byte,System.Int32,Net.System.FastList{`0},Net.System.FastList{Net.Share.Operation})">
            <summary>
            当封包数据时调用
            </summary>
            <param name="handle"></param>
            <param name="cmd"></param>
            <param name="count"></param>
            <param name="players"></param>
            <param name="operations"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.OnPacket(Net.Share.IServerSendHandle{`0},System.Byte,System.Int32,`0,Net.System.FastList{Net.Share.Operation})">
            <summary>
            当封包数据时调用
            </summary>
            <param name="handle"></param>
            <param name="cmd"></param>
            <param name="count"></param>
            <param name="client"></param>
            <param name="operations"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperation(System.String,System.Object[])">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperation(System.UInt16,System.Object[])">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperation(System.Byte,System.String,System.Object[])">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="cmd"></param>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperation(System.Byte,System.UInt32,System.Object[])">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="cmd"></param>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperation(Net.Share.Operation@)">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="opt"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperations(System.Collections.Generic.List{Net.Share.Operation})">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.AddOperations(Net.Share.Operation[])">
            <summary>
            添加操作帧, 等待帧时间同步发送
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.ToString">
            <summary>
            场景对象转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Server.NetScene`1.Remove(`0)">
            <summary>
            移除玩家
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.NetScene`1.RemoveAll">
            <summary>
            移除所有玩家
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.RemoveScene">
            <summary>
            执行移除场景
            </summary>
        </member>
        <member name="M:Net.Server.NetScene`1.RemoveOperations">
            <summary>
            移除场景所有玩家操作
            </summary>
        </member>
        <member name="T:Net.Server.DefaultScene">
            <summary>
            默认网络场景，当不需要场景时直接继承
            </summary>
        </member>
        <member name="T:Net.Server.ServerBase">
            <summary>
            网络服务器核心基类（非泛型）
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Name">
            <summary>
            (分布式)服务器名称
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.AreaName">
            <summary>
            分布式(集群)服务器区域名称
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Server">
            <summary>
            服务器套接字
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.ServerArgs">
            <summary>
            io完成端口对象
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.RpcCollectDic">
            <summary>
            远程调用方法收集
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.MemberInfos">
            <summary>
            已经收集过的类信息
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.RpcTargetHash">
            <summary>
            当前收集rpc的对象信息
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.SyncVarDic">
            <summary>
            字段同步信息
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.WorkerQueue">
            <summary>
            跨线程调用任务队列
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.IsRunServer">
            <summary>
            服务器是否处于运行状态, 如果服务器套接字已经被释放则返回False, 否则返回True. 当调用Close方法后将改变状态
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.SyncSceneTime">
            <summary>
            网络场景同步时间(帧同步间隔), 默认每33毫秒同步一次, 一秒同步30次, 可自己设置
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.LineUp">
            <summary>
            获取或设置最大可排队人数， 如果未知客户端人数超出LineUp值将不处理超出排队的未知客户端数据请求 ， 默认排队5000人
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnlineLimit">
            <summary>
            允许玩家在线人数最大值（玩家在线上限）默认2000人同时在线
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.MainSceneName">
            <summary>
            服务器主场景名称
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.sendCount">
            <summary>
            网络统计发送数据长度/秒
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.sendAmount">
            <summary>
            网络统计发送次数/秒
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.resolveAmount">
            <summary>
            网络统计解析次数/秒
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.receiveAmount">
            <summary>
            网络统计接收次数/秒
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.receiveCount">
            <summary>
            网络统计接收长度/秒
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.outflowTotal">
            <summary>
            从启动到现在总流出的数据流量
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.inflowTotal">
            <summary>
            从启动到现在总流入的数据流量
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.frame">
            <summary>
            4个字节记录数据长度 + 1CRC校验
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.PackageSize">
            <summary>
            接收缓冲区最大可接收的数据包大小 (默认是5m)
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.HeartInterval">
            <summary>
            心跳时间间隔, 默认每2秒检查一次玩家是否离线, 玩家心跳确认为5次, 如果超出5次 则移除玩家客户端. 确认玩家离线总用时10秒, 
            如果设置的值越小, 确认的速度也会越快. 但发送的数据也会增加. [开发调式时尽量把心跳值设置高点]
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.HeartLimit">
            <summary>
            <para>心跳检测次数, 默认为5次检测, 如果5次发送心跳给客户端或服务器, 没有收到回应的心跳包, 则进入断开连接处理</para>
            <para>当一直有数据往来时是不会发送心跳数据的, 只有当没有数据往来了, 才会进入发送心跳数据</para>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.BeginUserID">
            <summary>
            由于随机数失灵导致死循环, 所以用计数来标记用户标识 (从10000开始标记)
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.CurrUserID">
            <summary>
            当前玩家唯一标识计数
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.UserIDStack">
            <summary>
            玩家唯一标识栈
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.MTU">
            <summary>
            <para>（Maxium Transmission Unit）最大传输单元, 最大传输单元为1500字节</para>
            <para>1.链路层：以太网的数据帧的长度为(64+18)~(1500+18)字节，其中18是数据帧的帧头和帧尾，所以数据帧的内容最大为1500字节（不包括帧头和帧尾），即MUT为1500字节</para>
            <para>2.网络层：IP包的首部要占用20字节，所以这里的MTU＝1500－20＝1480字节</para>
            <para>3.传输层：UDP包的首部要占有8字节，所以这里的MTU＝1480－8＝1472字节</para>
            <see langword="注意:服务器和客户端的MTU属性的值必须保持一致性,否则分包的数据将解析错误!"/> <see cref="P:Net.Client.ClientBase.MTU"/>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.RTO">
            <summary>
            （Retransmission TimeOut）重传超时时间。 默认为1秒重传一次
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.MTPS">
            <summary>
            (Maximum traffic per second) 每秒允许传输最大流量, 默认最大每秒可以传输1m大小
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.FlowControl">
            <summary>
            流量控制模式，只有Gcp协议可用
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.MaxThread">
            <summary>
            并发线程数量, 发送线程和接收处理线程数量
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.PackageLength">
            <summary>
            组包数量，如果是一些小数据包，最多可以组合多少个？ 默认是组合1000个后发送
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.LimitQueueCount">
            <summary>
            限制发送队列长度
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.SyncRoot">
            <summary>
            同步锁对象
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.ReconnectionTimeout">
            <summary>
            断线重连等待时间内, 默认10秒内进行重连成功, 否则断线处理
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.PackageAdapter">
            <summary>
            数据包适配器
            </summary>
        </member>
        <member name="F:Net.Server.ServerBase.ServerThreads">
            <summary>
            服务器线程管理
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.SerializeAdapter">
            <summary>
            序列化适配器
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.BigDataCacheLength">
            <summary>
            大数据传输缓存最大值, 如果超出则被忽略 (默认最大可缓存10m数据)
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.SendBufferSize">
            <summary>
            设置Socket的发送缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.ReceiveBufferSize">
            <summary>
            设置Socket的接收缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Performance">
            <summary>
            服务器性能模式
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnStartingHandle">
            <summary>
            开始运行服务器事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnStartupCompletedHandle">
            <summary>
            服务器启动成功事件
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnNetworkDataTraffic">
            <summary>
            当统计网络流量时触发
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.Log">
            <summary>
            输出日志, 这里是输出全部日志(提示,警告,错误等信息). 如果想只输出指定的日志, 请使用NDebug类进行监听
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnAddRpcHandle">
            <summary>
            当添加远程过程调用方法时调用， 参数1：要收集rpc特性的对象，参数2:是否异步收集rpc方法和同步字段与属性？ 参数3：如果服务器的rpc中已经有了这个对象，还可以添加进去？
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnRemoveRpc">
            <summary>
            当移除远程过程调用对象， 参数1：移除此对象的所有rpc方法
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnSerializeRPC">
            <summary>
            当序列化远程过程调用方法
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnDeserializeRPC">
            <summary>
            当反序列化远程过程调用方法
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnSerializeOPT">
            <summary>
            当序列化远程过程调用操作
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase.OnDeserializeOPT">
            <summary>
            当反序列化远程过程调用操作
            </summary>
        </member>
        <member name="T:Net.Server.ServerBase`2">
            <summary>
            网络服务器核心基类 2019.11.22
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`2.Scenes">
            <summary>
            服务器场景，key是场景名或房间名，关卡名。 value是(场景或房间，关卡等)对象
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`2.Instance">
            <summary>
            网络服务器单例
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`2.#ctor">
            <summary>
            构造网络服务器函数
            </summary>
        </member>
        <member name="P:Net.Server.ServerBase`2.Item(System.String)">
            <summary>
            场景索引
            </summary>
            <param name="sceneID"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.GetScenes">
            <summary>
            获得所有服务器场景
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.OnAddDefaultScene">
            <summary>
            当添加默认网络场景，服务器初始化后会默认创建一个主场景，供所有玩家刚登陆成功分配的临时场景，默认初始化场景人数为1000人
            </summary>
            <returns>返回值string：网络玩家所在的场景名称 , 返回值NetScene：网络玩家的场景对象</returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.OnAddPlayerToScene(`0)">
            <summary>
            当添加玩家到默认场景， 如果不想添加刚登录游戏成功的玩家进入主场景，可重写此方法让其失效
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Net.Server.ServerBase`2.OnOperationSync(`0,Net.Share.OperationList)">
            <summary>
            当接收到客户端使用<see cref="!:Client.ClientBase.AddOperation(Operation)"/>方法发送的请求时调用
            </summary>
            <param name="client">当前客户端</param>
            <param name="list">操作列表</param>
        </member>
        <member name="M:Net.Server.ServerBase`2.OnSceneRelay(`0,Net.Share.RPCModel)">
            <summary>
            当客户端使用场景转发命令会调用此方法
            </summary>
            <param name="client"></param>
            <param name="model"></param>
        </member>
        <member name="M:Net.Server.ServerBase`2.SceneUpdateHandle">
            <summary>
            网络场景推动玩家同步更新处理线程, 如果想自己处理场景同步, 可重写此方法让同步失效
            </summary>
        </member>
        <member name="M:Net.Server.ServerBase`2.CheckReconnect(System.Net.Sockets.Socket,Net.System.ISegment,System.Object[])">
            <summary>
            检查断线重连处理
            </summary>
            <param name="client"></param>
            <param name="segment"></param>
            <param name="args"></param>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(`0,System.String)">
            <summary>
            创建网络场景, 退出当前场景,进入所创建的场景 - 创建场景成功返回场景对象， 创建失败返回null
            </summary>
            <param name="player">创建网络场景的玩家实体</param>
            <param name="name">要创建的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(`0,`1)">
            <summary>
            创建网络场景, 退出当前场景并加入所创建的场景 - 创建场景成功返回场景对象， 创建失败返回null
            </summary>
            <param name="player">创建网络场景的玩家实体</param>
            <param name="scene">创建场景的实体</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(`0,System.String,`1)">
            <summary>
            创建网络场景, 退出当前场景并加入所创建的场景 - 创建场景成功返回场景对象， 创建失败返回null
            </summary>
            <param name="player">创建网络场景的玩家实体</param>
            <param name="name">要创建的场景号或场景名称</param>
            <param name="scene">创建场景的实体</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(System.String)">
            <summary>
            创建一个场景, 成功则返回场景对象, 创建失败则返回null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(System.String,`1)">
            <summary>
            创建一个场景, 成功则返回场景对象, 创建失败则返回null
            </summary>
            <param name="name"></param>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.CreateScene(`1)">
            <summary>
            创建一个场景, 成功则返回场景对象, 创建失败则返回null
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.JoinScene(`0,System.String)">
            <summary>
            退出当前场景,加入指定的场景 - 成功进入返回场景对象，进入失败返回null
            </summary>
            <param name="player">要进入sceneID场景的玩家实体</param>
            <param name="name">场景ID，要切换到的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.EnterScene(`0,System.String)">
            <summary>
            进入场景 - 成功进入返回true，进入失败返回false
            </summary>
            <param name="player">要进入sceneID场景的玩家实体</param>
            <param name="name">场景ID，要切换到的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.SwitchScene(`0,System.String)">
            <summary>
            切换场景
            </summary>
            <param name="player">要操作的玩家</param>
            <param name="name">场景名称</param>
            <returns>进入的场景,如果查询的场景不存在则为null</returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.SwitchScene(`0,System.String,`1@)">
            <summary>
            切换场景
            </summary>
            <param name="player">要操作的玩家</param>
            <param name="name">场景名称</param>
            <param name="oldScene">上次所在的场景</param>
            <returns>进入的场景,如果查询的场景不存在则为null</returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.SwitchScene(`0,`1)">
            <summary>
            切换场景
            </summary>
            <param name="player">要操作的玩家</param>
            <param name="enterScene">要进入的场景</param>
            <returns>进入的场景</returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.SwitchScene(`0,`1,`1@)">
            <summary>
            切换场景
            </summary>
            <param name="player">要操作的玩家</param>
            <param name="enterScene">要进入的场景</param>
            <param name="oldScene">上次所在的场景</param>
            <returns>进入的场景</returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.ExitScene(`0,System.Boolean,System.Action{`1})">
            <summary>
            退出场景 exitCurrentSceneCall回调时已经不包含player对象
            </summary>
            <param name="player"></param>
            <param name="isEntMain">退出当前场景是否进入主场景: 默认进入主场景</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
        </member>
        <member name="M:Net.Server.ServerBase`2.RemoveScene(System.String,System.Boolean,System.Action{`1})">
            <summary>
            移除服务器场景. 从服务器总场景字典中移除指定的场景: 当你移除指定场景后,如果场景内有其他玩家在内, 则把其他玩家添加到主场景内
            </summary>
            <param name="name">要移除的场景id</param>
            <param name="addToMainScene">允许即将移除的场景内的玩家添加到主场景?</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.RemoveScenePlayer(`0,System.Boolean,System.Action{`1})">
            <summary>
            将玩家从当前所在的场景移除掉， 移除之后此客户端将会进入默认主场景 call回调时已经不包含player对象
            </summary>
            <param name="player">要执行的玩家实体</param>
            <param name="isEntMain">退出当前场景是否进入主场景: 默认进入主场景</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
            <returns></returns>
        </member>
        <member name="M:Net.Server.ServerBase`2.IsHasScene(System.String)">
            <summary>
            场景是否存在?
            </summary>
            <param name="sceneID"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Server.TcpServer`2">
            <summary>
            TCP服务器类型
            第三版本 2020.9.14
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="T:Net.Server.TcpServer">
            <summary>
            默认tcp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.TcpServerIocp`2">
            <summary>
            tcp 输入输出完成端口服务器
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="T:Net.Server.TcpServerIocp">
            <summary>
            默认tcpiocp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.UdpServer`2">
            <summary>
            Udp网络服务器
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="T:Net.Server.UdpServer">
            <summary>
            默认udp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.GcpServer`2">
            <summary>
            Gcp网络服务器
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="T:Net.Server.GcpServer">
            <summary>
            默认gcp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.UdpServerIocp`2">
            <summary>
            udp 输入输出完成端口服务器
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
            <typeparam name="Player"></typeparam>
            <typeparam name="Scene"></typeparam>
        </member>
        <member name="T:Net.Server.UdpServerIocp">
            <summary>
            默认udpiocp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.KcpPlayer">
            <summary>
            kcp客户端对象
            </summary>
        </member>
        <member name="P:Net.Server.KcpPlayer.Kcp">
            <summary>
            kcp对象
            </summary>
        </member>
        <member name="T:Net.Server.KcpServer`2">
            <summary>
            kcp服务器
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
            <typeparam name="Player"></typeparam>
            <typeparam name="Scene"></typeparam>
        </member>
        <member name="T:Net.Server.KcpServer">
            <summary>
            默认kcp服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.UdxPlayer">
            <summary>
            udx客户端对象
            </summary>
        </member>
        <member name="T:Net.Server.UdxServer`2">
            <summary>
            udx服务器类型  只能300人以下连接, 如果想要300个客户端以上, 请进入udx网址:www.goodudx.com 联系作者下载专业版FastUdxApi.dll, 然后更换下框架内的FastUdxApi.dll即可
            第三版本 2020.9.14
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="F:Net.Server.UdxServer`2.Server">
            <summary>
            udx服务器对象
            </summary>
        </member>
        <member name="T:Net.Server.UdxServer">
            <summary>
            默认udx服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.HttpPlayer">
            <summary>
            http客户端对象
            </summary>
        </member>
        <member name="P:Net.Server.HttpPlayer.WSClient">
            <summary>
            webSocket套接字
            </summary>
        </member>
        <member name="T:Net.Server.HttpServer`2">
            <summary>
            http网络服务器 2020.8.25 七夕
            通过JavaScript脚本, httml网页进行连接. 和 WebClient连接
            客户端发送的数据请求请看Net.Share.MessageModel类定义
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="P:Net.Server.HttpServer`2.Server">
            <summary>
            http服务器套接字
            </summary>
        </member>
        <member name="P:Net.Server.HttpServer`2.Scheme">
            <summary>
            http连接策略, 有https和http
            </summary>
        </member>
        <member name="P:Net.Server.HttpServer`2.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:Net.Server.HttpServer`2.SslProtocols">
            <summary>
            Ssl类型
            </summary>
        </member>
        <member name="P:Net.Server.HttpServer`2.DocumentRootPath">
            <summary>
            文档根路径, 指定你的网站文件根路径
            </summary>
        </member>
        <member name="T:Net.Server.HttpServer">
            <summary>
            默认http服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="T:Net.Server.WebPlayer">
            <summary>
            web客户端对象
            </summary>
        </member>
        <member name="P:Net.Server.WebPlayer.WSClient">
            <summary>
            webSocket套接字
            </summary>
        </member>
        <member name="F:Net.Server.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:Net.Server.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="F:Net.Server.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:Net.Server.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:Net.Server.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:Net.Server.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:Net.Server.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="P:Net.Server.WebSocketFrame.IsFinal">
            <summary>
            最后一帧，完成帧
            </summary>
        </member>
        <member name="P:Net.Server.WebSocketFrame.IsFragment">
            <summary>
            还有其他帧
            </summary>
        </member>
        <member name="T:Net.Server.WebServer`2">
            <summary>
            web网络服务器 2020.8.25 七夕
            通过JavaScript脚本, httml网页进行连接. 和 WebClient连接
            客户端发送的数据请求请看Net.Share.MessageModel类定义
            <para>Player:当有客户端连接服务器就会创建一个Player对象出来, Player对象和XXXClient是对等端, 每当有数据处理都会通知Player对象. </para>
            <para>Scene:你可以定义自己的场景类型, 比如帧同步场景处理, mmorpg场景什么处理, 可以重写Scene的Update等等方法实现每个场景的更新和处理. </para>
            </summary>
        </member>
        <member name="P:Net.Server.WebServer`2.Server">
            <summary>
            webSocket服务器套接字
            </summary>
        </member>
        <member name="P:Net.Server.WebServer`2.Scheme">
            <summary>
            websocket连接策略, 有wss和ws
            </summary>
        </member>
        <member name="P:Net.Server.WebServer`2.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:Net.Server.WebServer`2.SslProtocols">
            <summary>
            Ssl类型
            </summary>
        </member>
        <member name="T:Net.Server.WebServer">
            <summary>
            默认web服务器，当不需要处理Player对象和Scene对象时可使用
            </summary>
        </member>
        <member name="P:Net.Server.WebServerNew`2.Scheme">
            <summary>
            websocket连接策略, 有wss和ws
            </summary>
        </member>
        <member name="P:Net.Server.WebServerNew`2.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:Net.Server.WebServerNew`2.SslProtocols">
            <summary>
            Ssl类型
            </summary>
        </member>
        <member name="P:Net.Helper.AntiCheatHelper.IsActive">
            <summary>
            是否激活防作弊检测
            </summary>
        </member>
        <member name="P:Net.Helper.AntiCheatHelper.OnDetected">
            <summary>
            当检测到作弊, 参数1: 哪个属性被修改 参数2:原值 参数3:被改的值
            </summary>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.AddFindType(System.Type)">
            <summary>
            添加后续要查找的类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.GetType(System.String)">
            <summary>
            获取类型， 如果类型已经获取过一次则直接取，否则或查找所有程序集获取类型，如果查找到则会添加到缓存字典中，下次不需要再遍历所有程序集
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.GetTypeName(System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取代码形式的类型名称, 包括泛型,数组
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.GetCodeTypeName(System.String)">
            <summary>
            获取泛型类型ToString成代码形式返回
            </summary>
            <param name="fullName">必须是泛型.ToString() 而不是泛型.FullName</param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.HotfixLoad(System.String,System.String,System.String)">
            <summary>
            热更新加载, 可以在运行时植入dll执行一段代码
            </summary>
            <param name="dllPath">dll文件路径</param>
            <param name="entryTypeName">入口类名称</param>
            <param name="invokeMethodName">调用方法名称, 必须是静态的</param>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.GetMethodAttributes(System.Type,System.String[])">
            <summary>
            获取所有程序集的类的方法定义attribute特性的方法
            </summary>
            <param name="attribute"></param>
            <returns>返回所有带有attribute特性的方法列表</returns>
        </member>
        <member name="M:Net.Helper.AssemblyHelper.GetAssembliePaths">
            <summary>
            获取所有程序集文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.ByteHelper.ToString(System.Double)">
            <summary>
            转换方法
            </summary>
            <param name="size">字节值</param>
            <returns></returns>
        </member>
        <member name="F:Net.Helper.CertificateHelper.CertificateData">
            <summary>
            开发调式阶段证书数据
            </summary>
        </member>
        <member name="F:Net.Helper.CRCHelper.CRCCode">
            <summary>
            CRC校验代码表, 用户可自行改变CRC校验码, 直接改源代码, 客户端和服务器检验码必须一致, 否则识别失败
            </summary>
        </member>
        <member name="M:Net.Helper.CRCHelper.CRC32(System.String)">
            <summary>
            计算字符串哈希, 保证一致性
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.CRCHelper.CRCU32(System.String)">
            <summary>
            计算字符串哈希, 保证一致性
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.DateTimeHelper.GetNextTime(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取当前时间到某天的总毫秒数
            </summary>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns>总毫秒数</returns>
        </member>
        <member name="M:Net.Helper.DateTimeHelper.GetNextTime(System.DateTime)">
            <summary>
            获取当前时间到dateTime时间的总毫秒数
            </summary>
            <param name="dateTime"></param>
            <returns>总毫秒数</returns>
        </member>
        <member name="M:Net.Helper.DateTimeHelper.GetNextWeekday(System.DayOfWeek,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取当前时间到下一个工作日的总毫秒数
            </summary>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.DateTimeHelper.GetTickCount64">
            <summary>
            获取当前系统启动后经过的毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Helper.EncryptHelper">
            <summary>
            加密解密帮助类
            </summary>
        </member>
        <member name="M:Net.Helper.EncryptHelper.ToEncrypt(System.Int32,System.Byte[])">
            <summary>
            随机数形式加密法
            </summary>
            <param name="password"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.EncryptHelper.ToEncrypt(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            随机数形式加密法
            </summary>
            <param name="password"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.EncryptHelper.ToDecrypt(System.Int32,System.Byte[])">
            <summary>
            随机数形式解密法
            </summary>
            <param name="password"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.EncryptHelper.ToDecrypt(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            随机数形式解密法
            </summary>
            <param name="password"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.EncryptHelper.DESEncrypt(System.String,System.String)">
            <summary> 
            加密字符串  
            </summary>
            <param name="encryptKey"></param> 
            <param name="text">要加密的字符串</param> 
            <returns>加密后的字符串</returns> 
        </member>
        <member name="M:Net.Helper.EncryptHelper.DESDecrypt(System.String,System.String)">
            <summary> 
            解密字符串  
            </summary>
            <param name="encryptKey"></param> 
            <param name="text">要解密的字符串</param> 
            <returns>解密后的字符串</returns>   
        </member>
        <member name="T:Net.Helper.FilterTextHelper">
            <summary>
            过滤文字帮助类
            </summary>
        </member>
        <member name="M:Net.Helper.FilterTextHelper.Init(System.String[])">
            <summary>
            初始化要过滤的所有文本内容
            </summary>
            <param name="filterData"></param>
        </member>
        <member name="M:Net.Helper.FilterTextHelper.AddText(System.String)">
            <summary>
            动态插入过滤文本
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Net.Helper.FilterTextHelper.FilterText(System.String,System.Int32,System.Int32@)">
            <summary>
            过滤文字
            </summary>
            <param name="text">原文本</param>
            <param name="containCount">如果出现多少个字以上则进行过滤处理, 默认0是完全出现才过滤</param>
            <param name="filterLen">总过滤的字符数</param>
            <returns>过滤后的文字, 过滤的文字以*代替</returns>
        </member>
        <member name="M:Net.Helper.FilterTextHelper.ContainsFilterText(System.String)">
            <summary>
            检查是否包含过滤文字
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Net.Helper.ISyncVarHandler.SortingOrder">
            <summary>
            [SyncVar]字段同步优先级, 只会执行优先级最高的一个, 所以有需要时可继承生成的SyncVarHandlerGenerate类进行额外处理
            </summary>
        </member>
        <member name="T:Net.Helper.SyncVarGetSetHelper">
            <summary>
            字段和属性同步帮助类
            </summary>
        </member>
        <member name="F:Net.Helper.SyncVarGetSetHelper.Cache">
            <summary>
            收集的字段和属性同步缓存
            </summary>
        </member>
        <member name="F:Net.Helper.JobQueueHelper.WorkerQueue">
            <summary>
            跨线程调用任务队列
            </summary>
        </member>
        <member name="T:Net.Helper.MySQLHelper">
            <summary>
            MySql数据库帮助类
            </summary>
        </member>
        <member name="M:Net.Helper.MySQLHelper.Inject">
            <summary>
            注入MySql.dll 修改dll指令，新增NonQueryHandler事件在MySqlCommand类上，批量执行只需要返回首影响行数的SQL语句使用
            </summary>
            <returns>是否注入成功</returns>
        </member>
        <member name="M:Net.Helper.MySQLHelper.Inject(System.String)">
            <summary>
            注入MySql.dll 修改dll指令，新增NonQueryHandler事件在MySqlCommand类上，批量执行只需要返回首影响行数的SQL语句使用
            </summary>
            <param name="dllPath">mysql.dll文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.PathHelper.GetRelativePath(System.String,System.String,System.Boolean)">
            <summary>
            获取相对路径
            </summary>
            <param name="root"></param>
            <param name="fullPath"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Net.Helper.PathHelper.GetRelativePath(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取相对路径
            </summary>
            <param name="root"></param>
            <param name="fullPath"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Net.Helper.PersistHelper">
            <summary>
            持久化数据记录帮助类
            </summary>
        </member>
        <member name="T:Net.Helper.RpcHelper">
            <summary>
            远程过程调用(RPC)帮助类
            </summary>
        </member>
        <member name="M:Net.Helper.StringHelper.CheckSqlString(System.String@,System.Int32)">
            <summary>
            检查sql的字符串类型的值合法性
            </summary>
            <param name="value"></param>
            <param name="length"></param>
        </member>
        <member name="M:Net.Helper.StringHelper.FindHitCount(System.String,System.Char)">
            <summary>
            查找一个字符在text出现了几次
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.StringHelper.RemoveHit(System.String@,System.Char,System.Int32)">
            <summary>
            一个字符在text出现的第hitcount次后被移除
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="hitCount"></param>
        </member>
        <member name="T:Net.Helper.ISyncProperty">
            <summary>
            MySqlBuild属性同步接口
            </summary>
        </member>
        <member name="M:Net.Helper.ISyncProperty.SetProperty(System.Object[])">
            <summary>
            设置属性同步
            </summary>
            <param name="pars"></param>
        </member>
        <member name="T:Net.Helper.SyncProperty`1">
            <summary>
            属性同步基础类，是单个类，如UserData
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.Helper.SyncProperty`1.#ctor(`0,System.Int32,System.String)">
            <summary>
            属性同步构造
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:Net.Helper.SyncProperty`1.SetProperty(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Net.Helper.SyncPropertyList`1">
            <summary>
            列表或者数组型的属性同步类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.Helper.SyncPropertyList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.String)">
            <summary>
            列表或数组类型构造
            </summary>
            <param name="datas"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:Net.Helper.SyncPropertyList`1.SetProperty(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Net.Helper.SyncPropertyHelper">
            <summary>
            MySqlBuild属性同步帮助类
            </summary>
        </member>
        <member name="F:Net.Helper.SyncPropertyHelper.SyncPropertyDict">
            <summary>
            属性同步字典
            </summary>
        </member>
        <member name="M:Net.Helper.SyncPropertyHelper.AddSyncPropertys``1(System.Collections.Generic.IList{``0},Net.Helper.ISyncProperty)">
            <summary>
            添加属性同步，数组或者List类型，并且这个是引用地址
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datas"></param>
            <param name="syncProperty"></param>
        </member>
        <member name="M:Net.Helper.SyncPropertyHelper.AddSyncProperty``1(``0)">
            <summary>
            添加基础的属性同步类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
        </member>
        <member name="M:Net.Helper.SyncPropertyHelper.AddSyncProperty``1(System.Func{Net.Share.Rpc,Net.Share.DataRowField,Net.Helper.ISyncProperty})">
            <summary>
            添加属性同步，通过onCreateSyncProperty委托自己构造SyncProperty对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="onCreateSyncProperty"></param>
        </member>
        <member name="M:Net.Helper.SyncPropertyHelper.SyncPropertyHandler(Net.Share.RPCModel)">
            <summary>
            属性同步处理
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:Net.Helper.UnZipHelper">
            <summary>
            压缩数据传输
            </summary>
        </member>
        <member name="M:Net.Helper.UnZipHelper.Compress(System.Byte[])">
            <summary>
            返回压缩后的字节数组
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.UnZipHelper.Decompress(System.Byte[])">
            <summary>
            返回解压后的字节数组
            </summary>
            <param name="data">原始字节数组</param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.UnZipHelper.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            返回解压后的字节数组
            </summary>
            <param name="data">原始字节数组</param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Helper.UnZipHelper.CompressFiles(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
            <summary>
            压缩文件夹
            </summary>
            <param name="sourceDirectoryName">要压缩的文件夹路径</param>
            <param name="destinationArchiveFileName">压缩文件路径</param>
            <param name="compressionLevel">压缩层</param>
            <param name="includeBaseDirectory">压缩包含当前目录</param>
            <param name="entryNameEncoding">压缩编码</param>
        </member>
        <member name="M:Net.Helper.UnZipHelper.CompressFiles(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding,System.Action{System.String,System.Single},System.Boolean)">
            <summary>
            压缩文件夹
            </summary>
            <param name="sourceDirectoryName">要压缩的文件夹路径</param>
            <param name="destinationArchiveFileName">压缩文件路径</param>
            <param name="compressionLevel">压缩层</param>
            <param name="includeBaseDirectory">压缩包含当前目录</param>
            <param name="entryNameEncoding">压缩编码</param>
        </member>
        <member name="M:Net.Helper.UnZipHelper.DecompressFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            解压文件夹
            </summary>
            <param name="sourceArchiveFileName">压缩文件路径</param>
            <param name="destinationDirectoryName">要解压到的文件夹路径</param>
            <param name="entryNameEncoding">解压编码</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Net.Helper.UnZipHelper.DecompressFile(System.String,System.String,System.Text.Encoding,System.Action{System.String,System.Single},System.Boolean)">
            <summary>
            解压文件夹
            </summary>
            <param name="sourceArchiveFileName">压缩文件路径</param>
            <param name="destinationDirectoryName">要解压到的文件夹路径</param>
            <param name="entryNameEncoding">解压编码</param>
            <param name="progress">解压进度</param>
            <param name="isAsync">是否异步调用</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Net.CloneHelper">
            <summary>
            克隆工具类
            </summary>
        </member>
        <member name="M:Net.CloneHelper.Instance``1(System.Object)">
            <summary>
            克隆对象, 脱离引用对象的地址
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.Instance(System.Object)">
            <summary>
            克隆对象, 脱离引用对象的地址
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.Copy``1(System.Object)">
            <summary>
            贱复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.DeepCopy``1(System.Object)">
            <summary>
            深复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.DeepCopy``1(System.Object,System.Collections.Generic.List{System.Type})">
            <summary>
            深复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.DeepCopy(System.Object)">
            <summary>
            深复制
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.DeepCopy(System.Type,System.Object)">
            <summary>
            深复制
            </summary>
            <param name="type"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Net.CloneHelper.DeepCopy(System.Type,System.Object,System.Collections.Generic.List{System.Type})">
            <summary>
            深复制
            </summary>
            <param name="type"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.RandomHelper">
            <summary>
            随机帮助类 (多线程安全)
            </summary>
        </member>
        <member name="M:Net.Share.RandomHelper.InitSeed(System.Int32)">
            <summary>
            初始化随机种子
            </summary>
            <param name="Seed"></param>
        </member>
        <member name="M:Net.Share.RandomHelper.Range(System.Int32,System.Int32)">
            <summary>
            随机范围
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.RandomHelper.Range(System.Single,System.Single)">
            <summary>
            随机范围
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.BigData">
            <summary>
            文件传输数据
            </summary>
        </member>
        <member name="F:Net.Share.BigData.Id">
            <summary>
            文件唯一标识
            </summary>
        </member>
        <member name="F:Net.Share.BigData.Name">
            <summary>
            传输的文件名称
            </summary>
        </member>
        <member name="F:Net.Share.BigData.bufferSize">
            <summary>
            每次发送的数据大小
            </summary>
        </member>
        <member name="F:Net.Share.BigData.Length">
            <summary>
            文件总长度
            </summary>
        </member>
        <member name="F:Net.Share.BigData.Stream">
            <summary>
            实际文件写入对象
            </summary>
        </member>
        <member name="T:Net.Share.NetworkState">
            <summary>
            网络状态
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.Connected">
            <summary>
            连接成功
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.ConnectFailed">
            <summary>
            连接失败
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.TryToConnect">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.TryToConnectFailed">
            <summary>
            尝试重连失败
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.ConnectLost">
            <summary>
            连接中断 (连接异常)
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.ConnectClosed">
            <summary>
            连接已被关闭
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.Connection">
            <summary>
            正在连接服务器中...
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.Reconnect">
            <summary>
            断线重连成功
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.OnWhenQueuing">
            <summary>
            当进入排队时调用
            </summary>
        </member>
        <member name="F:Net.Share.NetworkState.OnQueueCancellation">
            <summary>
            当排队结束时调用
            </summary>
        </member>
        <member name="T:Net.Share.Constituency">
            <summary>
            选区网络传输对象
            </summary>
        </member>
        <member name="F:Net.Share.Constituency.name">
            <summary>
            服务器区名
            </summary>
        </member>
        <member name="F:Net.Share.Constituency.online">
            <summary>
            当前在线人数
            </summary>
        </member>
        <member name="F:Net.Share.Constituency.status">
            <summary>
            当前服务器区域状态, 顺畅，拥挤，爆满
            </summary>
        </member>
        <member name="F:Net.Share.Constituency.ip">
            <summary>
            服务器区ip
            </summary>
        </member>
        <member name="F:Net.Share.Constituency.port">
            <summary>
            服务器区端口
            </summary>
        </member>
        <member name="T:Net.Share.IAdapter">
            <summary>
            基础适配器接口
            </summary>
        </member>
        <member name="T:Net.Share.ISerializeAdapter">
            <summary>
            序列化适配器
            </summary>
        </member>
        <member name="M:Net.Share.ISerializeAdapter.OnSerializeRpc(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当序列化远程过程调用模型
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.ISerializeAdapter.OnDeserializeRpc(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当反序列化远程过程调用模型
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.ISerializeAdapter.OnSerializeOpt(Net.Share.OperationList@)">
            <summary>
            当序列化帧同步操作列表
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.ISerializeAdapter.OnDeserializeOpt(Net.System.ISegment)">
            <summary>
            当反序列化帧同步操作列表
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.IRPCAdapter">
            <summary>
            客户端RPC适配器
            </summary>
        </member>
        <member name="M:Net.Share.IRPCAdapter.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加远程过程调用事件
            </summary>
            <param name="target"></param>
            <param name="append"></param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Share.IRPCAdapter.OnRpcExecute(Net.Share.RPCModel)">
            <summary>
            当执行远程过程调用
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Share.IRPCAdapter.RemoveRpc(System.Object)">
            <summary>
            移除远程过程调用事件
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Net.Share.IRPCAdapter`1">
            <summary>
            服务器RPC适配器
            </summary>
            <typeparam name="Player"></typeparam>
        </member>
        <member name="M:Net.Share.IRPCAdapter`1.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加远程过程调用事件
            </summary>
            <param name="target"></param>
            <param name="append"></param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Share.IRPCAdapter`1.OnRpcExecute(`0,Net.Share.RPCModel)">
            <summary>
            当执行远程过程调用
            </summary>
            <param name="client"></param>
            <param name="model"></param>
        </member>
        <member name="M:Net.Share.IRPCAdapter`1.RemoveRpc(System.Object)">
            <summary>
            移除远程过程调用事件
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Net.Share.INetworkEvtAdapter">
            <summary>
            网络事件适配器
            </summary>
        </member>
        <member name="T:Net.Share.IPackageAdapter">
            <summary>
            数据包适配器
            </summary>
        </member>
        <member name="P:Net.Share.IPackageAdapter.HeadCount">
            <summary>
            头部长度
            </summary>
        </member>
        <member name="M:Net.Share.IPackageAdapter.Pack(Net.System.ISegment)">
            <summary>
            封包
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Net.Share.IPackageAdapter.Unpack(Net.System.ISegment,System.Int32,System.Int32)">
            <summary>
            解包
            </summary>
            <param name="stream"></param>
            <param name="frame"></param>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.IDataConfig">
            <summary>
            游戏数据配置接口
            </summary>
        </member>
        <member name="P:Net.Share.IDataConfig.ID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="M:Net.Share.IDataConfig.Init(System.Data.DataRow)">
            <summary>
            初始化表格行数据转实体对象
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:Net.Share.IEntityDataConfig">
            <summary>
            游戏实体数据配置接口
            </summary>
        </member>
        <member name="P:Net.Share.IEntityDataConfig.Item(System.Int32)">
            <summary>
            获取配置表列的索引值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Net.Share.IEntityDataConfig.Item(System.String)">
            <summary>
            获取配置表列的值
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.IDataRow">
            <summary>
            数据行接口
            </summary>
        </member>
        <member name="P:Net.Share.IDataRow.RowState">
            <summary>
            当前数据行状态
            </summary>
        </member>
        <member name="M:Net.Share.IDataRow.Init(System.Data.DataRow)">
            <summary>
            初始化数据行
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Net.Share.IDataRow.AddedSql(System.Text.StringBuilder)">
            <summary>
            sql的插入语句处理
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Net.Share.IDataRow.ModifiedSql(System.Text.StringBuilder)">
            <summary>
            sql的修改语句处理
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Net.Share.IDataRow.DeletedSql(System.Text.StringBuilder)">
            <summary>
            sql的删除语句处理
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:Net.Share.IDataRow.Item(System.String)">
            <summary>
            获取字段值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Net.Share.IDataRow.Item(System.Int32)">
            <summary>
            根据索引获得字段值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.IDataRow.SetContext(System.Object)">
            <summary>
            设置数据库实例
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Net.Share.IDebugHandle">
            <summary>
            网络调式日志信息处理接口
            </summary>
        </member>
        <member name="M:Net.Share.IDebugHandle.Log(System.String)">
            <summary>
            当输出信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Net.Share.IDebugHandle.LogRpc(System.String)">
            <summary>
            当远程过程调用函数
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Net.Share.IGcp">
            <summary>
            gcp可靠协议接口
            </summary>
        </member>
        <member name="M:Net.Share.IGcp.HasSend">
            <summary>
            判断是否有发送，比如有目前有很多个数据需要发送
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Share.IGcp.Input(Net.System.ISegment)">
            <summary>
            输入要发送的数据
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Net.Share.IGcp.Update">
            <summary>
            更新发送和结束事件
            </summary>
        </member>
        <member name="M:Net.Share.IGcp.Send(Net.System.ISegment)">
            <summary>
            真正的接入发送接口
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Net.Share.IGcp.Receive(Net.System.ISegment@)">
            <summary>
            检查接收是否有数据
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.IGcp.Dispose">
            <summary>
            施放gcp资源
            </summary>
        </member>
        <member name="T:Net.Share.INetClient">
            <summary>
            网络客户端接口处理 2019.7.9
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnConnectedHandle">
            <summary>
            当连接服务器成功事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnConnectFailedHandle">
            <summary>
            当连接失败事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnTryToConnectHandle">
            <summary>
            当尝试连接服务器事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnConnectLostHandle">
            <summary>
            当连接中断 (异常) 事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnDisconnectHandle">
            <summary>
            当断开连接事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnReceiveDataHandle">
            <summary>
            当接收到网络数据处理事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnReconnectHandle">
            <summary>
            当断线重连成功触发事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnCloseConnectHandle">
            <summary>
            当关闭连接事件
            </summary>
        </member>
        <member name="P:Net.Share.INetClient.OnNetworkDataTraffic">
            <summary>
            当统计网络流量时触发
            </summary>
        </member>
        <member name="T:Net.Share.SerializeHandle">
            <summary>
            序列化处理程序
            </summary>
        </member>
        <member name="T:Net.Share.DeserializeHandle">
            <summary>
            反序列化处理程序
            </summary>
            <param name="buffer">数据缓冲区</param>
            <param name="index">当前解析数据的索引</param>
            <param name="type">解析的类型</param>
            <returns>返回解析后的对象实例</returns>
        </member>
        <member name="T:Net.Share.INetworkHandle">
            <summary>
            网络状态处理接口
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnConnected">
            <summary>
            当连接成功
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnConnectFailed">
            <summary>
            当连接失败
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnConnectLost">
            <summary>
            当连接中断
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnDisconnect">
            <summary>
            当主动断开连接
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnTryToConnect">
            <summary>
            当尝试重连
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnReconnect">
            <summary>
            当重连成功
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnCloseConnect">
            <summary>
            当关闭连接
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnWhenQueuing(System.Int32,System.Int32)">
            <summary>
            当排队时调用
            </summary>
            <param name="totalCount">总排队人数</param>
            <param name="count">前面排队人数</param>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnQueueCancellation">
            <summary>
            当排队结束调用
            </summary>
        </member>
        <member name="M:Net.Share.INetworkHandle.OnServerFull">
            <summary>
            当服务器爆炸，积极拒绝客户端连接
            </summary>
        </member>
        <member name="T:Net.Share.INetworkSceneHandle`2">
            <summary>
            网络场景处理接口
            </summary>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.CreateScene(`0,System.String)">
            <summary>
            创建网络场景, 退出当前场景,进入所创建的场景 - 创建场景成功返回场景对象， 创建失败返回null
            </summary>
            <param name="player">创建网络场景的玩家实体</param>
            <param name="sceneID">要创建的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.CreateScene(`0,System.String,`1)">
            <summary>
            创建网络场景, 退出当前场景并加入所创建的场景 - 创建场景成功返回场景对象， 创建失败返回null
            </summary>
            <param name="player">创建网络场景的玩家实体</param>
            <param name="sceneID">要创建的场景号或场景名称</param>
            <param name="scene">创建场景的实体</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.JoinScene(`0,System.String)">
            <summary>
            退出当前场景,加入指定的场景 - 成功进入返回场景对象，进入失败返回null
            </summary>
            <param name="player">要进入sceneID场景的玩家实体</param>
            <param name="sceneID">场景ID，要切换到的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.EnterScene(`0,System.String)">
            <summary>
            进入场景 - 成功进入返回true，进入失败返回false
            </summary>
            <param name="player">要进入sceneID场景的玩家实体</param>
            <param name="sceneID">场景ID，要切换到的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.SwitchScene(`0,System.String)">
            <summary>
            退出当前场景,切换到指定的场景 - 成功进入返回true，进入失败返回false
            </summary>
            <param name="player">要进入sceneID场景的玩家实体</param>
            <param name="sceneID">场景ID，要切换到的场景号或场景名称</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.ExitScene(`0,System.Boolean,System.Action{`1})">
            <summary>
            退出场景
            </summary>
            <param name="player"></param>
            <param name="addToMainScene">退出当前场景是否进入主场景: 默认进入主场景</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.RemoveScene(System.String,System.Boolean,System.Action{`1})">
            <summary>
            移除服务器场景. 从服务器总场景字典中移除指定的场景: 当你移除指定场景后,如果场景内有其他玩家在内, 则把其他玩家添加到主场景内
            </summary>
            <param name="sceneID">要移除的场景id</param>
            <param name="addToMainScene">允许即将移除的场景内的玩家添加到主场景?</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.INetworkSceneHandle`2.RemoveScenePlayer(`0,System.Boolean,System.Action{`1})">
            <summary>
            将玩家从当前所在的场景移除掉， 移除之后此客户端将会进入默认主场景
            </summary>
            <param name="player">要执行的玩家实体</param>
            <param name="addToMainScene">退出当前场景是否进入主场景: 默认进入主场景</param>
            <param name="exitCurrentSceneCall">即将退出当前场景的处理委托函数: 如果你需要对即将退出的场景进行一些事后处理, 则在此委托函数执行! 如:退出当前场景通知当前场景内的其他客户端将你的玩家对象移除等功能</param>
            <returns></returns>
        </member>
        <member name="T:Net.Share.IRpcHandler">
            <summary>
            远程过程调用处理接口
            </summary>
        </member>
        <member name="P:Net.Share.IRpcHandler.RpcCollectDic">
            <summary>
            远程调用方法收集
            </summary>
        </member>
        <member name="P:Net.Share.IRpcHandler.MemberInfos">
            <summary>
            已经收集过的类信息
            </summary>
        </member>
        <member name="P:Net.Share.IRpcHandler.RpcTargetHash">
            <summary>
            当前收集rpc的对象信息
            </summary>
        </member>
        <member name="P:Net.Share.IRpcHandler.SyncVarDic">
            <summary>
            字段同步信息
            </summary>
        </member>
        <member name="P:Net.Share.IRpcHandler.WorkerQueue">
            <summary>
            跨线程调用任务队列
            </summary>
        </member>
        <member name="M:Net.Share.IRpcHandler.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加Rpc
            </summary>
            <param name="target">注册的对象实例</param>
            <param name="append">一个Rpc方法是否可以多次添加到Rpcs里面？</param>
            <param name="onSyncVarCollect">字段同步收集回调</param>
        </member>
        <member name="M:Net.Share.IRpcHandler.RemoveRpc(System.Object)">
            <summary>
            移除target的所有rpc
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Net.Share.ISendHandle">
            <summary>
            发送处理程序接口 
            2019.9.23
            </summary>
        </member>
        <member name="T:Net.Share.IServerEventHandle`1">
            <summary>
            网络服务器事件处理
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnStartingHandle">
            <summary>
            开始运行服务器事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnStartupCompletedHandle">
            <summary>
            服务器启动成功事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnHasConnectHandle">
            <summary>
            当前有客户端连接触发事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnAddClientHandle">
            <summary>
            当添加客户端到所有在线的玩家集合中触发的事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnRevdBufferHandle">
            <summary>
            当接收到网络数据处理事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnRemoveClientHandle">
            <summary>
            当移除客户端时触发事件
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.OnNetworkDataTraffic">
            <summary>
            当统计网络流量时触发
            </summary>
        </member>
        <member name="P:Net.Share.IServerEventHandle`1.Log">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="T:Net.Share.IServerHandle`1">
            <summary>
            用户对接基类服务器
            </summary>
        </member>
        <member name="P:Net.Share.IServerHandle`1.IsRunServer">
            <summary>
            服务器是否处于运行状态, 如果服务器套接字已经被释放则返回False, 否则返回True. 当调用Close方法后将改变状态
            </summary>
        </member>
        <member name="M:Net.Share.IServerHandle`1.DeletePlayer(`0)">
            <summary>
            从所有在线玩家字典中删除(移除)玩家实体
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Net.Share.IServerHandle`1.RemovePlayer(`0)">
            <summary>
            从所有在线玩家字典中移除玩家实体
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Net.Share.IServerHandle`1.RemoveClient(`0)">
            <summary>
            从客户端字典中移除客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:Net.Share.IServerHandle`2">
            <summary>
            用户对接基类服务器
            </summary>
        </member>
        <member name="P:Net.Share.IServerHandle`2.Scenes">
            <summary>
            服务器场景，每个key都处于一个场景或房间，关卡，value是场景对象
            </summary>
        </member>
        <member name="T:Net.Share.IServerSendHandle`1">
            <summary>
            服务器发送处理接口
            </summary>
        </member>
        <member name="M:Net.Share.IServerSendHandle`1.Multicast(System.Collections.Generic.IList{`0},System.Byte[])">
            <summary>
            网络多播, 发送自定义数据到clients集合的客户端
            </summary>
            <param name="clients">客户端集合</param>
            <param name="buffer">自定义字节数组</param>
        </member>
        <member name="M:Net.Share.IServerSendHandle`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.Byte[])">
            <summary>
            网络多播, 发送自定义数据到clients集合的客户端
            </summary>
            <param name="clients">客户端集合</param>
            <param name="cmd"></param>
            <param name="buffer">自定义字节数组</param>
        </member>
        <member name="M:Net.Share.IServerSendHandle`1.Multicast(System.Collections.Generic.IList{`0},System.UInt32,System.Object[])">
            <summary>
            网络多播, 发送数据到clients集合的客户端
            </summary>
            <param name="clients">客户端集合</param>
            <param name="protocol">协议号</param>
            <param name="pars">本地客户端rpc参数</param>
        </member>
        <member name="M:Net.Share.IServerSendHandle`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.UInt32,System.Object[])">
            <summary>
            网络多播, 发送数据到clients集合的客户端
            </summary>
            <param name="clients">客户端集合</param>
            <param name="cmd">网络命令</param>
            <param name="protocol">协议号</param>
            <param name="pars">本地客户端rpc参数</param>
        </member>
        <member name="M:Net.Share.IServerSendHandle`1.Multicast(System.Collections.Generic.IList{`0},System.Byte,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            网络多播, 发送数据到clients集合的客户端 (灵活数据包)
            </summary>
            <param name="clients">客户端集合</param>
            <param name="cmd">网络指令</param>
            <param name="buffer">要包装的数据,你自己来定</param>
            <param name="kernel">内核? 你包装的数据在客户端是否被内核NetConvert反序列化?</param>
            <param name="serialize">序列化? 你包装的数据是否在服务器即将发送时NetConvert序列化?</param>
        </member>
        <member name="P:Net.Share.RpcInvokePtr.name">
            <summary>
            函数和参数的名称
            </summary>
        </member>
        <member name="F:Net.Share.RpcInvokePtr.target">
            <summary>
            存储封包反序列化出来的对象
            </summary>
        </member>
        <member name="F:Net.Share.RpcInvokePtr.method">
            <summary>
            存储反序列化的函数
            </summary>
        </member>
        <member name="F:Net.Share.RpcInvokePtr.pars">
            <summary>
            存储反序列化参数
            </summary>
        </member>
        <member name="M:Net.Share.RpcInvokePtr.#ctor(System.Boolean,System.Object,System.Reflection.MethodInfo,Net.Adapter.RPCPTR,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="logRpc"></param>
            <param name="target">远程调用对象</param>
            <param name="method">远程调用方法</param>
            <param name="ptr"></param>
            <param name="pars">远程调用参数</param>
        </member>
        <member name="M:Net.Share.RpcInvokePtr.Invoke">
            <summary>
            调用方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Share.Parameter">
            <summary>
            web服务器json参数类
            </summary>
        </member>
        <member name="F:Net.Share.Parameter.typeName">
            <summary>
            记录参数类型
            </summary>
        </member>
        <member name="F:Net.Share.Parameter.jsonStr">
            <summary>
            参数json解析字符串
            </summary>
        </member>
        <member name="M:Net.Share.Parameter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Net.Share.Parameter.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="typeName"></param>
            <param name="jsonStr"></param>
        </member>
        <member name="T:Net.Share.MessageModelBase">
            <summary>
            webSocket服务器json数据模型基础类
            </summary>
        </member>
        <member name="F:Net.Share.MessageModelBase.cmd">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="F:Net.Share.MessageModelBase.func">
            <summary>
            操作的远程函数
            </summary>
        </member>
        <member name="F:Net.Share.MessageModelBase.pars">
            <summary>
            操作的远程参数
            </summary>
        </member>
        <member name="M:Net.Share.MessageModelBase.GetPars">
            <summary>
            解析客户端的json数据, 获取参数 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Share.MessageModel">
            <summary>
            webSocket服务器json数据模型类
            </summary>
        </member>
        <member name="M:Net.Share.MessageModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Net.Share.MessageModel.#ctor(System.Byte,System.String,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="cmd"></param>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="T:Net.Share.NetCmd">
            <summary>
            网络命令基类 - 可继承此类定义自己的网络命令 19.7.16 (系统命令使用0-100) 请从100开始自定义命令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.EntityRpc">
            <summary>
            面向实体类型调用远程函数
            使用此命令即可在派生于<see cref="T:Net.Server.NetPlayer"/>类型定义<see cref="T:Net.Share.Rpc"/>函数进行调用
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.CallRpc">
            <summary>
            公共Rpc调用指令(<see langword="服务器的公共资源"/>)
            如果是客户端调用则在服务器执行 如果是服务器调用则在客户端执行.
            在服务器端,如果出现多线程抢夺资源调用Client错误时，可使用SafeCall命令来执行
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SafeCall">
            <summary>
            安全调用服务器函数(<see langword="针对Client独立调用"/>),当多线程并行时会有概率发生资源竞争，导致数据错乱！
            如果在RPC函数内部调用client的时候是其他客户端的client对象。出现这种情况时建议使用此命令，
            否则可以使用CallRpc命令，
            使用此命令时,函数第一个参数必须是派生于<see cref="T:Net.Server.NetPlayer"/>类型的参数
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Local">
            <summary>
            (自身转发)服务器只转发给发送方客户端
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Scene">
            <summary>
            (场景转发)服务器负责转发给在同一房间或场景内的玩家
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Notice">
            <summary>
            (公告指令)服务器负责转发给所有在线的玩家
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SendHeartbeat">
            <summary>
            发送心跳包命令, 内部命令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.RevdHeartbeat">
            <summary>
            回调心跳包命令, 内部命令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.ThreadRpc">
            <summary>
            多线程远程过程调用函数 (RPC)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.QuitGame">
            <summary>
            请求服务器移除此客户端
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.OtherCmd">
            <summary>
            其他命令或用户自定义命令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SafeCallAsync">
            <summary>
            安全调用服务器函数(<see langword="针对Client独立调用"/>),当多线程并行时会有概率发生资源竞争，导致数据错乱！
            如果在RPC函数内部调用client时是其他客户端的client对象。出现这种情况时建议使用此命令，
            否则可以使用CallRpc命令，
            使用此命令时,函数第一个参数必须是派生于<see cref="T:Net.Server.NetPlayer"/>类型的参数.
            此指令是线程池执行
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SyncPropertyData">
            <summary>
            同步MySqlBuild生成的类, 当属性被修改后同步给(客户端/服务器)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Identify">
            <summary>
            标记客户端唯一标识, 内部命令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.OperationSync">
            <summary>
            操作同步，服务器使用NetScene.AddOperation方法，客户端UdpClient.AddOperation方法。 内部指令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Broadcast">
            <summary>
            局域网寻找主机命令, 内部使用
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Connect">
            <summary>
            连接指令 (内部)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Disconnect">
            <summary>
            断开网络连接, 内部指令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Ping">
            <summary>
            ping测试网络延迟量
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.PingCallback">
            <summary>
            ping回调 内部指令
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SyncVarNetObj">
            <summary>
            网络物体的同步指令 （NetworkObject之间同步）
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SyncVarP2P">
            <summary>
            字段或属性同步指令 内部指令 (客户端与服务器的Player字段同步)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.UploadData">
            <summary>
            上传数据(大数据)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Download">
            <summary>
            下载数据(大数据)
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.SingleCall">
            <summary>
            单线程安全调用服务器函数,当多线程同时访问一个方法时, 感觉这个方法不安全时, 需要使用单线程处理时, 可使用此命令
            否则可以使用SafeCall或CallRpc命令，
            使用此命令时,函数第一个参数将会嵌入NetPlayer参数
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.Response">
            <summary>
            既有响应的rpc请求
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.GatewayRelay">
            <summary>
            网关转发
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.QueueUp">
            <summary>
            如果被排队，服务器会发此命令给客户端
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.QueueCancellation">
            <summary>
            如果排队解除，服务器会发此命令给客户端
            </summary>
        </member>
        <member name="F:Net.Share.NetCmd.ServerFull">
            <summary>
            服务器爆满状态
            </summary>
        </member>
        <member name="P:Net.Share.IRPCMethod.cmd">
            <summary>
            网络命令
            </summary>
        </member>
        <member name="P:Net.Share.IRPCMethod.target">
            <summary>
            委托对象
            </summary>
        </member>
        <member name="P:Net.Share.IRPCMethod.method">
            <summary>
            委托方法
            </summary>
        </member>
        <member name="T:Net.Share.RPCMethod">
            <summary>
            远程过程调用方法
            </summary>
        </member>
        <member name="P:Net.Share.RPCMethod.Name">
            <summary>
            委托函数名
            </summary>
        </member>
        <member name="P:Net.Share.RPCMethod.target">
            <summary>
            委托对象
            </summary>
        </member>
        <member name="P:Net.Share.RPCMethod.method">
            <summary>
            委托方法
            </summary>
        </member>
        <member name="P:Net.Share.RPCMethod.cmd">
            <summary>
            网络命令
            </summary>
        </member>
        <member name="M:Net.Share.RPCMethod.#ctor(System.Action)">
            <summary>
            远程过程调用方法
            </summary>
        </member>
        <member name="M:Net.Share.RPCMethod.AddMethodEvent(System.Delegate)">
            <summary>
            网络委托
            </summary>
        </member>
        <member name="M:Net.Share.RPCMethod.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            远程过程调用方法
            </summary>
        </member>
        <member name="M:Net.Share.RPCMethod.#ctor(System.Object,System.Reflection.MethodInfo,System.Byte)">
            <summary>
            远程过程调用方法
            </summary>
        </member>
        <member name="T:Net.Share.NetPort">
            <summary>
            网络端口检测类
            </summary>
        </member>
        <member name="M:Net.Share.NetPort.GetFirstAvailablePort(System.Int32,System.Int32)">
            <summary>
            获取第一个可用的端口号
            </summary>
            <param name="startPort">起始端口号</param>
            <param name="MaxPort">结束端口号</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.NetPort.PortIsUsed">
            <summary>
            获取操作系统已用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Share.NetPort.PortIsAvailable(System.Int32)">
            <summary>
            检查指定端口是否已用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.NetPort.GetIP">
            <summary>
            获取本机ip地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Share.NetworkDataTraffic">
            <summary>
            网络流量数据统计
            </summary>
        </member>
        <member name="T:Net.Share.RevdBufferHandle`1">
            <summary>
            当处理缓冲区数据
            </summary>
            <param name="client">处理此客户端的数据请求</param>
            <param name="model"></param>
        </member>
        <member name="T:Net.Share.WSRevdBufferHandle`1">
            <summary>
            webSocket当处理缓冲区数据
            </summary>
            <param name="client">处理此客户端的数据请求</param>
            <param name="model"></param>
        </member>
        <member name="T:Net.Share.Dataflow">
            <summary>
            数据流量统计结构类
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.sendNumber">
            <summary>
            每秒发送数据次数
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.sendCount">
            <summary>
            每秒发送字节长度
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.receiveNumber">
            <summary>
            每秒接收数据次数
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.receiveCount">
            <summary>
            每秒接收到的字节长度
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.resolveNumber">
            <summary>
            解析RPC函数次数
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.outflowTotal">
            <summary>
            从启动到现在总流出的数据流量
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.inflowTotal">
            <summary>
            从启动到现在总流入的数据流量
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.FPS">
            <summary>
            只适应于客户端, 服务器无效
            </summary>
        </member>
        <member name="F:Net.Share.Dataflow.FPSArray">
            <summary>
            所有网络线程组的FPS, 适用于服务器
            </summary>
        </member>
        <member name="M:Net.Share.Dataflow.FPSToString">
            <summary>
            显示所有线程组的FPS
            </summary>
            <returns></returns>
        </member>
        <member name="F:Net.Share.NetworkUpdateMode.Thread">
            <summary>
            独立线程执行
            </summary>
        </member>
        <member name="F:Net.Share.NetworkUpdateMode.SingleThread">
            <summary>
            统一单线程执行 -非unity主线程
            </summary>
        </member>
        <member name="F:Net.Share.NetworkUpdateMode.CustomExecution">
            <summary>
            自定义执行方式
            </summary>
        </member>
        <member name="T:Net.Share.Operation">
            <summary>
            帧同步操作
            </summary>
        </member>
        <member name="F:Net.Share.Operation.cmd">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="F:Net.Share.Operation.cmd1">
            <summary>
            其他指令
            </summary>
        </member>
        <member name="F:Net.Share.Operation.cmd2">
            <summary>
            其他指令
            </summary>
        </member>
        <member name="F:Net.Share.Operation.position">
            <summary>
            玩家位置信息
            </summary>
        </member>
        <member name="F:Net.Share.Operation.rotation">
            <summary>
            玩家旋转信息
            </summary>
        </member>
        <member name="F:Net.Share.Operation.direction">
            <summary>
            玩家输入方向
            </summary>
        </member>
        <member name="F:Net.Share.Operation.identity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="F:Net.Share.Operation.uid">
            <summary>
            玩家唯一标识
            </summary>
        </member>
        <member name="F:Net.Share.Operation.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="F:Net.Share.Operation.index1">
            <summary>
            其他索引
            </summary>
        </member>
        <member name="F:Net.Share.Operation.index2">
            <summary>
            其他索引
            </summary>
        </member>
        <member name="F:Net.Share.Operation.index3">
            <summary>
            其他索引
            </summary>
        </member>
        <member name="F:Net.Share.Operation.name">
            <summary>
            玩家名称
            </summary>
        </member>
        <member name="F:Net.Share.Operation.name1">
            <summary>
            备用字符串
            </summary>
        </member>
        <member name="F:Net.Share.Operation.name2">
            <summary>
            备用字符串
            </summary>
        </member>
        <member name="F:Net.Share.Operation.buffer">
            <summary>
            数据数组, 备用
            </summary>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte)">
            <summary>
            玩家操作指令
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.Byte[])">
            <summary>
            玩家操作指令
            </summary>
            <param name="cmd"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String)">
            <summary>
            玩家操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,System.String)">
            <summary>
            玩家操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="name1"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,Net.Vector3)">
            <summary>
            玩家输入方向指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.Int32,Net.Vector3)">
            <summary>
            玩家输入方向指令
            </summary>
            <param name="cmd"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,System.Int32)">
            <summary>
            玩家其他操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,Net.Vector3,Net.Quaternion)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.Int32,Net.Vector3,Net.Quaternion)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="identity"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,Net.Vector3,Net.Vector3,Net.Quaternion)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.Int32,Net.Vector3,Net.Vector3,Net.Quaternion)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="identity"></param>
            <param name="direction"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.String,Net.Vector3,Net.Quaternion,Net.Vector3)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="name"></param>
            <param name="direction_is_localScale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.#ctor(System.Byte,System.Int32,Net.Vector3,Net.Quaternion,Net.Vector3)">
            <summary>
            玩家位置同步操作指令
            </summary>
            <param name="cmd"></param>
            <param name="identity"></param>
            <param name="direction_is_localScale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Net.Share.Operation.ToString">
            <summary>
            重写字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Share.OperationList">
            <summary>
            帧同步列表
            </summary>
        </member>
        <member name="F:Net.Share.OperationList.frame">
            <summary>
            帧索引
            </summary>
        </member>
        <member name="F:Net.Share.OperationList.operations">
            <summary>
            帧操作列表
            </summary>
        </member>
        <member name="M:Net.Share.OperationList.#ctor(System.UInt32)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Net.Share.OperationList.#ctor(Net.Share.Operation[])">
            <summary>
            构造
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Net.Share.OperationList.#ctor(System.UInt32,Net.Share.Operation[])">
            <summary>
            构造
            </summary>
            <param name="frame"></param>
            <param name="opts"></param>
        </member>
        <member name="T:Net.Share.Performance">
            <summary>
            网络代码性能相关模式
            </summary>
        </member>
        <member name="F:Net.Share.Performance.Realtime">
            <summary>
            实时性模式，可以做实时性游戏，如帧同步。但是这个模式会多占用CPU
            </summary>
        </member>
        <member name="F:Net.Share.Performance.Optimization">
            <summary>
            优化模式，这个模式降低CPU，会损失实时性
            </summary>
        </member>
        <member name="T:Net.Share.ReceiveBuffer">
            <summary>
            服务器接收数据缓存
            </summary>
        </member>
        <member name="F:Net.Share.ReceiveBuffer.buffer">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:Net.Share.ReceiveBuffer.count">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="F:Net.Share.ReceiveBuffer.remotePoint">
            <summary>
            UDP终端
            </summary>
        </member>
        <member name="F:Net.Share.ReceiveBuffer.client">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:Net.Share.ReceiveBuffer.#ctor(System.Byte[],System.Int32)">
            <summary>
            构造接收数据缓存器
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
        </member>
        <member name="M:Net.Share.ReceiveBuffer.#ctor(System.Byte[],System.Int32,System.Net.EndPoint)">
            <summary>
            构造接收数据缓存器
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="remotePoint"></param>
        </member>
        <member name="M:Net.Share.ReceiveBuffer.#ctor(System.Byte[],System.Int32,Net.Server.NetPlayer)">
            <summary>
            构造接收数据缓存器
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="client"></param>
        </member>
        <member name="T:Net.Share.RevdDataBuffer">
            <summary>
            一级数据接收缓存区
            </summary>
        </member>
        <member name="F:Net.Share.RevdDataBuffer.client">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="F:Net.Share.RevdDataBuffer.buffer">
            <summary>
            缓存区
            </summary>
        </member>
        <member name="F:Net.Share.RevdDataBuffer.tcp_udp">
            <summary>
            数据协议
            </summary>
        </member>
        <member name="T:Net.Share.SendDataBuffer">
            <summary>
            一级数据发送缓存区
            </summary>
        </member>
        <member name="F:Net.Share.SendDataBuffer.client">
            <summary>
            客户端对象
            </summary>
        </member>
        <member name="F:Net.Share.SendDataBuffer.buffer">
            <summary>
            缓存区
            </summary>
        </member>
        <member name="T:Net.Share.BigDataState">
            <summary>
            可靠传输状态
            </summary>
        </member>
        <member name="F:Net.Share.BigDataState.Sending">
            <summary>
            发送中
            </summary>
        </member>
        <member name="F:Net.Share.BigDataState.Download">
            <summary>
            下载中
            </summary>
        </member>
        <member name="F:Net.Share.BigDataState.FailSend">
            <summary>
            发送失败
            </summary>
        </member>
        <member name="F:Net.Share.BigDataState.Complete">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:Net.Share.BigDataState.Retransmission">
            <summary>
            尝试重传
            </summary>
        </member>
        <member name="T:Net.Share.CallProgress">
            <summary>
            可靠文件发送进度委托
            </summary>
            <param name="progress">当前进度</param>
            <param name="state">当前状态</param>
        </member>
        <member name="T:Net.Share.BigDataProgress">
            <summary>
            可靠传输进度值
            </summary>
        </member>
        <member name="F:Net.Share.BigDataProgress.name">
            <summary>
            进度名称
            </summary>
        </member>
        <member name="F:Net.Share.BigDataProgress.progress">
            <summary>
            进度值
            </summary>
        </member>
        <member name="F:Net.Share.BigDataProgress.state">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:Net.Share.BigDataProgress.#ctor(System.Single,Net.Share.BigDataState)">
            <summary>
            构造
            </summary>
            <param name="progress"></param>
            <param name="state"></param>
        </member>
        <member name="T:Net.Share.RPC">
            <summary>
            标注为远程过程调用函数
            </summary>
        </member>
        <member name="F:Net.Share.RPC.cmd">
            <summary>
            网络命令
            </summary>
        </member>
        <member name="F:Net.Share.RPC.hash">
            <summary>
            远程方法的哈希值
            </summary>
        </member>
        <member name="F:Net.Share.RPC.func">
            <summary>
            远程方法名
            </summary>
        </member>
        <member name="F:Net.Share.RPC.il2cpp">
            <summary>
            <code>如果在unity编译为il2cpp后端脚本并使用CallSiteRpcAdapter快速调用rpc适配器，则需要先声明类型出来，因为编译后，类型将无法在创建出来</code>
            例子: void Test(int num, string str); 则需要使用 [Rpc(il2cpp = typeof(RPCPTR&lt;int, string&gt;))]
            </summary>
        </member>
        <member name="M:Net.Share.RPC.#ctor">
            <summary>
            构造RPC函数特性
            </summary>
        </member>
        <member name="M:Net.Share.RPC.#ctor(System.Byte)">
            <summary>
            构造RPC函数特性
            </summary>
            <param name="cmd">自定义的网络命令</param>
        </member>
        <member name="T:Net.Share.Rpc">
            <summary>
            标注为远程过程调用函数 (简型)
            </summary>
        </member>
        <member name="M:Net.Share.Rpc.#ctor">
            <summary>
            构造Rpc函数特性
            </summary>
        </member>
        <member name="M:Net.Share.Rpc.#ctor(System.Byte)">
            <summary>
            构造Rpc函数特性
            </summary>
            <param name="cmd">自定义的网络命令</param>
        </member>
        <member name="T:Net.Share.rpc">
            <summary>
            标注为远程过程调用函数 (偷懒型) 安卓上有出现找不到问题, 出现此问题请使用 Rpc(第一个大写) 标签 
            </summary>
        </member>
        <member name="M:Net.Share.rpc.#ctor">
            <summary>
            构造rpc函数特性
            </summary>
        </member>
        <member name="M:Net.Share.rpc.#ctor(System.Byte)">
            <summary>
            构造rpc函数特性
            </summary>
            <param name="cmd">自定义的网络命令</param>
        </member>
        <member name="F:Net.Share.Inc.parsIndex">
            <summary>
            参数To或As调用一次+1
            </summary>
        </member>
        <member name="F:Net.Share.Inc.isFill">
            <summary>
            当数据已经填充, 获取Buffer可直接返回真正数据
            </summary>
        </member>
        <member name="T:Net.Share.RPCModel">
            <summary>
            远程过程调用模型,此类负责网络通讯中数据解析临时缓存的对象
            经过测试结构体和类差距不大，如果用in修饰符，结构会比较快，但是我们不知道开发者在哪里会使用Asxxx读取参数，如果都全部用in修饰符，则Asxxx会失效，由于只读属性原因，导致parsIndex无法++
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.cmd">
            <summary>
            网络指令
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.kernel">
            <summary>
            内核? true:数据经过框架内部序列化 false:数据由开发者自己处理
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.buffer">
            <summary>
            这是内存池数据，这个字段要配合index，count两字段使用，如果想得到实际数据，请使用Buffer属性
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.index">
            <summary>
            真正数据段索引和长度
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.count">
            <summary>
            真正数据段索引和长度
            </summary>
        </member>
        <member name="P:Net.Share.RPCModel.Buffer">
            <summary>
            数据缓存器(正确的数据段)
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.protocol">
            <summary>
            协议值, 合并之前版本的func字段和methodHash字段
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.pars">
            <summary>
            远程参数
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.serialize">
            <summary>
            数据是否经过内部序列化?
            </summary>
        </member>
        <member name="F:Net.Share.RPCModel.token">
            <summary>
            请求和响应的Token, 当几千几万个客户端同时发起相同的请求时, 可以根据Token区分响应, 得到真正的响应值
            </summary>
        </member>
        <member name="M:Net.Share.RPCModel.To``1">
            <summary>
            每次调用参数都会指向下一个参数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Net.Share.RPCModel.As``1">
            <summary>
            每次调用参数都会指向下一个参数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Net.Share.RPCModel.ToString">
            <summary>
            类信息字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Share.RPCModel.Copy">
            <summary>
            复制远程调用数据模型
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.Share.RPCModelTask">
            <summary>
            远程过程调用异步模型 async和await实现和委托事件处理
            </summary>
        </member>
        <member name="P:Net.Share.RPCModelTask.IsCompleted">
            <summary>
            是否完成操作
            </summary>
        </member>
        <member name="F:Net.Share.RPCModelTask.model">
            <summary>
            响应的数据在这里
            </summary>
        </member>
        <member name="T:Net.Share.FlowControlMode">
            <summary>
            流量控制模式
            </summary>
        </member>
        <member name="F:Net.Share.FlowControlMode.Normal">
            <summary>
            正常模式 (类似Tcp)，当网络差时，会降低数据传输频率，节约网络流量
            </summary>
        </member>
        <member name="F:Net.Share.FlowControlMode.Quick">
            <summary>
            极速模式 (帧同步游戏)，如果网络差时，也会以一定速度进行数据传输，保证数据流畅
            </summary>
        </member>
        <member name="T:Net.Share.RuntimeInitializeOnLoadMethod">
            <summary>
            当运行时调用，如果在unity会自动转到untiy的RuntimeInitializeOnLoadMethod特性
            </summary>
        </member>
        <member name="T:Net.Share.SendBuffer">
            <summary>
            发送数据缓冲区
            </summary>
        </member>
        <member name="F:Net.Share.SendBuffer.cmd">
            <summary>
            网络命令0-5已经被插件系统占用，可用6-255为自定义命令
            </summary>
        </member>
        <member name="F:Net.Share.SendBuffer.func">
            <summary>
            RPC函数名称
            </summary>
        </member>
        <member name="F:Net.Share.SendBuffer.pars">
            <summary>
            RPC参数
            </summary>
        </member>
        <member name="F:Net.Share.SendBuffer.buffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:Net.Share.SendBuffer.kernel">
            <summary>
            使用插件内核数据 还是 自定义数据
            </summary>
        </member>
        <member name="M:Net.Share.SendBuffer.#ctor(System.Byte,System.String,System.Object[])">
            <summary>
            构造发送缓冲区 使用插件内核发送数据
            </summary>
            <param name="cmd">网络命令</param>
            <param name="fun">网络RPC函数名称</param>
            <param name="pars">网络RPC参数</param>
        </member>
        <member name="M:Net.Share.SendBuffer.#ctor(System.Byte,System.Byte[])">
            <summary>
            构造发送缓冲区 使用自定义数据发送
            </summary>
            <param name="cmd">网络命令</param>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="T:Net.Share.SyncVar">
            <summary>
            字段或属性同步 比SyncVariable同步属性性能要差些
            </summary>
        </member>
        <member name="F:Net.Share.SyncVar.id">
            <summary>
            唯一id, 如果与服务器NetPlayer变量同步, 就必须设置id
            只与服务器的自身NetPlayer变量同步, 不做任何转发与其他客户端进行变量同步
            </summary>
        </member>
        <member name="F:Net.Share.SyncVar.hook">
            <summary>
            值改变后调用的方法名 <see langword="方法必须有一个参数value"/>
            </summary>
        </member>
        <member name="F:Net.Share.SyncVar.authorize">
            <summary>
            true:允许所有客户端改变后同步此字段 false:只允许<see cref="!:UnityComponent.NetworkObject.IsLocal"/>为true的网络物体才能同步
            </summary>
        </member>
        <member name="M:Net.Share.SyncVar.#ctor">
            <summary>
            构造字段,属性同步特性
            </summary>
        </member>
        <member name="M:Net.Share.SyncVar.#ctor(System.String)">
            <summary>
            构造字段,属性同步特性
            </summary>
        </member>
        <member name="T:Net.Share.SyncVariable`1">
            <summary>
            网络同步字段或属性类  --相对[SyncVar]性能要好一些
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Net.Share.SyncVariable`1.Value">
            <summary>
            设置值并同步到云端, 并且调用值修改事件
            </summary>
        </member>
        <member name="P:Net.Share.SyncVariable`1.ValueNot">
            <summary>
            设置值不通知，但是会同步到云端
            </summary>
        </member>
        <member name="T:Net.Share.Win32KernelAPI">
            <summary>
            提供win32内核api类
            </summary>
        </member>
        <member name="M:Net.Share.Win32KernelAPI.timeBeginPeriod(System.UInt32)">
            <summary>
            <code>设置应用程序或驱动程序使用的最小定时器分辨率</code>
            系统时钟间隔是个很少被关心到的系统标量，
            它反映了系统产生时钟中断的频率，间隔越小频率越高，反之亦然。
            每当时钟中断产生，系统相关的中断函数将会处理这个中断。
            时钟中断处理函数会更新系统时间，检查内核调试信息等。
            </summary>
            <param name="uMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.Win32KernelAPI.timeEndPeriod(System.UInt32)">
            <summary>
            清除应用程序或驱动程序使用的最小定时器分辨率  
            </summary>
            <param name="uMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.Win32KernelAPI.SetSysTime(System.DateTime)">
            <summary>
            设置系统时间
            </summary>
            <param name="newdatetime">新时间</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.Win32KernelAPI.Beep(System.Int32,System.Int32)">
            <summary>
            调用系统蜂鸣，警报声
            </summary>
            <param name="frequency">声音频率（从37Hz到32767Hz）。在windows95中忽略</param>
            <param name="duration">声音的持续时间，以毫秒为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Net.Share.Win32KernelAPI.GetTickCount64">
            <summary>
            获取系统运行时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.MMORPG.MapAOIData">
            <summary>
            地图九宫格初始化数据
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.xPos">
            <summary>
            x开始位置
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.zPos">
            <summary>
            z开始位置
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.xMax">
            <summary>
            x列最大值
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.zMax">
            <summary>
            z列最大值
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.width">
            <summary>
            格子宽度
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapAOIData.height">
            <summary>
            格子高度
            </summary>
        </member>
        <member name="T:Net.MMORPG.MapData">
            <summary>
            地图数据
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapData.name">
            <summary>
            地图名称
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapData.monsterPoints">
            <summary>
            地图的所有怪物点
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapData.roamingPaths">
            <summary>
             简单在路径点，可以用作服务器NPC位置，玩家出生位置等等
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapData.aoiData">
            <summary>
            地图九宫格数据
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapData.navmeshPath">
            <summary>
            寻路网格文件路径
            </summary>
        </member>
        <member name="M:Net.MMORPG.MapData.ReadData(System.String)">
            <summary>
            读取地图数据
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Net.MMORPG.MapData.WriteData(System.String)">
            <summary>
            写入地图数据 --只有unity编辑器使用
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Net.MMORPG.MapMonsterPoint">
            <summary>
            地图怪物点
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapMonsterPoint.monsters">
            <summary>
            所有怪物数据
            </summary>
        </member>
        <member name="F:Net.MMORPG.MapMonsterPoint.patrolPath">
            <summary>
            怪物巡逻点
            </summary>
        </member>
        <member name="T:Net.MMORPG.MonsterData">
            <summary>
            怪物数据
            </summary>
        </member>
        <member name="F:Net.MMORPG.MonsterData.id">
            <summary>
            怪物索引
            </summary>
        </member>
        <member name="F:Net.MMORPG.MonsterData.health">
            <summary>
            怪物生命值
            </summary>
        </member>
        <member name="F:Net.MMORPG.MonsterData.json">
            <summary>
            可以赋值更多信息
            </summary>
        </member>
        <member name="F:Net.MMORPG.MonsterData.fields">
            <summary>
            记录更多字段信息
            </summary>
        </member>
        <member name="M:Net.MMORPG.MonsterData.GetValue``1(System.String)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Net.MMORPG.RoamingPathData">
            <summary>
             路径点
            </summary>
        </member>
        <member name="F:Net.MMORPG.RoamingPathData.waypoints">
            <summary>
            所有路径点
            </summary>
        </member>
        <member name="T:Net.MMORPG.RoamingPath">
            <summary>
            巡逻路径点组件
            </summary>
        </member>
        <member name="T:Net.Adapter.CallSiteRpcAdapter`1">
            <summary>
            服务器远程过程调用适配器
            </summary>
            <typeparam name="Player"></typeparam>
        </member>
        <member name="M:Net.Adapter.CallSiteRpcAdapter`1.#ctor(Net.Share.IRpcHandler)">
            <summary>
            构造客户端Rpc适配器，参数是xxxServer对象
            </summary>
            <param name="handle"></param>
        </member>
        <member name="T:Net.Adapter.CallSiteRpcAdapter">
            <summary>
            客户端远程过程调用适配器
            </summary>
        </member>
        <member name="M:Net.Adapter.CallSiteRpcAdapter.#ctor(Net.Share.IRpcHandler,System.Boolean)">
            <summary>
            构造客户端Rpc适配器，参数是xxxClient对象
            </summary>
            <param name="handle"></param>
            <param name="logRpc"></param>
        </member>
        <member name="T:Net.Adapter.ListenerAdapter">
            <summary>
            网络事件监听适配器
            </summary>
        </member>
        <member name="T:Net.Adapter.DataAdapter">
            <summary>
            基础数据包适配器
            </summary>
        </member>
        <member name="T:Net.Adapter.MD5EncryptDataHeadAdapter">
            <summary>
            使用md5校验数据部分, 并且使用随机加密法加密md5值, 这里防止md5数据重新被校验, 所以用随机加密把md5值也加密了
            </summary>
        </member>
        <member name="T:Net.Adapter.MD5EncryptDataBodyAdapter">
            <summary>
            使用md5校验数据部分, 并且使用随机加密法加密数据体
            </summary>
        </member>
        <member name="T:Net.Adapter.EncryptDataBodyAdapter">
            <summary>
            使用随机加密法加密数据体
            </summary>
        </member>
        <member name="T:Net.Adapter.SerializeAdapter">
            <summary>
            快速序列化适配器
            </summary>
        </member>
        <member name="T:Net.Adapter.SerializeFastAdapter">
            <summary>
            通用升级版适配器
            </summary>
        </member>
        <member name="T:Net.Adapter.SerializeAdapter2">
            <summary>
            快速序列化2适配器
            </summary>
        </member>
        <member name="T:Net.Adapter.SerializeAdapter3">
            <summary>
            极速序列化3适配器
            </summary>
        </member>
        <member name="T:Net.Client.ClientBase">
            <summary>
            网络客户端核心基类 2019.3.3
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Client">
            <summary>
            客户端套接字
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.host">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.RpcModels">
            <summary>
            远程模型缓冲区
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.RpcCollectDic">
            <summary>
            远程调用方法收集
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.MemberInfos">
            <summary>
            已经收集过的类信息
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.RpcTargetHash">
            <summary>
            当前收集rpc的对象信息
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.SyncVarDic">
            <summary>
            字段同步信息
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.NetworkThread">
            <summary>
            网络独立执行线程
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.NetworkState">
            <summary>
            网络状态
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Connected">
            <summary>
            服务器与客户端是否是连接状态
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Instance">
            <summary>
            网络客户端实例
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.UseUnityThread">
            <summary>
            是否使用unity主线程进行每一帧更新？  
            True：使用unity的Update等方法进行更新，unity的组建可以在Rpc函数内进行调用。
            False：使用多线程进行网络更新，使用多线程更新后unity的组件将不能在rpc函数内进行赋值设置等操作，否则会出现错误问题!
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.sendCount">
            <summary>
            每秒发送数据长度
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.sendAmount">
            <summary>
            每秒发送数据次数
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.resolveAmount">
            <summary>
            每秒解析rpc函数次数
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.receiveAmount">
            <summary>
            每秒接收网络数据次数
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.receiveCount">
            <summary>
            每秒接收网络数据大小
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.FPS">
            <summary>
            网络FPS
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.outflowTotal">
            <summary>
            从启动到现在总流出的数据流量
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.inflowTotal">
            <summary>
            从启动到现在总流入的数据流量
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.heart">
            <summary>
            心跳次数
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.openClient">
            <summary>
            当前客户端是否打开(运行)
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.IsOpenClient">
            <summary>
            客户端是否处于打开状态
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.LogRpc">
            <summary>
            输出调用网络函数
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnConnectedHandle">
            <summary>
            当连接服务器成功事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnConnectFailedHandle">
            <summary>
            当连接失败事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnTryToConnectHandle">
            <summary>
            当尝试连接服务器事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.TryToConnectFailedHandle">
            <summary>
            当尝试连接失败
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnConnectLostHandle">
            <summary>
            当连接中断 (异常) 事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnDisconnectHandle">
            <summary>
            当断开连接事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnReceiveDataHandle">
            <summary>
            当接收到自定义的cmd指令时调用事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnReconnectHandle">
            <summary>
            当断线重连成功触发事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnCloseConnectHandle">
            <summary>
            当关闭连接事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnNetworkDataTraffic">
            <summary>
            当统计网络流量时触发
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnOperationSync">
            <summary>
            当使用服务器的NetScene.AddOperation方法时调用， 场景内的所有演员行为同步
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnRevdBigDataProgress">
            <summary>
            当服务器发送的大数据时, 可监听此事件显示进度值
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnCallProgress">
            <summary>
            当客户端发送可靠数据时, 可监听此事件显示进度值 (GcpClient有效)
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnAddRpcHandle">
            <summary>
            当添加远程过程调用方法时调用， 参数1：要收集rpc特性的对象，参数2:是否异步收集rpc方法和同步字段与属性？ 参数3：如果客户端的rpc列表中已经有了这个对象，还可以添加进去？
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnRemoveRpc">
            <summary>
            当移除远程过程调用对象， 参数1：移除此对象的所有rpc方法
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnRPCExecute">
            <summary>
            当执行调用远程过程方法时触发
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnSerializeRPC">
            <summary>
            当内核序列化远程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义序列化协议 (只允许一个委托, 例子:OnSerializeRpcHandle = (model)=>{return new byte[0];};)
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnDeserializeRPC">
            <summary>
            当内核解析远程过程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义解析协议 (只允许一个委托, 例子:OnDeserializeRpcHandle = (buffer)=>{return new FuncData();};)
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnSerializeOPT">
            <summary>
            当内部序列化帧操作列表时调用, 即将发送数据  !!!!!!!只允许一个委托
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnDeserializeOPT">
            <summary>
            当内部解析帧操作列表时调用  !!!!!只允许一个委托
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnPingCallback">
            <summary>
            ping服务器回调 参数double为延迟毫秒单位 当RTOMode属性为可变重传时, 内核将会每秒自动ping一次
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnSendErrorHandle">
            <summary>
            当socket发送失败调用. 参数1:发送的字节数组  ->可通过SendByteData方法重新发送
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnP2PCallback">
            <summary>
            当从服务器获取的客户端地址点对点
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnDownloadFileHandle">
            <summary>
            当开始下载文件时调用, 参数1(string):服务器发送的文件名 返回值(string):开发者指定保存的文件路径(全路径名称)
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnReceiveFileHandle">
            <summary>
            当服务器发送的文件完成, 接收到文件后调用, 返回true:框架内部释放文件流和删除临时文件(默认) false:使用者处理
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnRevdFileProgress">
            <summary>
            当接收到发送的文件进度
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnSendFileProgress">
            <summary>
            当发送的文件进度
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnWhenQueuing">
            <summary>
            当排队等待中
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnQueueCancellation">
            <summary>
            当排队解除调用
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnServerFull">
            <summary>
            当服务器爆满，服务器积极拒绝客户端请求
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnUpdateVersion">
            <summary>
            当更新版本(参数:服务器的版本号)-- 当服务器版本和客户端版本不一致时, 会调用此事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnSyncPropertyHandle">
            <summary>
            当属性同步-- 当MysqlBuild生成的类属性在服务器被修改后同步下来会调用此事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.OnDataQueueOverflow">
            <summary>
            当数据超出<see cref="P:Net.Client.ClientBase.LimitQueueCount"/>限制后触发的事件
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Frame">
            <summary>
            4个字节记录数据长度 + 1CRC校验
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.HeartInterval">
            <summary>
            心跳时间间隔, 默认每1秒检查一次玩家是否离线, 玩家心跳确认为5次, 如果超出5次 则移除玩家客户端. 确认玩家离线总用时5秒, 
            如果设置的值越小, 确认的速度也会越快. 值太小有可能出现直接中断问题, 设置的最小值在100以上
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.HeartLimit">
            <summary>
            <para>心跳检测次数, 默认为5次检测, 如果5次发送心跳给客户端或服务器, 没有收到回应的心跳包, 则进入断开连接处理</para>
            <para>当一直有数据往来时是不会发送心跳数据的, 只有当没有数据往来了, 才会进入发送心跳数据</para>
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Identify">
            <summary>
            客户端唯一标识, 当登录游戏后, 服务器下发下来的唯一标识, 这个标识就是你的玩家名称, 是<see cref="P:Net.Server.NetPlayer.PlayerID"/>值
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.UID">
            <summary>
            用户唯一标识, 对应服务器的<see cref="P:Net.Server.NetPlayer.UserID"/>
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.PreUserId">
            <summary>
            上次的用户id, 断线重连时用到
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.WorkerQueue">
            <summary>
            跨线程调用任务队列
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.PackageSize">
            <summary>
            接收缓存最大的数据长度 默认可缓存5242880(5M)的数据长度
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.stacking">
            <summary>
            TCP叠包值， 0:正常 >1:叠包次数 > StackNumberMax :清空叠包缓存流
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.BufferStream">
            <summary>
            数据缓冲流
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.operations">
            <summary>
            待发送的操作列表
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.MTU">
            <summary>
            <para>（Maxium Transmission Unit）最大传输单元, 最大传输单元为1500字节, 这里默认为50000, 如果数据超过50000,则是该框架进行分片. 传输层则需要分片为50000/1472=34个数据片</para>
            <para>------ 局域网可以设置为50000, 公网需要设置为1300 或 1400, 如果设置为1400还是发送失败, 则需要设置为1300或以下进行测试 ------</para>
            <para>1.链路层：以太网的数据帧的长度为(64+18)~(1500+18)字节，其中18是数据帧的帧头和帧尾，所以数据帧的内容最大为1500字节（不包括帧头和帧尾），即MUT为1500字节</para>
            <para>2.网络层：IP包的首部要占用20字节，所以这里的MTU＝1500－20＝1480字节</para>
            <para>3.传输层：UDP包的首部要占有8字节，所以这里的MTU＝1480－8＝1472字节</para>
            <see langword="注意:服务器和客户端的MTU属性的值必须保持一致性,否则分包的数据将解析错误!"/> <see cref="!:Server.ServerBase&lt;Player, Scene&gt;.MTU"/>
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.RTO">
            <summary>
            （Retransmission TimeOut）重传超时时间。 默认为1秒重传一次
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.MTPS">
            <summary>
            (Maximum traffic per second) 每秒允许传输最大流量, 默认最大每秒可以传输1m大小
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.FlowControl">
            <summary>
            流量控制模式，只有Gcp协议可用
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.localPort">
            <summary>
            客户端端口
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.PackageLength">
            <summary>
            组包数量，如果是一些小数据包，最多可以组合多少个？ 默认是组合1000个后发送
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.LimitQueueCount">
            <summary>
            限制发送队列长度
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.AutoReconnecting">
            <summary>
            自动断线重新连接, 默认是true
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.CurrReconnect">
            <summary>
            当前尝试重连次数
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.ReconnectCount">
            <summary>
            断线重连次数, 默认会重新连接10次，如果连接10次都失败，则会关闭客户端并释放占用的资源
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.ReconnectInterval">
            <summary>
            断线重连间隔, 默认间隔2秒
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Gcp">
            <summary>
            GCP协议接口
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.UpdateMode">
            <summary>
            网络更新方式
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.SerializeAdapter">
            <summary>
            序列化适配器
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.PackageAdapter">
            <summary>
            数据包适配器
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:Net.Client.ClientBase.LoopEvent">
            <summary>
            网络循环事件处理
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.SendBufferSize">
            <summary>
            设置Socket的发送缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.ReceiveBufferSize">
            <summary>
            设置Socket的接收缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Client.ClientBase.Performance">
            <summary>
            客户端性能模式
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="useUnityThread">
            是否使用unity主线程进行每一帧更新？  
            True：使用unity的Update等方法进行更新，unity的组建可以在Rpc函数内进行调用。
            False：使用多线程进行网络更新，使用多线程更新后unity的组件将不能在rpc函数内进行赋值设置等操作，否则会出错!
            </param>
        </member>
        <member name="M:Net.Client.ClientBase.AddRpc(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加Rpc
            </summary>
            <param name="target">注册的对象实例</param>
            <param name="append">一个Rpc方法是否可以多次添加到Rpcs里面？</param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddRpcHandle(System.Object)">
            <summary>
            添加网络Rpc
            </summary>
            <param name="target">注册的对象实例</param>
        </member>
        <member name="M:Net.Client.ClientBase.AddRpcHandle(System.Object,System.Boolean,System.Action{Net.Share.SyncVarInfo})">
            <summary>
            添加网络Rpc
            </summary>
            <param name="target">注册的对象实例</param>
            <param name="append">一个Rpc方法是否可以多次添加到Rpcs里面？</param>
            <param name="onSyncVarCollect"></param>
        </member>
        <member name="M:Net.Client.ClientBase.RemoveRpc(System.Object)">
            <summary>
            移除客户端的Rpc方法
            </summary>
            <param name="target">将此对象的所有带有Rpc特性的方法移除</param>
        </member>
        <member name="M:Net.Client.ClientBase.BindRpc(System.Object)">
            <summary>
            绑定Rpc函数
            </summary>
            <param name="target">注册的对象实例</param>
        </member>
        <member name="M:Net.Client.ClientBase.BindNetworkHandle(Net.Share.INetworkHandle)">
            <summary>
            绑定网络状态处理接口
            </summary>
            <param name="network"></param>
        </member>
        <member name="M:Net.Client.ClientBase.RemoveNetworkHandle(Net.Share.INetworkHandle)">
            <summary>
            移除网络状态处理接口
            </summary>
            <param name="network"></param>
        </member>
        <member name="M:Net.Client.ClientBase.DispatchRpc(System.String,System.Object[])">
            <summary>
            派发给所有被收集的Rpc方法
            </summary>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.DispatchRpc(System.UInt32,System.Object[])">
            <summary>
            派发给所有被收集的Rpc方法
            </summary>
            <param name="hash"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.PushRpcData(Net.Share.RPCModel)">
            <summary>
            压入远程过程调用方法(RPC)， 将在NetworkEventUpdate线程调用
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Net.Client.ClientBase.StartThread(System.String,System.Threading.ThreadStart)">
            <summary>
            开启线程
            </summary>
            <param name="threadName">线程名称</param>
            <param name="start">线程函数</param>
        </member>
        <member name="M:Net.Client.ClientBase.AbortedThread">
            <summary>
            结束所有线程
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.NetworkUpdate">
            <summary>
            网络数据更新
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.Connect">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.Connect(System.Action{System.Boolean})">
            <summary>
            连接服务器
            </summary>
            <param name="result">连接结果</param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.Connect(System.String,System.Int32)">
            <summary>
            连接服务器
            </summary>
            <param name="host">IP地址</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:Net.Client.ClientBase.Connect(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            连接服务器
            </summary>
            <param name="host">IP地址</param>
            <param name="port">端口号</param>
            <param name="result">连接结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.Connect(System.String,System.Int32,System.Int32,System.Action{System.Boolean})">
            <summary>
            连接服务器
            </summary>
            <param name="host">IP地址</param>
            <param name="port">端口号</param>
            <param name="localPort">设置自身端口号,如果不设置自身端口则值为-1</param>
            <param name="result">连接结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.ConnectResult(System.String,System.Int32,System.Int32,System.Action{System.Boolean})">
            <summary>
            连接服务器
            </summary>
            <param name="host">连接的服务器主机IP地址</param>
            <param name="port">连接的服务器主机端口号</param>
            <param name="localPort">设置自身端口号,如果不设置自身端口则值为-1</param>
            <param name="result">连接结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.Broadcast(System.Action{System.Boolean,System.String})">
            <summary>
            局域网广播寻找服务器主机, 如果找到则通过 result 参数调用, 如果成功获取到主机, 那么result的第一个参数为true, 并且result的第二个参数为服务器IP
            </summary>
            <param name="result">连接结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.Broadcast(System.Int32,System.Action{System.Boolean,System.String})">
            <summary>
            局域网广播寻找服务器主机, 如果找到则通过 result 参数调用, 如果成功获取到主机, 那么result的第一个参数为true, 并且result的第二个参数为服务器IP
            </summary>
            <param name="port">广播到服务器的端口号</param>
            <param name="result">连接结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.StartupThread">
            <summary>
            连接成功处理
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.OnConnected(System.Boolean,System.Action{System.Boolean})">
            <summary>
            连接结果处理
            </summary>
            <param name="isConnect"></param>
            <param name="action">结果</param>
        </member>
        <member name="M:Net.Client.ClientBase.Disconnect(System.Boolean,System.Boolean)">
            <summary>
            断开连接
            </summary>
            <param name="reuseSocket">断开连接后还能重新使用？</param>
            <param name="invokeSocketDisconnect"></param>
        </member>
        <member name="M:Net.Client.ClientBase.NetworkFlowHandler">
            <summary>
            调式输出网络流量信息
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.OnOptPacket(System.Int32)">
            <summary>
            当游戏操作行为封包数据时调用
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Net.Client.ClientBase.SendDirect">
            <summary>
            立刻发送, 不需要等待帧时间 (当你要强制把客户端下线时,你还希望客户端先发送完数据后,再强制客户端退出游戏用到)
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.SendOperations">
            <summary>
            打包操作同步马上要发送了
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.ResetDataHead(Net.System.ISegment)">
            <summary>
            重置头部数据大小, 在小数据达到<see cref="P:Net.Client.ClientBase.PackageLength"/>以上时会将这部分的数据先发送, 发送后还有连带的数据, 需要重置头部数据,装入大货车
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Net.Client.ClientBase.SendDataHandler(Net.System.QueueSafe{Net.Share.RPCModel})">
            <summary>
            发送处理
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.OnSerializeRpcInternal(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当内核序列化远程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义序列化协议
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.OnDeserializeRpcInternal(Net.System.ISegment,Net.Share.RPCModel)">
            <summary>
            当内核解析远程过程函数时调用, 如果想改变内核rpc的序列化方式, 可重写定义解析协议
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.NetworkProcessing">
            <summary>
            网络处理线程
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.SingleNetworkProcessing">
            <summary>
            单线程网络处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.NetworkException(System.Exception)">
            <summary>
            网络异常处理
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Net.Client.ClientBase.ResolveBuffer(Net.System.ISegment@,System.Boolean)">
            <summary>
            解析网络数据包
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperation(System.String,System.Object[])">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperation(System.Int32,System.Object[])">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperation(System.Byte,System.String,System.Object[])">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="cmd"></param>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperation(System.Byte,System.UInt32,System.Object[])">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="cmd"></param>
            <param name="func"></param>
            <param name="pars"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperation(Net.Share.Operation@)">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="opt"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddOperations(System.Collections.Generic.ICollection{Net.Share.Operation})">
            <summary>
            添加操作, 跟Send方法类似，区别在于AddOperation方法是将所有要发送的数据收集成一堆数据后，等待时间间隔进行发送。
            而Send则是直接发送
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Net.Client.ClientBase.HeartHandler">
            <summary>
            后台线程发送心跳包
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.PingServer(System.String)">
            <summary>
            测试服务器网络情况
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.InternalReconnection">
            <summary>
            内部断线重新连接
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.Reconnection">
            <summary>
            断线重新连接
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.Close(System.Boolean,System.Int32)">
            <summary>
            关闭连接,释放线程以及所占资源
            </summary>
            <param name="isWait">true:等待内部1秒结束所有线程再关闭? false:直接关闭</param>
            <param name="millisecondsTimeout">等待毫秒数</param>
        </member>
        <member name="M:Net.Client.ClientBase.SetHeartTime(System.Byte,System.Int32)">
            <summary>
            设置心跳时间
            </summary>
            <param name="timeoutLimit">心跳检测次数, 默认检测5次</param>
            <param name="interval">心跳时间间隔, 每interval毫秒会检测一次</param>
        </member>
        <member name="M:Net.Client.ClientBase.Ping">
            <summary>
            ping测试网络延迟, 通过<see cref="P:Net.Client.ClientBase.OnPingCallback"/>事件回调
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.Ping(System.Action{System.UInt32})">
            <summary>
            ping测试网络延迟, 此方法帮你监听<see cref="P:Net.Client.ClientBase.OnPingCallback"/>事件, 如果不使用的时候必须保证能移除委托, 建议不要用框名函数, 那样会无法移除委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddAdapter(Net.Share.IAdapter)">
            <summary>
            添加适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddAdapter(Net.Share.AdapterType,Net.Share.IAdapter)">
            <summary>
            添加适配器
            </summary>
            <param name="type"></param>
            <param name="adapter"></param>
        </member>
        <member name="M:Net.Client.ClientBase.AddStateHandler(Net.Share.NetworkState,System.Action)">
            <summary>
            添加网络状态事件处理
            </summary>
            <param name="listen">要监听的网络状态</param>
            <param name="action">监听网络状态的回调方法</param>
        </member>
        <member name="M:Net.Client.ClientBase.SyncVarHandler">
            <summary>
            字段,属性同步处理线程
            </summary>
        </member>
        <member name="M:Net.Client.ClientBase.SendFile(System.String,System.Int32)">
            <summary>
            发送文件, 服务器可以通过重写<see cref="!:Server.ServerBase&lt;Player, Scene&gt;.OnReceiveFile"/>方法来接收 或 使用事件<see cref="!:Server.ServerBase&lt;Player, Scene&gt;.OnReceiveFileHandle"/>来监听并处理
            </summary>
            <param name="filePath"></param>
            <param name="bufferSize">每次发送数据大小，如果想最大化发送，你可以设置bufferSize参数为PackageSize - 2048</param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientBase.CheckCall">
            <summary>
            检查send方法的发送队列是否已到达极限, 到达极限则不允许新的数据放入发送队列, 需要等待队列消耗后才能放入新的发送数据
            </summary>
            <returns>是否可发送数据</returns>
        </member>
        <member name="M:Net.Client.ClientBase.OnSetConfigInfo(System.Object[])">
            <summary>
            当设置配置信息
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Net.Client.ClientBase.SetConfig(Net.Config.ClientConfig)">
            <summary>
            设置配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Net.Client.ClientPool`1">
            <summary>
            客户端对象池
            </summary>
            <typeparam name="Client"></typeparam>
        </member>
        <member name="P:Net.Client.ClientPool`1.MaxThread">
            <summary>
            并发线程数量, 发送线程和接收处理线程数量
            </summary>
        </member>
        <member name="P:Net.Client.ClientPool`1.Host">
            <summary>
            服务器主机IP
            </summary>
        </member>
        <member name="P:Net.Client.ClientPool`1.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="M:Net.Client.ClientPool`1.Init(System.String)">
            <summary>
            初始化客户端对象池
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Net.Client.ClientPool`1.Init(System.Int32,Net.Config.ClientConfig)">
            <summary>
            初始化客户端对象池
            </summary>
            <param name="clientCount">客户端连接池数量</param>
            <param name="config">客户端配置</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Net.Client.ClientPool`1.Start">
            <summary>
            开始任务
            </summary>
        </member>
        <member name="M:Net.Client.ClientPool`1.Create(Net.Config.ClientConfig)">
            <summary>
            创建客户端并放入任务池中
            </summary>
            <param name="config">客户端配置</param>
            <returns></returns>
        </member>
        <member name="M:Net.Client.ClientPool`1.Destroy(`0)">
            <summary>
            销毁客户端, 移除任务
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:Net.Client.TcpClient">
            <summary>
            TCP客户端类型 
            第三版本 2020.9.14
            </summary>
        </member>
        <member name="M:Net.Client.TcpClient.#ctor">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:Net.Client.TcpClient.#ctor(System.Boolean)">
            <summary>
            TCP客户端
            </summary>
            <param name="useUnityThread">使用unity多线程?</param>
        </member>
        <member name="M:Net.Client.TcpClient.ConnectResult(System.String,System.Int32,System.Int32,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:Net.Client.UdpClient">
            <summary>
            Udp网络客户端
            在安卓端必须设置可以后台运行, 如果不设置,当你按下home键后,app的所有线程将会被暂停,这会影响网络心跳检测线程,导致网络中断
            解决方法 : 在android项目AndroidManifest.xml文件中的activity中添加如下内容：
            android:configChanges="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" 
            详情请看此博文:https://www.cnblogs.com/nanwei/p/9125316.html
            或这个博文: http://www.voidcn.com/article/p-yakpcmce-bpk.html
            </summary>
        </member>
        <member name="M:Net.Client.UdpClient.#ctor">
            <summary>
            构造udp可靠客户端
            </summary>
        </member>
        <member name="M:Net.Client.UdpClient.#ctor(System.Boolean)">
            <summary>
            构造udp可靠客户端
            </summary>
            <param name="useUnityThread">使用unity多线程?</param>
        </member>
        <member name="M:Net.Client.UdpClient.GetP2P(System.Int32)">
            <summary>
            获取p2p IP和端口, 通过client.OnP2PCallback事件回调
            </summary>
            <param name="uid"></param>
        </member>
        <member name="T:Net.Client.GcpClient">
            <summary>
            Gcp协议
            </summary>
        </member>
        <member name="M:Net.Client.GcpClient.#ctor">
            <summary>
            构造gdp可靠客户端
            </summary>
        </member>
        <member name="M:Net.Client.GcpClient.#ctor(System.Boolean)">
            <summary>
            构造gdp可靠客户端
            </summary>
            <param name="useUnityThread">使用unity多线程?</param>
        </member>
        <member name="T:Net.Client.KcpClient">
            <summary>
            kcp客户端
            </summary>
        </member>
        <member name="T:Net.Client.UdxClient">
            <summary>
            udx客户端类型 -> 只能300人以下连接, 如果想要300个客户端以上, 请进入udx网址:www.goodudx.com 联系作者下载专业版FastUdxApi.dll, 然后更换下框架内的FastUdxApi.dll即可
            第三版本 2020.9.14
            </summary>
        </member>
        <member name="M:Net.Client.UdxClient.#ctor">
            <summary>
            构造可靠传输客户端
            </summary>
        </member>
        <member name="M:Net.Client.UdxClient.#ctor(System.Boolean)">
            <summary>
            构造可靠传输客户端
            </summary>
            <param name="useUnityThread">使用unity多线程?</param>
        </member>
        <member name="T:Net.Client.WebClient">
            <summary>
            web客户端类型
            第三版本 2020.9.14
            </summary>
        </member>
        <member name="P:Net.Client.WebClient.Scheme">
            <summary>
            websocket连接策略, 有wss和ws
            </summary>
        </member>
        <member name="P:Net.Client.WebClient.SslProtocols">
            <summary>
            Ssl类型
            </summary>
        </member>
        <member name="P:Net.Client.WebClient.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="M:Net.Client.WebClient.#ctor">
            <summary>
            构造websocket客户端
            </summary>
        </member>
        <member name="M:Net.Client.WebClient.#ctor(System.Boolean)">
            <summary>
            构造websocket客户端
            </summary>
            <param name="useUnityThread">使用unity多线程?</param>
        </member>
        <member name="T:Net.Config.App">
            <summary>
            gdnet应用程序入口
            </summary>
        </member>
        <member name="M:Net.Config.App.Setup">
            <summary>
            初始化GDNet环境
            </summary>
        </member>
        <member name="M:Net.Config.App.Init">
            <summary>
            初始化GDNet环境
            </summary>
        </member>
        <member name="M:Net.Config.App.Collect">
            <summary>
            收集运行时初始化方法
            </summary>
        </member>
        <member name="T:Net.Config.ClientConfig">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="T:Net.Config.ConfigBase">
            <summary>
            网络配置基类
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.HeartInterval">
            <summary>
            心跳时间间隔, 默认每1秒检查一次玩家是否离线, 玩家心跳确认为5次, 如果超出5次 则移除玩家客户端. 确认玩家离线总用时5秒, 
            如果设置的值越小, 确认的速度也会越快. 值太小有可能出现直接中断问题, 设置的最小值在100以上
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.HeartLimit">
            <summary>
            <para>心跳检测次数, 默认为5次检测, 如果5次发送心跳给客户端或服务器, 没有收到回应的心跳包, 则进入断开连接处理</para>
            <para>当一直有数据往来时是不会发送心跳数据的, 只有当没有数据往来了, 才会进入发送心跳数据</para>
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.PackageSize">
            <summary>
            接收缓存最大的数据长度 默认可缓存5242880(5M)的数据长度
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.MTU">
            <summary>
            <para>（Maxium Transmission Unit）最大传输单元, 最大传输单元为1500字节, 这里默认为50000, 如果数据超过50000,则是该框架进行分片. 传输层则需要分片为50000/1472=34个数据片</para>
            <para>------ 局域网可以设置为50000, 公网需要设置为1300 或 1400, 如果设置为1400还是发送失败, 则需要设置为1300或以下进行测试 ------</para>
            <para>1.链路层：以太网的数据帧的长度为(64+18)~(1500+18)字节，其中18是数据帧的帧头和帧尾，所以数据帧的内容最大为1500字节（不包括帧头和帧尾），即MUT为1500字节</para>
            <para>2.网络层：IP包的首部要占用20字节，所以这里的MTU＝1500－20＝1480字节</para>
            <para>3.传输层：UDP包的首部要占有8字节，所以这里的MTU＝1480－8＝1472字节</para>
            <see langword="注意:服务器和客户端的MTU属性的值必须保持一致性,否则分包的数据将解析错误!"/> <see cref="!:Server.ServerBase&lt;Player, Scene&gt;.MTU"/>
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.RTO">
            <summary>
            （Retransmission TimeOut）重传超时时间。 默认为1秒重传一次
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.MTPS">
            <summary>
            (Maximum traffic per second) 每秒允许传输最大流量, 默认最大每秒可以传输1m大小
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.FlowControl">
            <summary>
            流量控制模式，只有Gcp协议可用
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.PackageLength">
            <summary>
            组包数量，如果是一些小数据包，最多可以组合多少个？ 默认是组合1000个后发送
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.LimitQueueCount">
            <summary>
            限制发送队列长度
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.AutoReconnecting">
            <summary>
            自动断线重新连接, 默认是true
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.ReconnectCount">
            <summary>
            断线重连次数, 默认会重新连接10次，如果连接10次都失败，则会关闭客户端并释放占用的资源
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.ReconnectInterval">
            <summary>
            断线重连间隔, 默认间隔2秒
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.SendBufferSize">
            <summary>
            设置Socket的发送缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Config.ConfigBase.ReceiveBufferSize">
            <summary>
            设置Socket的接收缓冲区大小, 也叫做窗口大小
            </summary>
        </member>
        <member name="P:Net.Config.Config.BaseCapacity">
            <summary>
            内存接收缓冲区基础容量 默认1024
            </summary>
        </member>
        <member name="P:Net.Config.Config.BasePath">
            <summary>
            项目的持久路径, 网络需要处理文件时的目录
            </summary>
        </member>
        <member name="P:Net.Config.Config.ConfigPath">
            <summary>
            配置文件的目录
            </summary>
        </member>
        <member name="P:Net.Config.Config.DataPath">
            <summary>
            获取项目路径
            </summary>
        </member>
        <member name="P:Net.Config.Config.MainThreadTick">
            <summary>
            在主线程处理所有网络功能? 否则会在多线程进行
            </summary>
        </member>
        <member name="T:Net.Config.TableConfig">
            <summary>
            表配置类, 可双端使用
            </summary>
        </member>
        <member name="M:Net.Config.TableConfig.LoadTableFile(System.String)">
            <summary>
            加载表文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Net.Config.TableConfig.LoadTable(System.String)">
            <summary>
            加载表数据
            </summary>
            <param name="jsonStr"></param>
        </member>
        <member name="M:Net.Config.TableConfig.GetTable(System.String)">
            <summary>
            获取某个表
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Config.TableConfig.GetDataConfig``1(System.String)">
            <summary>
            获取excel表格数据，filterExpression参数例子: "Name = 'UI_Message'"
            </summary>
            <typeparam name="T">要获取的类型</typeparam>
            <param name="filterExpression">过滤表达式</param>
            <returns></returns>
        </member>
        <member name="M:Net.Config.TableConfig.GetDataConfigs``1(System.String)">
            <summary>
            获取excel表格数据，filterExpression参数例子: "Name = 'UI_Message'"
            </summary>
            <typeparam name="T">要获取的类型</typeparam>
            <param name="filterExpression">过滤表达式</param>
            <returns></returns>
        </member>
        <member name="T:Net.Event.EventSystem">
            <summary>
            事件处理静态类, 此类可以用于计时调用事件
            </summary>
        </member>
        <member name="M:Net.Event.EventSystem.AddEvent(System.Int32,System.Action)">
            <summary>
            延迟处理，millisecondsTimeout毫秒后执行action方法
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="action"></param>
            <returns>返回id标识</returns>
        </member>
        <member name="M:Net.Event.EventSystem.AddEvent(System.Int32,System.Action{System.Object},System.Object)">
            <summary>
            添加计时器事件, 当系统时间大于或等于(time)时间后调用(action)事件
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Net.Event.EventSystem.AddEvent(System.Int32,System.Func{System.Object,System.Boolean},System.Object)">
            <summary>
            添加计时器事件, 当系统时间大于或等于(time)时间后调用(action)事件, 当action返回true后事件结束, 则每time时间调用一次
            </summary>
            <param name="time">毫秒单位</param>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Net.Event.EventSystem.RemoveEvent(System.Int32)">
            <summary>
            移除事件
            </summary>
            <param name="actionId"></param>
        </member>
        <member name="T:Net.Event.ConsoleDebug">
            <summary>
            控制台输出帮助类
            </summary>
        </member>
        <member name="T:Net.Event.FormDebug">
            <summary>
            Form窗口程序输出帮助类
            </summary>
        </member>
        <member name="F:Net.Event.FormDebug.BackgroundColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="F:Net.Event.FormDebug.LogColor">
            <summary>
            日志颜色
            </summary>
        </member>
        <member name="F:Net.Event.FormDebug.WarningColor">
            <summary>
            警告颜色
            </summary>
        </member>
        <member name="F:Net.Event.FormDebug.ErrorColor">
            <summary>
            错误颜色
            </summary>
        </member>
        <member name="T:Net.Event.WriteLogMode">
            <summary>
            写入日志模式
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.None">
            <summary>
            啥都不干
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.Log">
            <summary>
            写入普通日志
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.Warn">
            <summary>
            写入警告日志
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.Error">
            <summary>
            写入错误日志
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.All">
            <summary>
            三种日志全部写入
            </summary>
        </member>
        <member name="F:Net.Event.WriteLogMode.WarnAndError">
            <summary>
            只写入警告日志和错误日志
            </summary>
        </member>
        <member name="T:Net.Event.NDebug">
            <summary>
            消息输入输出处理类
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.Name">
            <summary>
             输出日志名称--如果使用
            </summary>
        </member>
        <member name="E:Net.Event.NDebug.LogHandle">
            <summary>
            输出调式消息
            </summary>
        </member>
        <member name="E:Net.Event.NDebug.LogErrorHandle">
            <summary>
            输出调式错误消息
            </summary>
        </member>
        <member name="E:Net.Event.NDebug.LogWarningHandle">
            <summary>
            输出调式警告消息
            </summary>
        </member>
        <member name="E:Net.Event.NDebug.Output">
            <summary>
            输出信息处理事件
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.LogMax">
            <summary>
            输出日志最多容纳条数
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.LogErrorMax">
            <summary>
            输出错误日志最多容纳条数
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.LogWarningMax">
            <summary>
            输出警告日志最多容纳条数
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.LogOutputMax">
            <summary>
            每次执行可连续输出多少条日志, 默认输出300 * 3条
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.Debug">
            <summary>
            绑定的输入输出对象
            </summary>
        </member>
        <member name="P:Net.Event.NDebug.WriteFileMode">
            <summary>
            写入日志到文件模式
            </summary>
        </member>
        <member name="M:Net.Event.NDebug.Log(System.Object)">
            <summary>
            输出调式消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Net.Event.NDebug.LogError(System.Object)">
            <summary>
            输出错误消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Net.Event.NDebug.LogWarning(System.Object)">
            <summary>
            输出警告消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Net.Event.NDebug.WriteLog(System.Object)">
            <summary>
            写入日志文件
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Net.Event.NDebug.BindConsoleLog(System.Boolean,System.Int32)">
            <summary>
            绑定控制台输出
            </summary>
        </member>
        <member name="M:Net.Event.NDebug.RemoveConsoleLog">
            <summary>
            移除控制台输出
            </summary>
        </member>
        <member name="M:Net.Event.NDebug.BindFormLog(System.Windows.Forms.ListBox,System.Drawing.Brush)">
            <summary>
            绑定窗体程序输出
            </summary>
        </member>
        <member name="M:Net.Event.NDebug.RemoveFormLog">
            <summary>
            移除窗体程序输出
            </summary>
        </member>
        <member name="M:Net.Event.NDebug.BindDebug(Net.Event.IDebug)">
            <summary>
            绑定输出接口
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Net.Event.NDebug.RemoveDebug">
            <summary>
            移除输出接口
            </summary>
        </member>
        <member name="T:Net.Event.TimerEvent">
            <summary>
            时间计时器类
            </summary>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.Single,System.Action,System.Boolean)">
            <summary>
            添加计时器事件, time时间后调用ptr
            </summary>
            <param name="time">以秒为单位</param>
            <param name="ptr"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.Single,System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            添加计时器事件, time时间后调用ptr
            </summary>
            <param name="time">以秒为单位</param>
            <param name="ptr"></param>
            <param name="obj"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.Single,System.Int32,System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            添加计时器事件, 当time时间到调用ptr, 总共调用invokeNum次数
            </summary>
            <param name="time">以秒为单位</param>
            <param name="invokeNum">调用次数, -1则是无限循环</param>
            <param name="ptr"></param>
            <param name="obj"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.Single,System.Func{System.Boolean},System.Boolean)">
            <summary>
            添加计时器事件, 当time时间到调用ptr, 当ptr返回true则time时间后再次调用ptr, 直到ptr返回false为止
            </summary>
            <param name="time">以秒为单位</param>
            <param name="ptr"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.String,System.Single,System.Func{System.Boolean},System.Boolean)">
            <summary>
            添加计时器事件, 当time时间到调用ptr, 当ptr返回true则time时间后再次调用ptr, 直到ptr返回false为止
            </summary>
            <param name="name">以秒为单位</param>
            <param name="time"></param>
            <param name="ptr"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.Single,System.Func{System.Object,System.Boolean},System.Object,System.Boolean)">
            <summary>
            添加计时事件, 当time时间到调用ptr, 当ptr返回true则time时间后再次调用ptr, 直到ptr返回false为止
            </summary>
            <param name="time">以秒为单位</param>
            <param name="ptr"></param>
            <param name="obj"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.AddEvent(System.String,System.Int64,System.Func{System.Boolean},System.Boolean)">
            <summary>
            添加计时器事件, 当time时间到调用ptr, 当ptr返回true则time时间后再次调用ptr, 直到ptr返回false为止
            </summary>
            <param name="name"></param>
            <param name="time">毫秒为单位</param>
            <param name="ptr"></param>
            <param name="isAsync">如果是耗时任务, 需要设置true</param>
            <returns>可用于结束事件的id</returns>
        </member>
        <member name="M:Net.Event.TimerEvent.GetEvent(System.Int32)">
            <summary>
            获取计时事件
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Net.Event.TimerEvent.RemoveEvent(System.Int32)">
            <summary>
            移除事件
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Net.Event.TimerEvent.ResetTimeInterval(System.Int32,System.Int64,System.Boolean)">
            <summary>
            重置计时器事件间隔
            </summary>
            <param name="eventID"></param>
            <param name="interval"></param>
            <param name="restartTiming">是否废弃以前的计时, 从当前重新开始新的计时</param>
        </member>
        <member name="M:Net.Event.TimerEvent.ResetEvents">
            <summary>
            重置事件
            </summary>
        </member>
        <member name="M:Net.Event.TimerEvent.Clear">
            <summary>
            清除事件列表
            </summary>
        </member>
        <member name="M:Net.Event.TimerTick.CheckTimeout(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            检测时间是否到达
            </summary>
            <param name="tick"></param>
            <param name="interval">间隔最大是1000</param>
            <param name="sleep"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Serialize.NetConvert">
            <summary>
            网络转换核心 2019.7.16
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvert.Serialize(Net.Share.RPCModel,System.Byte[],System.Boolean)">
            <summary>
            新版网络序列化
            </summary>
            <param name="model">函数名</param>
            <param name="flag"></param>
            <param name="recordType"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvert.Deserialize(Net.System.ISegment,Net.Share.RPCModel,System.Boolean)">
            <summary>
            新版反序列化
            </summary>
            <param name="segment"></param>
            <param name="model"></param>
            <param name="recordType"></param>
        </member>
        <member name="T:Net.Serialize.NetConvertBase">
            <summary>
            网络转换基础类
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.StringToValue(System.Type,System.String)">
            <summary>
            字符串转对象
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.StringToValue(System.String,System.String)">
            <summary>
            字符串转系统基础类型 ( type 给定类型名称 , value 转换这个字符串为type类型的值 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.ToVector2_3_4(System.String,System.String)">
            <summary>
            字符转三维向量值 ( type 以字符形式给定一个类型 , value 类型的值 注：类型的值必须以给定类型的值符合才能转换成功 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.ToRect(System.String,System.String)">
            <summary>
            字符转矩形值 ( type 以字符形式给定一个类型 , value 类型的值 注：类型的值必须以给定类型的值符合才能转换成功 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.ToColor(System.String,System.String)">
            <summary>
            字符转颜色值 ( type 以字符形式给定一个类型 , value 类型的值 注：类型的值必须以给定类型的值符合才能转换成功 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.ToQuaternion(System.String,System.String)">
            <summary>
            字符转欧拉角值 ( type 以字符形式给定一个类型 , value 类型的值 注：类型的值必须以给定类型的值符合才能转换成功 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.To_Vector234_Rect_Quaternion_Color(System.String,System.String)">
            <summary>
            转换字符为Vector2 或 Vector3 或 Vector4 或 Rect 或 Quaternion 的值 ( type 以字符形式给定一个类型 , value 类型的值 注：类型的值必须以给定类型的值符合才能转换成功 )
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.SetByteBits(System.Byte@,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            设置二进制数据
            </summary>
            <param name="data">要修改的数据</param>
            <param name="startBit">开始位,从1-8</param>
            <param name="endBit">结束位</param>
            <param name="value">设置的值从1位开始读取到设置的长度</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.GetByteBits(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            获取二进制数据
            </summary>
            <param name="data">原值</param>
            <param name="startBit">开始位,从1-8</param>
            <param name="endBit">结束位</param>
            <returns>返回开始位-结束位组成的byte值</returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            设置二进制值
            </summary>
            <param name="data">要修改的数据</param>
            <param name="index">索引从1-8</param>
            <param name="flag">填二进制的0或1</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBase.GetBit(System.Byte,System.Byte)">
            <summary>
            获取二进制值
            </summary>
            <param name="data">要获取的数据</param>
            <param name="index">索引从1-8</param>
            <returns>返回二进制的0或1</returns>
        </member>
        <member name="T:Net.Serialize.NetConvertBinary">
            <summary>
            提供序列化二进制类
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.Init">
            <summary>
            初始化网络转换类型
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.AddSerializeBaseType">
            <summary>
            添加网络基本类型， int，float，bool，string......
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.AddSerializeType``1(System.String[],System.String[])">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="onlyFields">只序列化的字段名称列表</param>
            <param name="ignoreFields">不序列化的字段名称列表</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.AddSerializeType(System.Type,System.String[],System.String[])">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <param name="type">序列化的类型</param>
            <param name="onlyFields">只序列化的字段名称列表</param>
            <param name="ignoreFields">不序列化的字段名称列表</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.AddSerializeType(System.Type,System.UInt16,System.String[],System.String[])">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <param name="type">序列化的类型</param>
            <param name="typeHash">序列化的类型哈希码,用于反序列化识别</param>
            <param name="onlyFields">只序列化的字段名称列表</param>
            <param name="ignoreFields">不序列化的字段名称列表</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.IndexToType(System.UInt16)">
            <summary>
            索引取类型
            </summary>
            <param name="typeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.TypeToIndex(System.Type)">
            <summary>
            类型取索引
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.WriteArray(Net.System.ISegment,System.Collections.IList,System.Type,System.Boolean,System.Boolean)">
            <summary>
            序列化数组实体
            </summary>
            <param name="stream"></param>
            <param name="array"></param>
            <param name="itemType"></param>
            <param name="recordType"></param>
            <param name="ignore"></param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.ReadArray(Net.System.ISegment,System.Collections.IList@,System.Type,System.Boolean,System.Boolean)">
            <summary>
            反序列化数组
            </summary>
            <param name="segment"></param>
            <param name="array"></param>
            <param name="itemType"></param>
            <param name="recordType"></param>
            <param name="ignore"></param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.Serialize(System.Object,System.Boolean,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <param name="recordType">是否记录类型</param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.SerializeObject(System.Object,System.Boolean,System.Boolean)">
            <summary>
            序列化对象, 不记录反序列化类型
            </summary>
            <param name="obj"></param>
            <param name="recordType"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.SerializeObject(Net.System.ISegment,System.Object,System.Boolean,System.Boolean)">
            <summary>
            序列化对象, 不记录反序列化类型
            </summary>
            <param name="stream"></param>
            <param name="obj"></param>
            <param name="recordType"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.WriteObject(Net.System.ISegment,System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            序列化对象
            </summary>
            <param name="segment"></param>
            <param name="type"></param>
            <param name="target"></param>
            <param name="recordType"></param>
            <param name="ignore">忽略不使用<see cref="M:Net.Serialize.NetConvertBinary.AddBaseType``1"/>方法也会被序列化</param>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.DeserializeObject``1(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="recordType">序列化的类型字段是 object[]字段时, 可以帮你记录object的绝对类型</param>
            <param name="ignore">忽略不使用<see cref="M:Net.Serialize.NetConvertBinary.AddBaseType``1"/>方法也会被序列化</param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.DeserializeObject``1(Net.System.ISegment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segment"></param>
            <param name="isPush"></param>
            <param name="recordType"></param>
            <param name="ignore">忽略不使用<see cref="M:Net.Serialize.NetConvertBinary.AddBaseType``1"/>方法也会被序列化</param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.DeserializeObject``1(Net.System.ISegment,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            反序列化 -- 记录类型时用到
            </summary>
            <typeparam name="T">基类或真实类对象</typeparam>
            <param name="segment"></param>
            <param name="type">派生类型</param>
            <param name="isPush"></param>
            <param name="recordType">记录类型?</param>
            <param name="ignore">忽略不使用<see cref="M:Net.Serialize.NetConvertBinary.AddBaseType``1"/>方法也会被序列化</param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.DeserializeObject(Net.System.ISegment,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <param name="segment"></param>
            <param name="type"></param>
            <param name="isPush"></param>
            <param name="recordType"></param>
            <param name="ignore">忽略不使用<see cref="M:Net.Serialize.NetConvertBinary.AddBaseType``1"/>方法也会被序列化</param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertBinary.ReadObject(Net.System.ISegment,System.Type,System.Boolean,System.Boolean)">
            <summary>
            反序列化实体对象
            </summary>
            <param name="segment"></param>
            <param name="type"></param>
            <param name="recordType"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Serialize.NetConvertFast">
            <summary>
            快速解析类型, 使用此类需要使用AddSerializeType先添加序列化类型, 类型是固定, 并且双端统一
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast.AddNetworkBaseType">
            <summary>
            添加网络基本类型， int，float，bool，string......
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast.AddSerializeType``1">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast.AddSerializeType(System.Type)">
            <summary>
            添加经过网络传送的类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Net.Serialize.NetConvertFast.AddSerializeType(System.Type,System.UInt16)">
            <summary>
            添加经过网络传送的类型
            </summary>
            <param name="type">序列化的类型</param>
            <param name="typeHash">序列化的类型反序列化的哈希识别码</param>
        </member>
        <member name="T:Net.Serialize.ISerialize">
            <summary>
            快速序列化2接口--动态匹配
            </summary>
        </member>
        <member name="P:Net.Serialize.ISerialize.HashCode">
            <summary>
            双端一致性的哈希协议码 --解决子项目和父项目融合问题
            </summary>
        </member>
        <member name="M:Net.Serialize.ISerialize.Bind">
            <summary>
            绑定静态序列化缓存
            </summary>
        </member>
        <member name="M:Net.Serialize.ISerialize.WriteValue(System.Object,Net.System.ISegment)">
            <summary>
            序列化写入
            </summary>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Net.Serialize.ISerialize.ReadValue(Net.System.ISegment)">
            <summary>
            反序列化读取
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Net.Serialize.ISerialize`1">
            <summary>
            快速序列化2接口---类型匹配
            </summary>
        </member>
        <member name="M:Net.Serialize.ISerialize`1.Write(`0,Net.System.ISegment)">
            <summary>
            序列化写入
            </summary>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Net.Serialize.ISerialize`1.Read(Net.System.ISegment)">
            <summary>
            反序列化读取
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Net.Serialize.IBindingType">
            <summary>
            类型绑定查找收集接口
            </summary>
        </member>
        <member name="P:Net.Serialize.IBindingType.SortingOrder">
            <summary>
            收集序列化类型的顺序 -!!!!- 如果有多个项目继承绑定类型时, 必须设置顺序, 否则会出现, 后端和前端收集的传输类型不一样的问题
            </summary>
        </member>
        <member name="P:Net.Serialize.IBindingType.BindTypes">
            <summary>
            收集的绑定类型列表
            </summary>
        </member>
        <member name="T:Net.Serialize.IBindingEntryType">
            <summary>
            绑定入口类型，Unity编辑器工具使用
            </summary>
        </member>
        <member name="P:Net.Serialize.IBindingEntryType.BindTypes">
            <summary>
            要绑定的类型列表
            </summary>
        </member>
        <member name="T:Net.Serialize.SerializeCache`1">
            <summary>
            序列化缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Net.Serialize.SerializeCache`1.Serialize">
            <summary>
            序列化绑定实例
            </summary>
        </member>
        <member name="T:Net.Serialize.NetConvertFast2">
            <summary>
            极速序列化2版本
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.Init">
            <summary>
            初始化网络转换类型
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddBaseType">
            <summary>
            添加网络基本类型， int，float，bool，string......
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType``1">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <typeparam name="T">要添加的网络类型</typeparam>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType3s(System.Type[])">
            <summary>
            添加所有可序列化的类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType3``1">
            <summary>
            添加可序列化的3个参数类型(T类,T类数组,T类List泛型), 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <typeparam name="T">要添加的网络类型</typeparam>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType3(System.Type)">
            <summary>
            添加可序列化的3个参数类型(T类,T类数组,T类List泛型), 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType(System.Type)">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <param name="type">要添加的网络类型</param>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.AddSerializeType(System.Type[])">
            <summary>
            添加可序列化的参数类型, 网络参数类型 如果不进行添加将不会被序列化,反序列化
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.IndexToType(System.UInt16)">
            <summary>
            索引取类型
            </summary>
            <param name="typeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Serialize.NetConvertFast2.TypeToIndex(System.Type)">
            <summary>
            类型取索引
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Serialize.NonSerialized">
            <summary>
            极速序列化不序列化的特性
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Net.System.BitHelper" -->
        <member name="M:Net.System.BitHelper.#ctor(System.Int32*,System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArray">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:Net.System.BitHelper.#ctor(System.Int32[],System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArray">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:Net.System.BitHelper.MarkBit(System.Int32)">
            <summary>
            Mark bit at specified position
            </summary>
            <param name="bitPosition"></param>
        </member>
        <member name="M:Net.System.BitHelper.IsMarked(System.Int32)">
            <summary>
            Is bit at specified position marked?
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.BitHelper.ToIntArrayLength(System.Int32)">
            <summary>
            How many ints must be allocated to represent n bits. Returns (n+31)/32, but 
            avoids overflow
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:Net.System.SegmentType">
            <summary>
            内存片段类型
            </summary>
        </member>
        <member name="F:Net.System.SegmentType.Segment">
            <summary>
            使用内存片(类内存段)
            </summary>
        </member>
        <member name="F:Net.System.SegmentType.FixedSegment">
            <summary>
            固定片段, 不进行压缩基础类型, 如int直接占用4字节, long直接占用8字节...
            </summary>
        </member>
        <member name="T:Net.System.BufferPool">
            <summary>
            数据缓冲内存池
            </summary>
        </member>
        <member name="P:Net.System.BufferPool.Size">
            <summary>
            数据缓冲池大小. 默认65536字节
            </summary>
        </member>
        <member name="P:Net.System.BufferPool.Log">
            <summary>
            当没有合理回收内存，导致内存泄漏被回收后提示
            </summary>
        </member>
        <member name="F:Net.System.BufferPool.SegmentType">
            <summary>
            使用的缓存块类型
            </summary>
        </member>
        <member name="M:Net.System.BufferPool.Take">
            <summary>
            从内存池取数据片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.System.BufferPool.Take(System.Int32)">
            <summary>
            从内存池取数据片
            </summary>
            <param name="size">内存大小</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.BufferPool.Push(Net.System.ISegment)">
            <summary>
            压入数据片, 等待复用
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Net.System.BufferPool.NewSegment(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            创建内存块
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="isRecovery"></param>
            <returns>根据版本设置创建接口对象</returns>
        </member>
        <member name="T:Net.System.ArrayPool`1">
            <summary>
            数据缓冲数组池
            </summary>
        </member>
        <member name="M:Net.System.ArrayPool`1.Take(System.Int32)">
            <summary>
            从内存池取数据片
            </summary>
            <param name="size">内存大小</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.ArrayPool`1.Push(`0)">
            <summary>
            压入数据片, 等待复用
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:Net.System.DataCacheBase">
            <summary>
            数据缓存基类
            </summary>
        </member>
        <member name="P:Net.System.DataCacheBase.IsQuery">
            <summary>
            是否查询过了, 比如123的账号, 查询一次mysql没有查询到, 第二次就不需要进行查询了, 再次查询只会占用IO, 这里可以设置查询间隔, 比如123查询不到, 就给个60秒的过期时间, 这样可以解决IO问题
            </summary>
        </member>
        <member name="P:Net.System.DataCacheBase.ExpirationTime">
            <summary>
            缓存过期时间 (毫秒单位), 默认是-1, 也就是无过期时间, 这是考虑到当new一个缓存对象时, 这时候多线程检查时直接把这个对象当成过期时间处理导致问题
            </summary>
        </member>
        <member name="F:Net.System.DataCacheBase.Locking">
            <summary>
            数据有必要时锁
            </summary>
        </member>
        <member name="T:Net.System.DataCache`1">
            <summary>
            数据缓存类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Net.System.DataCache`1.Data">
            <summary>
            缓存数据对象
            </summary>
        </member>
        <member name="M:Net.System.DataCache`1.QueryOrGet(System.Func{`0},System.Func{`0},System.Action{`0})">
            <summary>
            查询缓存对象或获取数据对象, 如果对象存在就直接获取, 如果对象不存在则需要查询对象进行缓存并获取
            </summary>
            <param name="queryFunc">第一次执行查询</param>
            <param name="followQuery">跟随查询, 比如查询user表成功后, 还需要查询item表, friend表, 其他关联的表等等</param>
            <param name="onNullQuery">当查询数据为空时，如果想创建对象，可以处理此事件创建对象</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.DataCache`1.QueryOrGetAsync(System.Func{Cysharp.Threading.Tasks.UniTask{`0}},System.Func{`0},System.Func{`0,Cysharp.Threading.Tasks.UniTask})">
            <summary>
            查询缓存对象或获取数据对象, 如果对象存在就直接获取, 如果对象不存在则需要查询对象进行缓存并获取
            </summary>
            <param name="queryFunc">第一次执行查询</param>
            <param name="onNullQuery">当查询数据为空时，如果想创建对象，可以处理此事件创建对象</param>
            <param name="followQuery">跟随查询, 比如查询user表成功后, 还需要查询item表, friend表, 其他关联的表等等</param>
            <returns></returns>
        </member>
        <member name="T:Net.System.DataCacheDictionary`2">
            <summary>
            数据缓存字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Net.System.DataCacheDictionary`2.GetOrCreate(`0,System.Func{`1})">
            <summary>
            获取或创建缓存，如果获取key不存在，则会创建缓存key，创建缓存值可以在onCreate委托处理
            </summary>
            <param name="key">查询key</param>
            <param name="onCreate">当查询不存在创建缓存委托</param>
            <returns></returns>
        </member>
        <member name="T:Net.System.DataCacheManager">
            <summary>
            数据缓存管理器类
            </summary>
        </member>
        <member name="F:Net.System.DataCacheManager.CacheTimeout">
            <summary>
            缓存12个小时
            </summary>
        </member>
        <member name="P:Net.System.DataCacheManager.NullQueryTimeout">
            <summary>
            空查询60秒恢复
            </summary>
        </member>
        <member name="M:Net.System.DataCacheManager.Executed">
            <summary>
            检查缓存字段过期对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.System.DataCacheManager.Start">
            <summary>
            开始缓存管理器
            </summary>
        </member>
        <member name="M:Net.System.DataCacheManager.Stop">
            <summary>
            停止缓存管理器
            </summary>
        </member>
        <member name="T:Net.System.FastList`1">
            <summary>
            List类, 添加是有序的, 移除是无序的,极速的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.System.FastList`1.GetRemoveRange(System.Int32,System.Int32)">
            <summary>
            获取对象数组, 并移除对象数组, 如果长度大于列表的长度, 则会裁剪到能获取的长度
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Net.System.FastListSafe`1">
            <summary>
            线程安全的List类, 无序的, 极速的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.System.FastListSafe`1.GetRemoveRange(System.Int32,System.Int32)">
            <summary>
            获取列表对象, 并移除列表, 如果在多线程下, 多线程并行下, 是可以获取到对象, 但是会出现长度不是所指定的长度, 所以获取后要判断一下长度
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.FixedSegment.#ctor(System.Byte[])">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Net.System.FixedSegment.#ctor(System.Byte[],System.Boolean)">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Net.System.FixedSegment.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="T:Net.System.HashSetExEqualityComparer`1">
            <summary>
            Equality comparer for hashsets of hashsets
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Net.System.HashSetExDebugView`1">
            <summary>
            Debug view for HashSetEx
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Net.System.HashSetEx`1" -->
        <member name="M:Net.System.HashSetEx`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implementation Notes:
            Since resizes are relatively expensive (require rehashing), this attempts to minimize 
            the need to resize by setting the initial capacity based on size of collection. 
            </summary>
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Net.System.HashSetEx`1.System#Collections#Generic#ICollection{T}#Add(`0)" -->
        <member name="M:Net.System.HashSetEx`1.Clear">
            <summary>
            Remove all items from this set. This clears the elements but not the underlying 
            buckets and slots array. Follow this call by TrimExcess to release these.
            </summary>
        </member>
        <member name="M:Net.System.HashSetEx`1.Contains(`0)">
            <summary>
            Checks if this hashset contains the item
            </summary>
            <param name="item">item to check for containment</param>
            <returns>true if item contained; false if not</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items in this hashset to array, starting at arrayIndex
            </summary>
            <param name="array">array to add items to</param>
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:Net.System.HashSetEx`1.Remove(`0)">
            <summary>
            Remove item from this hashset
            </summary>
            <param name="item">item to remove</param>
            <returns>true if removed; false if not (i.e. if the item wasn't in the HashSetEx)</returns>
        </member>
        <member name="P:Net.System.HashSetEx`1.Count">
            <summary>
            Number of elements in this hashset
            </summary>
        </member>
        <member name="P:Net.System.HashSetEx`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Whether this is readonly
            </summary>
        </member>
        <member name="M:Net.System.HashSetEx`1.Add(`0)">
            <summary>
            Add item to this HashSetEx. Returns bool indicating whether item was added (won't be 
            added if already present)
            </summary>
            <param name="item"></param>
            <returns>true if added, false if already present</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of <typeparamref name="T"/> when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of 
            a newly constructed one (so that more sharing of references can occur) or to look up
            a value that has more complete data than the value you currently have, although their
            comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="M:Net.System.HashSetEx`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Take the union of this HashSetEx with other. Modifies this set.
            
            Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding 
            multiple resizes ended up not being useful in practice; quickly gets to the 
            point where it's a wasteful check.
            </summary>
            <param name="other">enumerable with items to add</param>
        </member>
        <member name="M:Net.System.HashSetEx`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes the intersection of this set with other. Modifies this set.
            
            Implementation Notes: 
            We get better perf if other is a hashset using same equality comparer, because we 
            get constant contains check in other. Resulting cost is O(n1) to iterate over this.
            
            If we can't go above route, iterate over the other and mark intersection by checking
            contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1. 
            
            Attempts to return early based on counts alone, using the property that the 
            intersection of anything with the empty set is the empty set.
            </summary>
            <param name="other">enumerable with items to add </param>
        </member>
        <member name="M:Net.System.HashSetEx`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove items in other from this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to remove</param>
        </member>
        <member name="M:Net.System.HashSetEx`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes symmetric difference (XOR) with other and this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to XOR</param>
        </member>
        <member name="M:Net.System.HashSetEx`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a subset of other.
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a subset of anything, including the empty set
            2. If other has unique elements according to this equality comparer, and this has more
            elements than other, then it can't be a subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a subset of other; false if not</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper subset of other (i.e. strictly contained in)
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a proper subset of a set that contains at least
            one element, but it's not a proper subset of the empty set.
            2. If other has unique elements according to this equality comparer, and this has >=
            the number of elements in other, then this can't be a proper subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper subset of other; false if not</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a superset of other
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If other has no elements (it's the empty set), then this is a superset, even if this
            is also the empty set.
            2. If other has unique elements according to this equality comparer, and this has less 
            than the number of elements in other, then this can't be a superset
            
            </summary>
            <param name="other"></param>
            <returns>true if this is a superset of other; false if not</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper superset of other (i.e. other strictly contained in this)
            
            Implementation Notes: 
            This is slightly more complicated than above because we have to keep track if there
            was at least one element not contained in other.
            
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it can't be a proper superset of any set, even if 
            other is the empty set.
            2. If other is an empty set and this contains at least 1 element, then this is a proper
            superset.
            3. If other has unique elements according to this equality comparer, and other's count
            is greater than or equal to this count, then this can't be a proper superset
            
            Furthermore, if other has unique elements according to this equality comparer, we can
            use a faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper superset of other; false if not</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set overlaps other (i.e. they share at least one item)
            </summary>
            <param name="other"></param>
            <returns>true if these have at least one common element; false if disjoint</returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this and other contain the same elements. This is set equality: 
            duplicates and order are ignored
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:Net.System.HashSetEx`1.Comparer">
            <summary>
            Gets the IEqualityComparer that is used to determine equality of keys for 
            the HashSetEx.
            </summary>
        </member>
        <member name="M:Net.System.HashSetEx`1.TrimExcess">
            <summary>
            Sets the capacity of this list to the size of the list (rounded up to nearest prime),
            unless count is 0, in which case we release references.
            
            This method can be used to minimize a list's memory overhead once it is known that no
            new elements will be added to the list. To completely clear a list and release all 
            memory referenced by the list, execute the following statements:
            
            list.Clear();
            list.TrimExcess(); 
            </summary>
        </member>
        <member name="M:Net.System.HashSetEx`1.CreateSetComparer">
            <summary>
            Used for deep equality of HashSetEx testing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.IncreaseCapacity">
            <summary>
            Expand to new capacity. New capacity is next prime greater than or equal to suggested 
            size. This is called when the underlying array is filled. This performs no 
            defragmentation, allowing faster execution; note that this is reasonable since 
            AddIfNotPresent attempts to insert new elements in re-opened spots.
            </summary>
            <param name="sizeSuggestion"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.SetCapacity(System.Int32,System.Boolean)">
            <summary>
            Set the underlying buckets array to size newSize and rehash.  Note that newSize
            *must* be a prime.  It is very likely that you want to call IncreaseCapacity()
            instead of this method.
            </summary>
        </member>
        <member name="M:Net.System.HashSetEx`1.AddIfNotPresent(`0)">
            <summary>
            Adds value to HashSetEx if not contained already
            Returns true if added and false if already present
            </summary>
            <param name="value">value to find</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.ContainsAllElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this contains of other's elements. Iterates over other's elements and 
            returns false as soon as it finds an element in other that's not in this.
            Used by SupersetOf, ProperSupersetOf, and SetEquals.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.IsSubsetOfHashSetExWithSameEC(Net.System.HashSetEx{`0})">
             <summary>
             Implementation Notes:
             If other is a hashset and is using same equality comparer, then checking subset is 
             faster. Simply check that each element in this is in other.
             
             Note: if other doesn't use same equality comparer, then Contains check is invalid,
             which is why callers must take are of this.
             
             If callers are concerned about whether this is a proper subset, they take care of that.
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.IntersectWithHashSetExWithSameEC(Net.System.HashSetEx{`0})">
            <summary>
            If other is a hashset that uses same equality comparer, intersect is much faster 
            because we can use other's Contains
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.IntersectWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Iterate over other. If contained in this, mark an element in bit array corresponding to
            its position in m_slots. If anything is unmarked (in bit array), remove it.
            
            This attempts to allocate on the stack, if below StackAllocThreshold.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.InternalIndexOf(`0)">
            <summary>
            Used internally by set operations which have to rely on bit array marking. This is like
            Contains but returns index in slots array. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.SymmetricExceptWithUniqueHashSetEx(Net.System.HashSetEx{`0})">
            <summary>
            if other is a set, we can assume it doesn't have duplicate elements, so use this
            technique: if can't remove, then it wasn't present in this set, so add.
            
            As with other methods, callers take care of ensuring that other is a hashset using the
            same equality comparer.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Implementation notes:
             
             Used for symmetric except when other isn't a HashSetEx. This is more tedious because 
             other may contain duplicates. HashSetEx technique could fail in these situations:
             1. Other has a duplicate that's not in this: HashSetEx technique would add then 
             remove it.
             2. Other has a duplicate that's in this: HashSetEx technique would remove then add it
             back.
             In general, its presence would be toggled each time it appears in other. 
             
             This technique uses bit marking to indicate whether to add/remove the item. If already
             present in collection, it will get marked for deletion. If added from other, it will
             get marked as something not to remove.
            
             </summary>
             <param name="other"></param>
        </member>
        <member name="M:Net.System.HashSetEx`1.AddOrGetLocation(`0,System.Int32@)">
            <summary>
            Add if not already in hashset. Returns an out param indicating index where added. This 
            is used by SymmetricExcept because it needs to know the following things:
            - whether the item was already present in the collection or added from other
            - where it's located (if already present, it will get marked for removal, otherwise
            marked for keeping)
            </summary>
            <param name="value"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Determines counts that can be used to determine equality, subset, and superset. This
            is only used when other is an IEnumerable and not a HashSetEx. If other is a HashSetEx
            these properties can be checked faster without use of marking because we can assume 
            other has no duplicates.
            
            The following count checks are performed by callers:
            1. Equals: checks if unfoundCount = 0 and uniqueFoundCount = m_count; i.e. everything 
            in other is in this and everything in this is in other
            2. Subset: checks if unfoundCount >= 0 and uniqueFoundCount = m_count; i.e. other may
            have elements not in this and everything in this is in other
            3. Proper subset: checks if unfoundCount > 0 and uniqueFoundCount = m_count; i.e
            other must have at least one element not in this and everything in this is in other
            4. Proper superset: checks if unfound count = 0 and uniqueFoundCount strictly less
            than m_count; i.e. everything in other was in this and this had at least one element
            not contained in other.
            
            An earlier implementation used delegates to perform these checks rather than returning
            an ElementCount struct; however this was changed due to the perf overhead of delegates.
            </summary>
            <param name="other"></param>
            <param name="returnIfUnfound">Allows us to finish faster for equals and proper superset
            because unfoundCount must be 0.</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.ToArray">
            <summary>
            Copies this to an array. Used for DebugView
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.HashSetExEquals(Net.System.HashSetEx{`0},Net.System.HashSetEx{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Internal method used for HashSetExEqualityComparer. Compares set1 and set2 according 
            to specified comparer.
            
            Because items are hashed according to a specific equality comparer, we have to resort
            to n^2 search if they're using different equality comparers.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.AreEqualityComparersEqual(Net.System.HashSetEx{`0},Net.System.HashSetEx{`0})">
            <summary>
            Checks if equality comparers are equal. This is used for algorithms that can
            speed up if it knows the other item has unique elements. I.e. if they're using 
            different equality comparers, then uniqueness assumption between sets break.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.HashSetEx`1.InternalGetHashCode(`0)">
            <summary>
            Workaround Comparers that throw ArgumentNullException for GetHashCode(null).
            </summary>
            <param name="item"></param>
            <returns>hash code</returns>
        </member>
        <member name="T:Net.System.ISegment">
            <summary>
            内存数据片段接口
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Buffer">
            <summary>
            总内存
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Offset">
            <summary>
            片的开始位置
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Count">
            <summary>
            片的长度
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Position">
            <summary>
            读写位置
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Length">
            <summary>
            获取总长度
            </summary>
        </member>
        <member name="P:Net.System.ISegment.Item(System.Int32)">
            <summary>
            获取或设置总内存位置索引
            </summary>
            <param name="index">内存位置索引</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.ISegment.ToArray(System.Boolean,System.Boolean)">
            <summary>
            复制分片数据
            </summary>
            <param name="recovery">复制数据后立即回收此分片?</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.ISegment.Write(System.Byte[],System.Boolean)">
            <summary>
            写入字节数组
            </summary>
            <param name="value"></param>
            <param name="recordLength">是否记录此次写入的字节长度?</param>
        </member>
        <member name="M:Net.System.ISegment.Write(System.SByte[],System.Boolean)">
            <summary>
            写入字节数组
            </summary>
            <param name="value"></param>
            <param name="recordLength">是否记录此次写入的字节长度?</param>
        </member>
        <member name="T:Net.System.ListSafe`1">
            <summary>
            线程安全的List类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Net.System.ListSafe`1.GetRemoveRange(System.Int32,System.Int32)">
            <summary>
            获取列表对象, 并移除列表, 如果在多线程下, 多线程并行下, 是可以获取到对象, 但是会出现长度不是所指定的长度, 所以获取后要判断一下长度
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Net.System.MyDictionary`2">
            <summary>
            无GC快速字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Net.System.QueueSafeDebugView`1">
            <summary>
            A debugger view of the IProducerConsumerCollection that makes it simple to browse the
            collection's contents at a point in time.
            </summary>
            <typeparam name="T">The type of elements stored within.</typeparam>
        </member>
        <member name="M:Net.System.QueueSafeDebugView`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Constructs a new debugger view object for the provided collection object.
            </summary>
            <param name="collection">A collection to browse in the debugger.</param>
        </member>
        <member name="P:Net.System.QueueSafeDebugView`1.Items">
            <summary>
            Returns a snapshot of the underlying collection's elements.
            </summary>
        </member>
        <member name="T:Net.System.QueueSafe`1">
            <summary>
            多线程安全队列
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
            <remarks>
            All public  and protected members of <see cref="T:Net.System.QueueSafe`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Net.System.QueueSafe`1"/> class.
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.InitializeFromCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the contents of the queue from an existing collection.
            </summary>
            <param name="collection">A collection from which to copy elements.</param>
        </member>
        <member name="M:Net.System.QueueSafe`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Net.System.QueueSafe`1"/>
            class that contains elements copied from the specified collection
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see
            cref="T:Net.System.QueueSafe`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> argument is
            null.</exception>
        </member>
        <member name="M:Net.System.QueueSafe`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get the data array to be serialized
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct the queue from a previously seiralized one
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see
            cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the
            destination of the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentBag"/>. The <see
            cref="T:System.Array">Array</see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. -or-
            <paramref name="array"/> does not have zero-based indexing. -or-
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is
            greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>. -or- The type of the source <see
            cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Net.System.QueueSafe`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            with the SyncRoot; otherwise, false. For <see cref="T:Net.System.QueueSafe`1"/>, this property always
            returns false.</value>
        </member>
        <member name="P:Net.System.QueueSafe`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="M:Net.System.QueueSafe`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>.
            </summary>
            <param name="item">The object to add to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>. The value can be a null
            reference (Nothing in Visual Basic) for reference types.
            </param>
            <returns>true if the object was added successfully; otherwise, false.</returns>
            <remarks>For <see cref="T:Net.System.QueueSafe`1"/>, this operation will always add the object to the
            end of the <see cref="T:Net.System.QueueSafe`1"/>
            and return true.</remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, <paramref name="item"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>true if an element was removed and returned succesfully; otherwise, false.</returns>
            <remarks>For <see cref="T:Net.System.QueueSafe`1"/>, this operation will attempt to remove the object
            from the beginning of the <see cref="T:Net.System.QueueSafe`1"/>.
            </remarks>
        </member>
        <member name="P:Net.System.QueueSafe`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:Net.System.QueueSafe`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:Net.System.QueueSafe`1"/> is empty; otherwise, false.</value>
            <remarks>
            For determining whether the collection contains any items, use of this property is recommended
            rather than retrieving the number of items from the <see cref="P:Net.System.QueueSafe`1.Count"/> property and comparing it
            to 0.  However, as this collection is intended to be accessed concurrently, it may be the case
            that another thread will modify the collection after <see cref="P:Net.System.QueueSafe`1.IsEmpty"/> returns, thus invalidating
            the result.
            </remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.ToArray">
            <summary>
            Copies the elements stored in the <see cref="T:Net.System.QueueSafe`1"/> to a new array.
            </summary>
            <returns>A new array containing a snapshot of elements copied from the <see
            cref="T:Net.System.QueueSafe`1"/>.</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.ToList">
            <summary>
            Copies the <see cref="T:Net.System.QueueSafe`1"/> elements to a new <see
            cref="T:System.Collections.Generic.List{T}"/>.
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.List{T}"/> containing a snapshot of
            elements copied from the <see cref="T:Net.System.QueueSafe`1"/>.</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.GetHeadTailPositions(Net.System.QueueSafe{`0}.Segment@,Net.System.QueueSafe{`0}.Segment@,System.Int32@,System.Int32@)">
            <summary>
            Store the position of the current head and tail positions.
            </summary>
            <param name="head">return the head segment</param>
            <param name="tail">return the tail segment</param>
            <param name="headLow">return the head offset, value range [0, SEGMENT_SIZE]</param>
            <param name="tailHigh">return the tail offset, value range [-1, SEGMENT_SIZE-1]</param>
        </member>
        <member name="P:Net.System.QueueSafe`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Net.System.QueueSafe`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:Net.System.QueueSafe`1"/>.</value>
            <remarks>
            For determining whether the collection contains any items, use of the <see cref="P:Net.System.QueueSafe`1.IsEmpty"/>
            property is recommended rather than retrieving the number of items from the <see cref="P:Net.System.QueueSafe`1.Count"/>
            property and comparing it to 0.
            </remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Net.System.QueueSafe`1"/> elements to an existing one-dimensional <see
            cref="T:System.Array">Array</see>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the
            destination of the elements copied from the
            <see cref="T:Net.System.QueueSafe`1"/>. The <see cref="T:System.Array">Array</see> must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the
            length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:Net.System.QueueSafe`1"/> is greater than the
            available space from <paramref name="index"/> to the end of the destination <paramref
            name="array"/>.
            </exception>
        </member>
        <member name="M:Net.System.QueueSafe`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see
            cref="T:Net.System.QueueSafe`1"/>.
            </summary>
            <returns>An enumerator for the contents of the <see
            cref="T:Net.System.QueueSafe`1"/>.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the queue.  It does not reflect any updates to the collection after 
            <see cref="M:Net.System.QueueSafe`1.GetEnumerator"/> was called.  The enumerator is safe to use
            concurrently with reads from and writes to the queue.
            </remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.GetEnumerator(Net.System.QueueSafe{`0}.Segment,Net.System.QueueSafe{`0}.Segment,System.Int32,System.Int32)">
            <summary>
            Helper method of GetEnumerator to seperate out yield return statement, and prevent lazy evaluation. 
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Net.System.QueueSafe`1"/>.
            </summary>
            <param name="item">The object to add to the end of the <see
            cref="T:Net.System.QueueSafe`1"/>. The value can be a null reference
            (Nothing in Visual Basic) for reference types.
            </param>
        </member>
        <member name="M:Net.System.QueueSafe`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the object at the beginning of the <see
            cref="T:Net.System.QueueSafe`1"/>.
            </summary>
            <param name="result">
            When this method returns, if the operation was successful, <paramref name="result"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>true if an element was removed and returned from the beggining of the <see
            cref="T:Net.System.QueueSafe`1"/>
            succesfully; otherwise, false.</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the beginning of the <see cref="T:Net.System.QueueSafe`1"/>
            without removing it.
            </summary>
            <param name="result">When this method returns, <paramref name="result"/> contains an object from
            the beginning of the <see cref="T:System.Collections.Concurrent.ConccurrentQueue{T}"/> or an
            unspecified value if the operation failed.</param>
            <returns>true if and object was returned successfully; otherwise, false.</returns>
        </member>
        <member name="T:Net.System.QueueSafe`1.Segment">
            <summary>
            private class for ConcurrentQueue. 
            a queue is a linked list of small arrays, each node is called a segment.
            A segment contains an array, a pointer to the next segment, and m_low, m_high indices recording
            the first and last valid elements of the array.
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.#ctor(System.Int64,Net.System.QueueSafe{`0})">
            <summary>
            Create and initialize a segment with the specified index.
            </summary>
        </member>
        <member name="P:Net.System.QueueSafe`1.Segment.Next">
            <summary>
            return the next segment
            </summary>
        </member>
        <member name="P:Net.System.QueueSafe`1.Segment.IsEmpty">
            <summary>
            return true if the current segment is empty (doesn't have any element available to dequeue, 
            false otherwise
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.UnsafeAdd(`0)">
            <summary>
            Add an element to the tail of the current segment
            exclusively called by ConcurrentQueue.InitializedFromCollection
            InitializeFromCollection is responsible to guaratee that there is no index overflow,
            and there is no contention
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.UnsafeGrow">
            <summary>
            Create a new segment and append to the current one
            Does not update the m_tail pointer
            exclusively called by ConcurrentQueue.InitializedFromCollection
            InitializeFromCollection is responsible to guaratee that there is no index overflow,
            and there is no contention
            </summary>
            <returns>the reference to the new Segment</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.Grow">
            <summary>
            Create a new segment and append to the current one
            Update the m_tail pointer
            This method is called when there is no contention
            </summary>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.TryAppend(`0)">
            <summary>
            Try to append an element at the end of this segment.
            </summary>
            <param name="value">the element to append</param>
            <returns>true if the element is appended, false if the current segment is full</returns>
            <remarks>if appending the specified element succeeds, and after which the segment is full, 
            then grow the segment</remarks>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.TryRemove(`0@)">
            <summary>
            try to remove an element from the head of current segment
            </summary>
            <param name="result">The result.</param>
            <returns>return false only if the current segment is empty</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.TryPeek(`0@)">
            <summary>
            try to peek the current segment
            </summary>
            <param name="result">holds the return value of the element at the head position, 
            value set to default(T) if there is no such an element</param>
            <returns>true if there are elements in the current segment, false otherwise</returns>
        </member>
        <member name="M:Net.System.QueueSafe`1.Segment.AddToList(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Adds part or all of the current segment into a List.
            </summary>
            <param name="list">the list to which to add</param>
            <param name="start">the start position</param>
            <param name="end">the end position</param>
        </member>
        <member name="P:Net.System.QueueSafe`1.Segment.Low">
            <summary>
            return the position of the head of the current segment
            Value range [0, SEGMENT_SIZE], if it's SEGMENT_SIZE, it means this segment is exhausted and thus empty
            </summary>
        </member>
        <member name="P:Net.System.QueueSafe`1.Segment.High">
            <summary>
            return the logical position of the tail of the current segment      
            Value range [-1, SEGMENT_SIZE-1]. When it's -1, it means this is a new segment and has no elemnet yet
            </summary>
        </member>
        <member name="T:Net.System.VolatileBool">
            <summary>
            A wrapper struct for volatile bool, please note the copy of the struct it self will not be volatile
            for example this statement will not include in volatilness operation volatileBool1 = volatileBool2 the jit will copy the struct and will ignore the volatile
            </summary>
        </member>
        <member name="T:Net.System.RandomSafe">
            <summary>
            随机类 (多线程安全)
            </summary>
        </member>
        <member name="M:Net.System.RandomSafe.Range(System.Int32,System.Int32)">
            <summary>
            随机范围
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.RandomSafe.Range(System.Single,System.Single)">
            <summary>
            随机范围
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="T:Net.System.SafeDictionary`2">
            <summary>
            安全字典, 无GC快速字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Net.System.Segment">
            <summary>
            内存数据片段
            </summary>
        </member>
        <member name="F:Net.System.Segment.buffer">
            <summary>
            总内存
            </summary>
        </member>
        <member name="P:Net.System.Segment.Offset">
            <summary>
            片的开始位置
            </summary>
        </member>
        <member name="P:Net.System.Segment.Count">
            <summary>
            片的长度
            </summary>
        </member>
        <member name="F:Net.System.Segment.position">
            <summary>
            读写位置
            </summary>
        </member>
        <member name="P:Net.System.Segment.Length">
            <summary>
            获取总长度
            </summary>
        </member>
        <member name="P:Net.System.Segment.IsDespose">
            <summary>
            是否已经释放
            </summary>
        </member>
        <member name="P:Net.System.Segment.IsRecovery">
            <summary>
            是否可回收
            </summary>
        </member>
        <member name="P:Net.System.Segment.ReferenceCount">
            <summary>
            引用次数
            </summary>
        </member>
        <member name="P:Net.System.Segment.Item(System.Int32)">
            <summary>
            获取或设置总内存位置索引
            </summary>
            <param name="index">内存位置索引</param>
            <returns></returns>
        </member>
        <member name="M:Net.System.Segment.#ctor(System.Byte[])">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Net.System.Segment.#ctor(System.Byte[],System.Boolean)">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
            <param name="isRecovery"></param>
        </member>
        <member name="M:Net.System.Segment.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造内存分片
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="isRecovery"></param>
        </member>
        <member name="M:Net.System.Segment.ToArray(System.Boolean,System.Boolean)">
            <summary>
            复制分片数据
            </summary>
            <param name="recovery">复制数据后立即回收此分片?</param>
            <param name="resetPos"></param>
            <returns></returns>
        </member>
        <member name="M:Net.System.Segment.Write(System.Byte[],System.Boolean)">
            <summary>
            写入字节数组
            </summary>
            <param name="value"></param>
            <param name="recordLength">是否记录此次写入的字节长度?</param>
        </member>
        <member name="M:Net.System.Segment.Write(System.SByte[],System.Boolean)">
            <summary>
            写入字节数组
            </summary>
            <param name="value"></param>
            <param name="recordLength">是否记录此次写入的字节长度?</param>
        </member>
        <member name="T:Net.System.ThreadManager">
            <summary>
            事件线程管理
            </summary>
        </member>
        <member name="P:Net.System.ThreadManager.Event">
            <summary>
            计时器对象
            </summary>
        </member>
        <member name="P:Net.System.ThreadManager.Interval">
            <summary>
            时间计数间隔
            </summary>
        </member>
        <member name="P:Net.System.ThreadManager.IsRuning">
            <summary>
            运行中?
            </summary>
        </member>
        <member name="M:Net.System.ThreadManager.Run">
            <summary>
            控制台死循环线程
            </summary>
        </member>
        <member name="M:Net.System.ThreadManager.Run(System.UInt32)">
            <summary>
            unity update每帧调用
            </summary>
        </member>
        <member name="T:Net.System.EventManager">
            <summary>
            事件管理器
            </summary>
        </member>
        <member name="P:Net.System.EventManager.Event">
            <summary>
            计时事件属性
            </summary>
        </member>
        <member name="T:Net.System.ThreadPipeline`1">
            <summary>
            线程管线(流水线)
            </summary>
            <typeparam name="Worker"></typeparam>
        </member>
        <member name="P:Net.System.ThreadPipeline`1.MaxThread">
            <summary>
            并发线程数量, 发送线程和接收处理线程数量
            </summary>
        </member>
        <member name="P:Net.System.ThreadPipeline`1.IsWorking">
            <summary>
            是否工作中?
            </summary>
        </member>
        <member name="P:Net.System.ThreadPipeline`1.Groups">
            <summary>
            线程组, 优化多线程资源竞争问题
            </summary>
        </member>
        <member name="F:Net.System.ThreadPipeline`1.OnProcess">
            <summary>
            当线程群处理
            </summary>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.Init(System.String)">
            <summary>
            初始化线程管线
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.Start">
            <summary>
            开始线程管线
            </summary>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.SelectGroup">
            <summary>
            选择线程群
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.AddWorker(`0)">
            <summary>
            添加工作者
            </summary>
            <param name="worker"></param>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.RemoveWorker(`0)">
            <summary>
            移除工作者
            </summary>
            <param name="worker"></param>
        </member>
        <member name="M:Net.System.ThreadPipeline`1.Processing(System.Object)">
            <summary>
            业务处理线程组
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Net.Unity.UnityThreadContext">
            <summary>
            Unity主线程中心, 当多线程在主线程调用时可以使用Call或Invoke方法
            </summary>
        </member>
        <member name="P:Net.Unity.UnityThreadContext.MainThreadId">
            <summary>
            unity主线程id
            </summary>
        </member>
        <member name="M:Net.Unity.UnityThreadContext.Call(System.Action)">
            <summary>
            在Unity主线程调用
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Net.Unity.UnityThreadContext.Call``1(System.Action{``0},``0)">
            <summary>
            在Unity主线程调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Net.Unity.UnityThreadContext.Call``2(System.Action{``0,``1},``0,``1)">
            <summary>
            在Unity主线程调用
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1"></typeparam>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Net.Unity.UnityThreadContext.Get``1(System.Func{``0})">
            <summary>
            在主线程调用, 并返回结果到此线程, 如果此线程是主线程, 则直接调用并返回
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="F:Net.Plugins.Cmd.Frame">
            <summary>
            网络帧
            </summary>
        </member>
        <member name="F:Net.Plugins.Cmd.Ack">
            <summary>
            网络帧确认
            </summary>
        </member>
        <member name="F:Net.Plugins.Cmd.DAck">
            <summary>
            冗余帧
            </summary>
        </member>
        <member name="T:Net.Plugins.GcpKernel">
            <summary>
            Gcp可靠协议核心类
            </summary>
        </member>
        <member name="T:ECS.Component">
            <summary>
            ECS构架可以将此组件从Entity上移除这个组件并丢入对象池，给其他此刻需要此组件的Entity使用，因此可以节省大量的内存反复创建和释放， 这也是ECS的特性可以大量重复使用Compoent
            </summary>
        </member>
        <member name="T:ECS.Entity">
            <summary>
            ecs实体类, 实体类管理组件的集合 当不使用的时候会丢入system对象池, 给之后创建实体时再次复用
            </summary>
        </member>
        <member name="M:ECS.Entity.#ctor">
            <summary>
            需要通过GSystem.Create创建
            </summary>
        </member>
        <member name="M:ECS.Entity.AddComponent``1">
            <summary>
            添加组件, 从system对象池取出对象, 并添加到entity组件列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECS.GObject.Destroy(ECS.GObject,System.Boolean)">
            <summary>
            移除实体或组件, 并将对象扔进system对象池, 当AddComponent或Create时可以复用
            </summary>
            <param name="gObject"></param>
            <param name="reuse">此对象可以复用? 复用会将对象丢入system对象池, 等待再次使用. 如果是entity对象, 并且不复用, 则把entity所使用的组件也同样不再复用</param>
        </member>
        <member name="T:ECS.GSystem">
            <summary>
            ecs系统, 此系统管理entity和conponent对象池(复用)
            </summary>
        </member>
        <member name="F:ECS.GSystem.Instance">
            <summary>
            system的单例对象
            </summary>
        </member>
        <member name="M:ECS.GSystem.AddEntity(ECS.Entity)">
            <summary>
            添加实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ECS.GSystem.Take``1">
            <summary>
            取出实体组件, 复用
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECS.GSystem.Push(ECS.GObject)">
            <summary>
            压入实体组件, 后面复用
            </summary>
            <param name="gObject"></param>
        </member>
        <member name="M:ECS.GSystem.Create``1">
            <summary>
            创建实体对象, 从对象池进行查询, 如果对象池存在对象, 则返回对象池的对象, 否则创建一个新的T对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECS.GSystem.Create``1(``0)">
            <summary>
            创建实体对象, 从对象池进行查询, 如果对象池存在对象, 则返回对象池的对象, 否则创建一个新的T对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECS.GSystem.Update(System.Boolean)">
            <summary>
            更新ecs系统
            </summary>
            <param name="worker">线程池并行?</param>
        </member>
        <member name="M:ECS.GSystem.Run(System.Boolean)">
            <summary>
            运行ecs
            </summary>
            <param name="worker">线程池并行?</param>
        </member>
        <member name="T:ECS.IUpdate">
            <summary>
            ecs组件更新接口, 减少组件for循环开销
            </summary>
        </member>
        <member name="M:ECS.IUpdate.OnUpdate">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="T:ECS.UpdateComponent">
            <summary>
            热更层借助此组件进行更新, ilr不支持多继承, 接口继承
            </summary>
        </member>
        <member name="M:ArrayHelper.Random``1(``0[])">
            <summary>
            随机一个值,在数组0-count范围内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:K4os.Hash.xxHash.HashAlgorithmAdapter">
            <summary>
            Adapter implementing <see cref="T:System.Security.Cryptography.HashAlgorithm"/>
            </summary>
        </member>
        <member name="M:K4os.Hash.xxHash.HashAlgorithmAdapter.#ctor(System.Int32,System.Action,System.Action{System.Byte[],System.Int32,System.Int32},System.Func{System.Byte[]})">
            <summary>
            Creates new <see cref="T:K4os.Hash.xxHash.HashAlgorithmAdapter"/>. 
            </summary>
            <param name="hashSize">Hash size (in bytes)</param>
            <param name="reset">Reset function.</param>
            <param name="update">Update function.</param>
            <param name="digest">Digest function.</param>
        </member>
        <member name="P:K4os.Hash.xxHash.HashAlgorithmAdapter.HashSize">
            <inheritdoc />
        </member>
        <member name="P:K4os.Hash.xxHash.HashAlgorithmAdapter.Hash">
            <inheritdoc />
        </member>
        <member name="M:K4os.Hash.xxHash.HashAlgorithmAdapter.HashCore(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:K4os.Hash.xxHash.HashAlgorithmAdapter.HashFinal">
            <inheritdoc />
        </member>
        <member name="M:K4os.Hash.xxHash.HashAlgorithmAdapter.Initialize">
            <inheritdoc />
        </member>
        <member name="T:K4os.Hash.xxHash.XXH">
            <summary>
            Base class for both <see cref="T:K4os.Hash.xxHash.XXH32"/> and <see cref="T:K4os.Hash.xxHash.XXH64"/>. Do not use directly.
            </summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH.#ctor">
            <summary>Protected constructor to prevent instantiation.</summary>
        </member>
        <member name="T:K4os.Hash.xxHash.XXH32">
            <summary>
            xxHash 32-bit.
            </summary>
        </member>
        <member name="T:K4os.Hash.xxHash.XXH32.State">
            <summary>Internal state of the algorithm.</summary>
        </member>
        <member name="F:K4os.Hash.xxHash.XXH32.EmptyHash">
            <summary>Hash of empty buffer.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.DigestOf(System.Void*,System.Int32)">
            <summary>Hash of provided buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
            <returns>Digest.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.DigestOf(System.Void*,System.Int32,System.UInt32)">
            <summary>Hash of provided buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
            <param name="seed">Seed.</param>
            <returns>Digest.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.#ctor">
            <summary>Creates xxHash instance.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.#ctor(System.UInt32)">
            <summary>Creates xxHash instance.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Reset">
            <summary>Resets hash calculation.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Reset(System.UInt32)">
            <summary>Resets hash calculation.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Digest">
            <summary>Hash so far.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.DigestBytes">
            <summary>Hash so far, as byte array.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Reset(K4os.Hash.xxHash.XXH32.State@,System.UInt32)">
            <summary>Resets hash calculation.</summary>
            <param name="state">Hash state.</param>
            <param name="seed">Hash seed.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Update(K4os.Hash.xxHash.XXH32.State@,System.Void*,System.Int32)">
            <summary>Updates the has using given buffer.</summary>
            <param name="state">Hash state.</param>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH32.Digest(K4os.Hash.xxHash.XXH32.State@)">
            <summary>Hash so far.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="T:K4os.Hash.xxHash.XXH64">
            <summary>
            xxHash 64-bit.
            </summary>
        </member>
        <member name="T:K4os.Hash.xxHash.XXH64.State">
            <summary>Internal state of the algorithm.</summary>
        </member>
        <member name="F:K4os.Hash.xxHash.XXH64.EmptyHash">
            <summary>Hash of empty buffer.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.DigestOf(System.Void*,System.Int32)">
            <summary>Hash of provided buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
            <returns>Digest.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.DigestOf(System.Void*,System.Int32,System.UInt64)">
            <summary>Hash of provided buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
            <param name="seed">Seed.</param>
            <returns>Digest.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.#ctor">
            <summary>Creates xxHash instance.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.#ctor(System.UInt64)">
            <summary>Creates xxHash instance.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Reset">
            <summary>Resets hash calculation.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Reset(System.UInt64)">
            <summary>Resets hash calculation.</summary>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Update(System.Void*,System.Int32)">
            <summary>Updates the hash using given buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Update(System.Byte*,System.Int32)">
            <summary>Updates the hash using given buffer.</summary>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Digest">
            <summary>Hash so far.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.DigestBytes">
            <summary>Hash so far, as byte array.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Reset(K4os.Hash.xxHash.XXH64.State@,System.UInt64)">
            <summary>Resets hash calculation.</summary>
            <param name="state">Hash state.</param>
            <param name="seed">Hash seed.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Update(K4os.Hash.xxHash.XXH64.State@,System.Void*,System.Int32)">
            <summary>Updates the has using given buffer.</summary>
            <param name="state">Hash state.</param>
            <param name="bytes">Buffer.</param>
            <param name="length">Length of buffer.</param>
        </member>
        <member name="M:K4os.Hash.xxHash.XXH64.Digest(K4os.Hash.xxHash.XXH64.State@)">
            <summary>Hash so far.</summary>
            <returns>Hash so far.</returns>
        </member>
        <member name="T:Binding.SerializeMode">
            <summary>
            序列化模式
            </summary>
        </member>
        <member name="F:Binding.SerializeMode.Compress">
            <summary>
            压缩模式, 如int类型的值是123, 只占用1个字节
            </summary>
        </member>
        <member name="F:Binding.SerializeMode.NoCompress">
            <summary>
            不压缩模式, 如int类型的值是123, 也一样占用4个字节
            </summary>
        </member>
        <member name="F:Binding.SerializeMode.MemoryCopy">
            <summary>
            内存直接复制模式, 取类的内存地址直接复制所有字段的数据, 使用内存复制模式, 尽量只使用基础类型, 这样速度飞起
            </summary>
        </member>
        <member name="M:Binding.Fast2BuildMethod.DynamicBuild(Binding.SerializeMode,System.Int32,System.Type[])">
            <summary>
            动态编译, 在unity开发过程中不需要生成绑定cs文件, 直接运行时编译使用, 当编译apk. app时才进行生成绑定cs文件
            </summary>
            <param name="serializeMode">true: 使用字节压缩模式生成代码 false: 不进行压缩</param>
            <param name="sortingOrder"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Binding.Fast2BuildMethod.BuildAll(System.String,Binding.SerializeMode,System.Int32,System.Type[])">
            <summary>
            生成所有完整的绑定类型
            </summary>
            <param name="savePath"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:FPExtend.ToFloat(System.Single,System.Single)">
            <summary>
            定点数, 默认只保留浮点数最好4位
            </summary>
            <param name="self"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:FPExtend.ToVector3(UnityEngine.Vector3,System.Single)">
            <summary>
            定点数, 默认只保留浮点数最好4位
            </summary>
            <param name="self"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:FPExtend.ToVector3Int(UnityEngine.Vector3)">
            <summary>
            定点数, 默认只保留浮点数最好4位
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:FPExtend.FPTranslate(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            定点平移
            </summary>
            <param name="self"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="num"></param>
        </member>
        <member name="M:FPExtend.FPTranslate(UnityEngine.Transform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            定点平移
            </summary>
            <param name="self"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="num"></param>
        </member>
        <member name="M:FPExtend.FPRotate(UnityEngine.Transform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            定点转向
            </summary>
            <param name="self"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="num"></param>
        </member>
        <member name="M:OtherExtend.Multiply(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            向量相乘
            </summary>
            <param name="self"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:UnityWebSocket.CloseEventArgs">
            <summary>
            Represents the event data for the <see cref="E:UnityWebSocket.IWebSocket.OnClose"/> event.
            </summary>
            <remarks>
              <para>
              That event occurs when the WebSocket connection has been closed.
              </para>
              <para>
              If you would like to get the reason for the close, you should access
              the <see cref="P:UnityWebSocket.CloseEventArgs.Code"/> or <see cref="P:UnityWebSocket.CloseEventArgs.Reason"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:UnityWebSocket.CloseEventArgs.Code">
            <summary>
            Gets the status code for the close.
            </summary>
            <value>
            A <see cref="T:System.UInt16"/> that represents the status code for the close if any.
            </value>
        </member>
        <member name="P:UnityWebSocket.CloseEventArgs.Reason">
            <summary>
            Gets the reason for the close.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the reason for the close if any.
            </value>
        </member>
        <member name="P:UnityWebSocket.CloseEventArgs.WasClean">
            <summary>
            Gets a value indicating whether the connection has been closed cleanly.
            </summary>
            <value>
            <c>true</c> if the connection has been closed cleanly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnityWebSocket.CloseEventArgs.StatusCode">
            <summary>
            Enum value same as Code
            </summary>
        </member>
        <member name="T:UnityWebSocket.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:UnityWebSocket.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="T:UnityWebSocket.ErrorEventArgs">
            <summary>
            Represents the event data for the <see cref="E:UnityWebSocket.IWebSocket.OnError"/> event.
            </summary>
            <remarks>
              <para>
              That event occurs when the <see cref="T:UnityWebSocket.IWebSocket"/> gets an error.
              </para>
              <para>
              If you would like to get the error message, you should access
              the <see cref="P:UnityWebSocket.ErrorEventArgs.Message"/> property.
              </para>
              <para>
              And if the error is due to an exception, you can get it by accessing
              the <see cref="P:UnityWebSocket.ErrorEventArgs.Exception"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:UnityWebSocket.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the error.
            </summary>
            <value>
            An <see cref="T:System.Exception"/> instance that represents the cause of
            the error if it is due to an exception; otherwise, <see langword="null"/>.
            </value>
        </member>
        <member name="P:UnityWebSocket.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the error message.
            </value>
        </member>
        <member name="T:UnityWebSocket.IWebSocket">
            <summary>
            <para>IWebSocket indicate a network connection.</para>
            <para>It can be connecting, connected, closing or closed state. </para>
            <para>You can send and receive messages by using it.</para>
            <para>Register callbacks for handling messages.</para>
            <para> ----------------------------------------------------------- </para>
            <para>IWebSocket 表示一个网络连接，</para>
            <para>它可以是 connecting connected closing closed 状态，</para>
            <para>可以发送和接收消息，</para>
            <para>通过注册消息回调，来处理接收到的消息。</para>
            </summary>
        </member>
        <member name="M:UnityWebSocket.IWebSocket.ConnectAsync">
            <summary>
            Establishes a connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the connect process to be complete.
              </para>
              <para>
              This method does nothing if the connection has already been
              established.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This instance is not a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              The close process is in progress.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:UnityWebSocket.IWebSocket.CloseAsync">
            <summary>
            Closes the connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the connection is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="M:UnityWebSocket.IWebSocket.SendAsync(System.Byte[])">
            <summary>
            Sends the specified data asynchronously using the WebSocket connection.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that represents the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the connection is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:UnityWebSocket.IWebSocket.SendAsync(System.String)">
            <summary>
            Sends the specified data using the WebSocket connection.
            </summary>
            <param name="text">
            A <see cref="T:System.String"/> that represents the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the connection is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> could not be UTF-8 encoded.
            </exception>
        </member>
        <member name="P:UnityWebSocket.IWebSocket.Address">
            <summary>
            get the address which to connect.
            </summary>
        </member>
        <member name="P:UnityWebSocket.IWebSocket.SubProtocols">
            <summary>
            get sub protocols .
            </summary>
        </member>
        <member name="P:UnityWebSocket.IWebSocket.ReadyState">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>
              <para>
              One of the <see cref="T:UnityWebSocket.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the connection.
              </para>
              <para>
              The default value is <see cref="F:UnityWebSocket.WebSocketState.Closed"/>.
              </para>
            </value>
        </member>
        <member name="P:UnityWebSocket.IWebSocket.BinaryType">
            <summary>
            Gets the current binaryType of the connection, supported on WEBGL platform only.
            </summary>
            <value>
              <para>
              It indicates the current binaryType of the connection.
              </para>
              <para>
              The default value is "arraybuffer", options: "blob" or "arraybuffer".
              </para>
            </value>
        </member>
        <member name="E:UnityWebSocket.IWebSocket.OnOpen">
            <summary>
            Occurs when the WebSocket connection has been established.
            </summary>
        </member>
        <member name="E:UnityWebSocket.IWebSocket.OnClose">
            <summary>
            Occurs when the WebSocket connection has been closed.
            </summary>
        </member>
        <member name="E:UnityWebSocket.IWebSocket.OnError">
            <summary>
            Occurs when the <see cref="T:UnityWebSocket.IWebSocket"/> gets an error.
            </summary>
        </member>
        <member name="E:UnityWebSocket.IWebSocket.OnMessage">
            <summary>
            Occurs when the <see cref="T:UnityWebSocket.IWebSocket"/> receives a message.
            </summary>
        </member>
        <member name="P:UnityWebSocket.MessageEventArgs.Opcode">
            <summary>
            Gets the opcode for the message.
            </summary>
            <value>
            <see cref="F:UnityWebSocket.Opcode.Text"/>, <see cref="F:UnityWebSocket.Opcode.Binary"/>.
            </value>
        </member>
        <member name="P:UnityWebSocket.MessageEventArgs.Data">
            <summary>
            Gets the message data as a <see cref="T:System.String"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the message data if its type is
            text and if decoding it to a string has successfully done;
            otherwise, <see langword="null"/>.
            </value>
        </member>
        <member name="P:UnityWebSocket.MessageEventArgs.RawData">
            <summary>
            Gets the message data as an array of <see cref="T:System.Byte"/>.
            </summary>
            <value>
            An array of <see cref="T:System.Byte"/> that represents the message data.
            </value>
        </member>
        <member name="P:UnityWebSocket.MessageEventArgs.IsBinary">
            <summary>
            Gets a value indicating whether the message type is binary.
            </summary>
            <value>
            <c>true</c> if the message type is binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnityWebSocket.MessageEventArgs.IsText">
            <summary>
            Gets a value indicating whether the message type is text.
            </summary>
            <value>
            <c>true</c> if the message type is text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnityWebSocket.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:UnityWebSocket.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:UnityWebSocket.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:UnityWebSocket.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="T:UnityWebSocket.WebSocketState">
            <summary>
            Reference html5 WebSocket ReadyState Properties
            Indicates the state of a WebSocket connection.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://www.w3.org/TR/websockets/#dom-websocket-readystate">
            The WebSocket API</see>.
            </remarks>
        </member>
        <member name="F:UnityWebSocket.WebSocketState.Connecting">
            <summary>
            Equivalent to numeric value 0. Indicates that the connection has not
            yet been established.
            </summary>
        </member>
        <member name="F:UnityWebSocket.WebSocketState.Open">
            <summary>
            Equivalent to numeric value 1. Indicates that the connection has
            been established, and the communication is possible.
            </summary>
        </member>
        <member name="F:UnityWebSocket.WebSocketState.Closing">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection is
            going through the closing handshake, or the close method has
            been invoked.
            </summary>
        </member>
        <member name="F:UnityWebSocket.WebSocketState.Closed">
            <summary>
            Equivalent to numeric value 3. Indicates that the connection has
            been closed or could not be established.
            </summary>
        </member>
        <member name="T:WebSocketSharp.ByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:WebSocketSharp.CloseEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnClose"/> event.
            </summary>
            <remarks>
              <para>
              The close event occurs when the WebSocket connection has been closed.
              </para>
              <para>
              If you would like to get the reason for the connection close,
              you should access the <see cref="P:WebSocketSharp.CloseEventArgs.Code"/> or <see cref="P:WebSocketSharp.CloseEventArgs.Reason"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Code">
            <summary>
            Gets the status code for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code for
              the connection close.
              </para>
              <para>
              1005 (no status) if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Reason">
            <summary>
            Gets the reason for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the reason for
              the connection close.
              </para>
              <para>
              An empty string if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.WasClean">
            <summary>
            Gets a value indicating whether the connection has been closed cleanly.
            </summary>
            <value>
            <c>true</c> if the connection has been closed cleanly; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="T:WebSocketSharp.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="T:WebSocketSharp.CompressionMethod">
            <summary>
            Specifies the method for compression.
            </summary>
            <remarks>
            The methods are defined in
            <see href="https://tools.ietf.org/html/rfc7692">
            Compression Extensions for WebSocket</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.CompressionMethod.None">
            <summary>
            Specifies no compression.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CompressionMethod.Deflate">
            <summary>
            Specifies DEFLATE.
            </summary>
        </member>
        <member name="T:WebSocketSharp.ErrorEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnError"/> event.
            </summary>
            <remarks>
              <para>
              The error event occurs when the <see cref="T:WebSocketSharp.WebSocket"/> interface
              gets an error.
              </para>
              <para>
              If you would like to get the error message, you should access
              the <see cref="P:WebSocketSharp.ErrorEventArgs.Message"/> property.
              </para>
              <para>
              If the error is due to an exception, you can get it by accessing
              the <see cref="P:WebSocketSharp.ErrorEventArgs.Exception"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the error.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Exception"/> instance that represents
              the cause of the error.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the error message.
            </value>
        </member>
        <member name="T:WebSocketSharp.Ext">
            <summary>
            Provides a set of static methods for websocket-sharp.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Ext.GetDescription(WebSocketSharp.Net.HttpStatusCode)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the description of
            the HTTP status code.
            </returns>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpStatusCode"/> enum values.
              </para>
              <para>
              It specifies the HTTP status code.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetStatusDescription(System.Int32)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code.
              </para>
              <para>
              An empty string if the description is not present.
              </para>
            </returns>
            <param name="code">
            An <see cref="T:System.Int32"/> that specifies the HTTP status code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsCloseStatusCode(System.UInt16)">
            <summary>
            Determines whether the specified ushort is in the range of
            the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The ranges are the following:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  1000-2999: These numbers are reserved for definition by
                  the WebSocket protocol.
                  </term>
                </item>
                <item>
                  <term>
                  3000-3999: These numbers are reserved for use by libraries,
                  frameworks, and applications.
                  </term>
                </item>
                <item>
                  <term>
                  4000-4999: These numbers are reserved for private use.
                  </term>
                </item>
              </list>
            </remarks>
            <returns>
            <c>true</c> if <paramref name="value"/> is in the range of
            the status code for the close; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.UInt16"/> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsEnclosedIn(System.String,System.Char)">
            <summary>
            Determines whether the specified string is enclosed in
            the specified character.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is enclosed in
            <paramref name="c"/>; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="c">
            A <see cref="T:System.Char"/> to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsHostOrder(WebSocketSharp.ByteOrder)">
            <summary>
            Determines whether the specified byte order is host (this computer
            architecture) byte order.
            </summary>
            <returns>
            <c>true</c> if <paramref name="order"/> is host byte order; otherwise,
            <c>false</c>.
            </returns>
            <param name="order">
            One of the <see cref="T:WebSocketSharp.ByteOrder"/> enum values to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsLocal(System.Net.IPAddress)">
            <summary>
            Determines whether the specified IP address is a local IP address.
            </summary>
            <remarks>
            This local means NOT REMOTE for the current host.
            </remarks>
            <returns>
            <c>true</c> if <paramref name="address"/> is a local IP address;
            otherwise, <c>false</c>.
            </returns>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is <see langword="null"/> or
            an empty string.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is <see langword="null"/> or
            an empty string; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;int&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int32"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;long&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int64"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.ToHostOrder(System.Byte[],WebSocketSharp.ByteOrder)">
            <summary>
            Converts the order of elements in the specified byte array to
            host (this computer architecture) byte order.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> converted from
              <paramref name="source"/>.
              </para>
              <para>
              <paramref name="source"/> if the number of elements in
              it is less than 2 or <paramref name="sourceOrder"/> is
              same as host byte order.
              </para>
            </returns>
            <param name="source">
            An array of <see cref="T:System.Byte"/> to convert.
            </param>
            <param name="sourceOrder">
              <para>
              One of the <see cref="T:WebSocketSharp.ByteOrder"/> enum values.
              </para>
              <para>
              It specifies the order of elements in <paramref name="source"/>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a string.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> converted by concatenating each element of
              <paramref name="array"/> across <paramref name="separator"/>.
              </para>
              <para>
              An empty string if <paramref name="array"/> is an empty array.
              </para>
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String"/> used to separate each element of
            <paramref name="array"/>.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToUri(System.String)">
            <summary>
            Converts the specified string to a <see cref="T:System.Uri"/>.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.Uri"/> converted from <paramref name="value"/>.
              </para>
              <para>
              <see langword="null"/> if the conversion has failed.
              </para>
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="T:WebSocketSharp.Fin">
            <summary>
            Indicates whether a WebSocket frame is the final frame of a message.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="T:WebSocketSharp.LogData">
            <summary>
            Represents a log data used by the <see cref="T:WebSocketSharp.Logger"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.LogData.Caller">
            <summary>
            Gets the information of the logging method caller.
            </summary>
            <value>
            A <see cref="T:System.Diagnostics.StackFrame"/> that provides the information of
            the logging method caller.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Date">
            <summary>
            Gets the date and time when the log data was created.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time when
            the log data was created.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Level">
            <summary>
            Gets the logging level of the log data.
            </summary>
            <value>
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that represents
            the logging level of the log data.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Message">
            <summary>
            Gets the message of the log data.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the message of the log data.
            </value>
        </member>
        <member name="M:WebSocketSharp.LogData.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Logger">
            <summary>
            Provides a set of methods and properties for logging.
            </summary>
            <remarks>
              <para>
              If you output a log with lower than the current logging level,
              it cannot be outputted.
              </para>
              <para>
              The default output method writes a log to the standard output
              stream and the text file if it has a valid path.
              </para>
              <para>
              If you would like to use the custom output method, you should
              specify it with the constructor or the <see cref="P:WebSocketSharp.Logger.Output"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class.
            </summary>
            <remarks>
            This constructor initializes the logging level with the Error level.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor(WebSocketSharp.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class with
            the specified logging level.
            </summary>
            <param name="level">
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor(WebSocketSharp.LogLevel,System.String,System.Action{WebSocketSharp.LogData,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class with
            the specified logging level, path to the log file, and delegate
            used to output a log.
            </summary>
            <param name="level">
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> that specifies the path to the log file.
            </param>
            <param name="output">
            An <see cref="T:System.Action{LogData, string}"/> that specifies
            the delegate used to output a log.
            </param>
        </member>
        <member name="P:WebSocketSharp.Logger.File">
            <summary>
            Gets or sets the path to the log file.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the path to the log file if any.
            </value>
        </member>
        <member name="P:WebSocketSharp.Logger.Level">
            <summary>
            Gets or sets the current logging level.
            </summary>
            <remarks>
            A log with lower than the value of this property cannot be outputted.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values.
              </para>
              <para>
              It represents the current logging level.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Logger.Output">
            <summary>
            Gets or sets the delegate used to output a log.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Action{LogData, string}"/> delegate.
              </para>
              <para>
              It references the method used to output a log.
              </para>
              <para>
              The string parameter passed to the delegate is the value of
              the <see cref="P:WebSocketSharp.Logger.File"/> property.
              </para>
              <para>
              If the value to set is <see langword="null"/>, the default
              output method is set.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Logger.Debug(System.String)">
            <summary>
            Outputs the specified message as a log with the Debug level.
            </summary>
            <remarks>
            If the current logging level is higher than the Debug level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Error(System.String)">
            <summary>
            Outputs the specified message as a log with the Error level.
            </summary>
            <remarks>
            If the current logging level is higher than the Error level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Fatal(System.String)">
            <summary>
            Outputs the specified message as a log with the Fatal level.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Info(System.String)">
            <summary>
            Outputs the specified message as a log with the Info level.
            </summary>
            <remarks>
            If the current logging level is higher than the Info level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Trace(System.String)">
            <summary>
            Outputs the specified message as a log with the Trace level.
            </summary>
            <remarks>
            If the current logging level is higher than the Trace level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Warn(System.String)">
            <summary>
            Outputs the specified message as a log with the Warn level.
            </summary>
            <remarks>
            If the current logging level is higher than the Warn level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="T:WebSocketSharp.LogLevel">
            <summary>
            Specifies the logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Trace">
            <summary>
            Specifies the bottom logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Debug">
            <summary>
            Specifies the 2nd logging level from the bottom.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Info">
            <summary>
            Specifies the 3rd logging level from the bottom.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Warn">
            <summary>
            Specifies the 3rd logging level from the top.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Error">
            <summary>
            Specifies the 2nd logging level from the top.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Fatal">
            <summary>
            Specifies the top logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.None">
            <summary>
            Specifies not to output logs.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Mask">
            <summary>
            Indicates whether the payload data of a WebSocket frame is masked.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="T:WebSocketSharp.MessageEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnMessage"/> event.
            </summary>
            <remarks>
              <para>
              The message event occurs when the <see cref="T:WebSocketSharp.WebSocket"/> interface
              receives a message or a ping if the <see cref="P:WebSocketSharp.WebSocket.EmitOnPing"/>
              property is set to <c>true</c>.
              </para>
              <para>
              If you would like to get the message data, you should access
              the <see cref="P:WebSocketSharp.MessageEventArgs.Data"/> or <see cref="P:WebSocketSharp.MessageEventArgs.RawData"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Opcode">
            <summary>
            Gets the opcode for the message.
            </summary>
            <value>
            <see cref="F:WebSocketSharp.Opcode.Text"/>, <see cref="F:WebSocketSharp.Opcode.Binary"/>,
            or <see cref="F:WebSocketSharp.Opcode.Ping"/>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Data">
            <summary>
            Gets the message data as a <see cref="T:System.String"/>.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the message data
              if the message type is text or ping.
              </para>
              <para>
              <see langword="null"/> if the message type is binary or
              the message data could not be UTF-8-decoded.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsBinary">
            <summary>
            Gets a value indicating whether the message type is binary.
            </summary>
            <value>
            <c>true</c> if the message type is binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsPing">
            <summary>
            Gets a value indicating whether the message type is ping.
            </summary>
            <value>
            <c>true</c> if the message type is ping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsText">
            <summary>
            Gets a value indicating whether the message type is text.
            </summary>
            <value>
            <c>true</c> if the message type is text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.RawData">
            <summary>
            Gets the message data as an array of <see cref="T:System.Byte"/>.
            </summary>
            <value>
            An array of <see cref="T:System.Byte"/> that represents the message data.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.AuthenticationSchemes">
            <summary>
            Specifies the scheme for authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.None">
            <summary>
            No authentication is allowed.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Digest">
            <summary>
            Specifies digest authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Basic">
            <summary>
            Specifies basic authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous">
            <summary>
            Specifies anonymous authentication.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.ClientSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by clients.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ClientSslConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/>
            class with the specified target host name.
            </summary>
            <param name="targetHost">
            A <see cref="T:System.String"/> that specifies the name of the server that
            will share a secure connection with a client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetHost"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetHost"/> is an empty string.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.ClientSslConfiguration.#ctor(WebSocketSharp.Net.ClientSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ClientCertificates">
            <summary>
            Gets or sets the collection of the certificates from which to select
            one to supply to the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains
              the certificates from which to select.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ClientCertificateSelectionCallback">
            <summary>
            Gets or sets the callback used to select the certificate to supply to
            the server.
            </summary>
            <remarks>
            No certificate is supplied if the callback returns <see langword="null"/>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when a client selects
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ServerCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the server.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when a client validates
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.TargetHost">
            <summary>
            Gets or sets the target host name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the server that
            will share a secure connection with a client.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is an empty string.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.Cookie">
            <summary>
            Provides a set of methods and properties used to manage an HTTP cookie.
            </summary>
            <remarks>
              <para>
              This class refers to the following specifications:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  <see href="http://web.archive.org/web/20020803110822/http://wp.netscape.com/newsref/std/cookie_spec.html">
                  Netscape specification</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2109">RFC 2109</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2965">RFC 2965</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc6265">RFC 6265</see>
                  </term>
                </item>
              </list>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name and value.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, and path.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, path, and domain.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the value of the Domain
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Comment">
            <summary>
            Gets the value of the Comment attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the comment to document
              intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.CommentUri">
            <summary>
            Gets the value of the CommentURL attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI that provides
              the comment to document intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Discard">
            <summary>
            Gets a value indicating whether the client discards the cookie
            unconditionally when the client terminates.
            </summary>
            <value>
              <para>
              <c>true</c> if the client discards the cookie unconditionally
              when the client terminates; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Domain">
            <summary>
            Gets or sets the value of the Domain attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the domain name that
              the cookie is valid for.
              </para>
              <para>
              An empty string if not necessary.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Expired">
            <summary>
            Gets or sets a value indicating whether the cookie has expired.
            </summary>
            <value>
              <para>
              <c>true</c> if the cookie has expired; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Expires">
            <summary>
            Gets or sets the value of the Expires attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the date and time that
              the cookie expires on.
              </para>
              <para>
              <see cref="F:System.DateTime.MinValue"/> if not necessary.
              </para>
              <para>
              The default value is <see cref="F:System.DateTime.MinValue"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.HttpOnly">
            <summary>
            Gets or sets a value indicating whether non-HTTP APIs can access
            the cookie.
            </summary>
            <value>
              <para>
              <c>true</c> if non-HTTP APIs cannot access the cookie; otherwise,
              <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Name">
            <summary>
            Gets or sets the name of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Path">
            <summary>
            Gets or sets the value of the Path attribute of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the subset of URI on
            the origin server that the cookie applies to.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Port">
            <summary>
            Gets the value of the Port attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the list of TCP ports
              that the cookie applies to.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Secure">
            <summary>
            Gets or sets a value indicating whether the security level of
            the cookie is secure.
            </summary>
            <remarks>
            When this property is <c>true</c>, the cookie may be included in
            the request only if the request is transmitted over HTTPS.
            </remarks>
            <value>
              <para>
              <c>true</c> if the security level of the cookie is secure;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.TimeStamp">
            <summary>
            Gets the time when the cookie was issued.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time when
            the cookie was issued.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Value">
            <summary>
            Gets or sets the value of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the cookie.
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is a string not enclosed in
            double quotes although it contains a reserved character.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Version">
            <summary>
            Gets the value of the Version attribute of the cookie.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the version of HTTP state
              management that the cookie conforms to.
              </para>
              <para>
              0 or 1.
              </para>
              <para>
              0 if not present.
              </para>
              <para>
              The default value is 0.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.Equals(System.Object)">
            <summary>
            Determines whether the current cookie instance is equal to
            the specified <see cref="T:System.Object"/> instance.
            </summary>
            <param name="comparand">
              <para>
              An <see cref="T:System.Object"/> instance to compare with
              the current cookie instance.
              </para>
              <para>
              An reference to a <see cref="T:WebSocketSharp.Net.Cookie"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current cookie instance is equal to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.GetHashCode">
            <summary>
            Gets a hash code for the current cookie instance.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.ToString">
            <summary>
            Returns a string that represents the current cookie instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that is suitable for the Cookie request header.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.CookieCollection">
            <summary>
            Provides a collection of instances of the <see cref="T:WebSocketSharp.Net.Cookie"/> class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieCollection"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Count">
            <summary>
            Gets the number of cookies in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of cookies in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>
              <para>
              <c>true</c> if the collection is read-only; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            thread safe.
            </summary>
            <value>
              <para>
              <c>true</c> if the access to the collection is thread safe;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Item(System.Int32)">
            <summary>
            Gets the cookie at the specified index from the collection.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.Cookie"/> at the specified index in the collection.
            </value>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the cookie
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range for the collection.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Item(System.String)">
            <summary>
            Gets the cookie with the specified name from the collection.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.Cookie"/> with the specified name in the collection.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the cookie to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.SyncRoot">
            <summary>
            Gets an object used to synchronize access to the collection.
            </summary>
            <value>
            An <see cref="T:System.Object"/> used to synchronize access to the collection.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Add(WebSocketSharp.Net.Cookie)">
            <summary>
            Adds the specified cookie to the collection.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Add(WebSocketSharp.Net.CookieCollection)">
            <summary>
            Adds the specified cookies to the collection.
            </summary>
            <param name="cookies">
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookies"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Clear">
            <summary>
            Removes all cookies from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Contains(WebSocketSharp.Net.Cookie)">
            <summary>
            Determines whether the collection contains the specified cookie.
            </summary>
            <returns>
            <c>true</c> if the cookie is found in the collection; otherwise,
            <c>false</c>.
            </returns>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.CopyTo(WebSocketSharp.Net.Cookie[],System.Int32)">
            <summary>
            Copies the elements of the collection to the specified array,
            starting at the specified index.
            </summary>
            <param name="array">
            An array of <see cref="T:WebSocketSharp.Net.Cookie"/> that specifies the destination of
            the elements copied from the collection.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying starts.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="index"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{Cookie}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Remove(WebSocketSharp.Net.Cookie)">
            <summary>
            Removes the specified cookie from the collection.
            </summary>
            <returns>
              <para>
              <c>true</c> if the cookie is successfully removed; otherwise,
              <c>false</c>.
              </para>
              <para>
              <c>false</c> if the cookie is not found in the collection.
              </para>
            </returns>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to remove.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.CookieException">
            <summary>
            The exception that is thrown when a <see cref="T:WebSocketSharp.Net.Cookie"/> gets an error.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieException"/> class
            with the serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieException"/> class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.HttpBasicIdentity">
            <summary>
            Holds the username and password from an HTTP Basic authentication attempt.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpBasicIdentity.Password">
            <summary>
            Gets the password from a basic authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.HttpDigestIdentity">
            <summary>
            Holds the username and other parameters from an HTTP Digest
            authentication attempt.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Algorithm">
            <summary>
            Gets the algorithm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the algorithm parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Cnonce">
            <summary>
            Gets the cnonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the cnonce parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Nc">
            <summary>
            Gets the nc parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nc parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Nonce">
            <summary>
            Gets the nonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nonce parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Opaque">
            <summary>
            Gets the opaque parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the opaque parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Qop">
            <summary>
            Gets the qop parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the qop parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Realm">
            <summary>
            Gets the realm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the realm parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Response">
            <summary>
            Gets the response parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the response parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Uri">
            <summary>
            Gets the uri parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the uri parameter.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListener">
            <summary>
            Provides a simple, programmatically controlled HTTP listener.
            </summary>
            <remarks>
              <para>
              The listener supports HTTP/1.1 version request and response.
              </para>
              <para>
              And the listener allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemeSelector">
            <summary>
            Gets or sets the delegate called to determine the scheme used to
            authenticate the clients.
            </summary>
            <remarks>
              <para>
              If this property is set, the listener uses the authentication
              scheme selected by the delegate for each request.
              </para>
              <para>
              Or if this property is not set, the listener uses the value of
              the <see cref="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/> property
              as the authentication scheme for all requests.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{HttpListenerRequest, AuthenticationSchemes}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the listener selects
              an authentication scheme.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.CertificateFolderPath">
            <summary>
            Gets or sets the path to the folder in which stores the certificate
            files used to authenticate the server on the secure connection.
            </summary>
            <remarks>
              <para>
              This property represents the path to the folder in which stores
              the certificate files associated with each port number of added
              URI prefixes.
              </para>
              <para>
              A set of the certificate files is a pair of &lt;port number&gt;.cer
              (DER) and &lt;port number&gt;.key (DER, RSA Private Key).
              </para>
              <para>
              If this property is <see langword="null"/> or an empty string,
              the result of the <see cref="F:System.Environment.SpecialFolder.ApplicationData"/>
              with the <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/> method is used as
              the default path.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the path to the folder
              in which stores the certificate files.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IgnoreWriteExceptions">
            <summary>
            Gets or sets a value indicating whether the listener returns
            exceptions that occur when sending the response to the client.
            </summary>
            <value>
              <para>
              <c>true</c> if the listener should not return those exceptions;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IsListening">
            <summary>
            Gets a value indicating whether the listener has been started.
            </summary>
            <value>
            <c>true</c> if the listener has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IsSupported">
            <summary>
            Gets a value indicating whether the listener can be used with
            the current operating system.
            </summary>
            <value>
            <c>true</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Log">
            <summary>
            Gets the logging functions.
            </summary>
            <remarks>
              <para>
              The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
              </para>
              <para>
              If you would like to change it, you should set the <c>Log.Level</c>
              property to any of the <see cref="T:WebSocketSharp.LogLevel"/> enum values.
              </para>
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging functions.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Prefixes">
            <summary>
            Gets the URI prefixes handled by the listener.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerPrefixCollection"/> that contains the URI
            prefixes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Realm">
            <summary>
            Gets or sets the name of the realm associated with the listener.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or an empty string,
            "SECRET AREA" is used as the name of the realm.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
            <summary>
            Gets or sets a value indicating whether, when NTLM authentication is used,
            the authentication information of first request is used to authenticate
            additional requests on the same connection.
            </summary>
            <remarks>
            This property is not currently supported and always throws
            a <see cref="T:System.NotSupportedException"/>.
            </remarks>
            <value>
            <c>true</c> if the authentication information of first request is used;
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotSupportedException">
            Any use of this property.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the listener finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Abort">
            <summary>
            Shuts down the listener immediately.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting an incoming request asynchronously.
            </summary>
            <remarks>
              <para>
              This asynchronous operation must be ended by calling
              the <see cref="M:WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)"/> method.
              </para>
              <para>
              Typically, the <see cref="M:WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)"/> method is called by
              <paramref name="callback"/>.
              </para>
            </remarks>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that represents the status of
            the asynchronous operation.
            </returns>
            <param name="callback">
              <para>
              An <see cref="T:System.AsyncCallback"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the asynchronous operation is
              complete.
              </para>
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass to
            <paramref name="callback"/>.
            </param>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Close">
            <summary>
            Shuts down the listener.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get an incoming request.
            </summary>
            <remarks>
            This method ends an asynchronous operation started by calling
            the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </remarks>
            <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not obtained by calling
            the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This method was already called for <paramref name="asyncResult"/>.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.GetContext">
            <summary>
            Gets an incoming request.
            </summary>
            <remarks>
            This method waits for an incoming request and returns when
            a request is received.
            </remarks>
            <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the listener.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerContext">
            <summary>
            Provides the access to the HTTP request and response objects used by
            the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.Request">
            <summary>
            Gets the HTTP request object that represents a client request.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerRequest"/> that represents the client request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.Response">
            <summary>
            Gets the HTTP response object used to send a response to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> that represents a response to
            the client request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String)">
            <summary>
            Accepts a WebSocket connection.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String,System.Action{WebSocketSharp.WebSocket})">
            <summary>
            Accepts a WebSocket connection with initializing the WebSocket
            interface.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{WebSocket}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when a new WebSocket instance is
              initialized.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="initializer"/> caused an exception.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerException">
            <summary>
            The exception that is thrown when an error occurs processing
            an HTTP request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code and message.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message.
            </param>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerException.ErrorCode">
            <summary>
            Gets the error code that identifies the error that occurred.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the error code.
              </para>
              <para>
              It is any of the Win32 error codes.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerPrefixCollection">
            <summary>
            Provides a collection used to store the URI prefixes for a instance of
            the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance responds to the request which
            has a requested URI that the prefixes most closely match.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.Count">
            <summary>
            Gets the number of prefixes in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of prefixes.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the access to the collection is
            read-only.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            synchronized.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Add(System.String)">
            <summary>
            Adds the specified URI prefix to the collection.
            </summary>
            <param name="uriPrefix">
              <para>
              A <see cref="T:System.String"/> that specifies the URI prefix to add.
              </para>
              <para>
              It must be a well-formed URI prefix with http or https scheme,
              and must end with a forward slash (/).
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uriPrefix"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Clear">
            <summary>
            Removes all URI prefixes from the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the collection contains the
            specified URI prefix.
            </summary>
            <returns>
            <c>true</c> if the collection contains the URI prefix; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array of string.
            </summary>
            <param name="array">
            An array of <see cref="T:System.String"/> that specifies the destination of
            the URI prefix strings copied from the collection.
            </param>
            <param name="offset">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="offset"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{string}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Remove(System.String)">
            <summary>
            Removes the specified URI prefix from the collection.
            </summary>
            <returns>
            <c>true</c> if the URI prefix is successfully removed; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerRequest">
            <summary>
            Represents an incoming HTTP request to a <see cref="T:WebSocketSharp.Net.HttpListener"/>
            instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.AcceptTypes">
            <summary>
            Gets the media types that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of
              the media types specified in the value of the Accept header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ClientCertificateError">
            <summary>
            Gets an error code that identifies a problem with the certificate
            provided by the client.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents an error code.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property is not supported.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentEncoding">
            <summary>
            Gets the encoding for the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> converted from the charset value of the
              Content-Type header.
              </para>
              <para>
              <see cref="P:System.Text.Encoding.UTF8"/> if the charset value is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentLength64">
            <summary>
            Gets the length in bytes of the entity body data included in the
            request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> converted from the value of the Content-Length
              header.
              </para>
              <para>
              -1 if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentType">
            <summary>
            Gets the media type of the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Content-Type
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Cookies">
            <summary>
            Gets the HTTP cookies included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.HasEntityBody">
            <summary>
            Gets a value indicating whether the request has the entity body data.
            </summary>
            <value>
            <c>true</c> if the request has the entity body data; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Headers">
            <summary>
            Gets the HTTP headers included in the request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.HttpMethod">
            <summary>
            Gets the HTTP method specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the HTTP method specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the entity body data included in
            the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.IO.Stream"/> that contains the entity body data.
              </para>
              <para>
              <see cref="F:System.IO.Stream.Null"/> if the entity body data is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsLocal">
            <summary>
            Gets a value indicating whether the request is sent from the
            local computer.
            </summary>
            <value>
            <c>true</c> if the request is sent from the same computer as
            the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.KeepAlive">
            <summary>
            Gets a value indicating whether a persistent connection is requested.
            </summary>
            <value>
            <c>true</c> if the request specifies that the connection is kept open;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.LocalEndPoint">
            <summary>
            Gets the endpoint to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ProtocolVersion">
            <summary>
            Gets the HTTP version specified by the client.
            </summary>
            <value>
            A <see cref="T:System.Version"/> that represents the HTTP version specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.QueryString">
            <summary>
            Gets the query string included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              Each query parameter is decoded in UTF-8.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RawUrl">
            <summary>
            Gets the raw URL specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the request target specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RemoteEndPoint">
            <summary>
            Gets the endpoint from which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RequestTraceIdentifier">
            <summary>
            Gets the trace identifier of the request.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> that represents the trace identifier.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Url">
            <summary>
            Gets the URL requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URL cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UrlReferrer">
            <summary>
            Gets the URI of the resource from which the requested URL was obtained.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the value of the Referer header.
              </para>
              <para>
              <see langword="null"/> if the header value is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserAgent">
            <summary>
            Gets the user agent from which the request is originated.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the User-Agent
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserHostAddress">
            <summary>
            Gets the IP address and port number to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server IP address and
            port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserHostName">
            <summary>
            Gets the server host name requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Host header.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserLanguages">
            <summary>
            Gets the natural languages that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of the
              natural languages specified in the value of the Accept-Language
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting the certificate provided by the client asynchronously.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that represents the status of
            the asynchronous operation.
            </returns>
            <param name="requestCallback">
              <para>
              An <see cref="T:System.AsyncCallback"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the asynchronous operation is
              complete.
              </para>
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass to
            <paramref name="requestCallback"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get the certificate provided by
            the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the <see cref="M:WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)"/> method.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.GetClientCertificate">
            <summary>
            Gets the certificate provided by the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerResponse">
            <summary>
            Represents an HTTP response to an HTTP request received by
            a <see cref="T:WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentEncoding">
            <summary>
            Gets or sets the encoding for the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> that represents the encoding for
              the entity body data.
              </para>
              <para>
              <see langword="null"/> if no encoding is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentLength64">
            <summary>
            Gets or sets the number of bytes in the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> that represents the number of bytes in
              the entity body data.
              </para>
              <para>
              It is used for the value of the Content-Length header.
              </para>
              <para>
              The default value is zero.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentType">
            <summary>
            Gets or sets the media type of the entity body included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the media type of
              the entity body.
              </para>
              <para>
              It is used for the value of the Content-Type header.
              </para>
              <para>
              <see langword="null"/> if no media type is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains
              an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.Cookies">
            <summary>
            Gets or sets the collection of the HTTP cookies sent with the response.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies sent with
            the response.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.Headers">
            <summary>
            Gets or sets the collection of the HTTP headers sent to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/> that contains the headers sent to
            the client.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The value specified for a set operation is not valid for a response.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the server requests
            a persistent connection.
            </summary>
            <value>
              <para>
              <c>true</c> if the server requests a persistent connection;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.OutputStream">
            <summary>
            Gets a stream instance to which the entity body data can be written.
            </summary>
            <value>
            A <see cref="T:System.IO.Stream"/> instance to which the entity body data can be
            written.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ProtocolVersion">
            <summary>
            Gets the HTTP version used for the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Version"/> that represents the HTTP version used for
              the response.
              </para>
              <para>
              Always returns same as 1.1.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.RedirectLocation">
            <summary>
            Gets or sets the URL to which the client is redirected to locate
            a requested resource.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the absolute URL for
              the redirect location.
              </para>
              <para>
              It is used for the value of the Location header.
              </para>
              <para>
              <see langword="null"/> if no redirect location is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.SendChunked">
            <summary>
            Gets or sets a value indicating whether the response uses the chunked
            transfer encoding.
            </summary>
            <value>
              <para>
              <c>true</c> if the response uses the chunked transfer encoding;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code returned to the client.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the HTTP status code for
              the response to the request.
              </para>
              <para>
              The default value is 200. It indicates that the request has
              succeeded.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
              <para>
              The value specified for a set operation is invalid.
              </para>
              <para>
              Valid values are between 100 and 999 inclusive.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.StatusDescription">
            <summary>
            Gets or sets the description of the HTTP status code returned to
            the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code for the response to the request.
              </para>
              <para>
              The default value is
              the <see href="http://tools.ietf.org/html/rfc2616#section-10">
              RFC 2616</see> description for the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode"/>
              property value.
              </para>
              <para>
              An empty string if an RFC 2616 description does not exist.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation contains an invalid character.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Abort">
            <summary>
            Closes the connection to the client without sending a response.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.AppendCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Appends an HTTP cookie to the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends an HTTP header with the specified name and value to
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to
            append.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to
            append.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Close">
            <summary>
            Sends the response to the client and releases the resources used by
            this instance.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
            <summary>
            Sends the response with the specified entity body data to the client
            and releases the resources used by this instance.
            </summary>
            <param name="responseEntity">
            An array of <see cref="T:System.Byte"/> that contains the entity body data.
            </param>
            <param name="willBlock">
            A <see cref="T:System.Boolean"/>: <c>true</c> if this method blocks execution while
            flushing the stream to the client; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="responseEntity"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.CopyFrom(WebSocketSharp.Net.HttpListenerResponse)">
            <summary>
            Copies some properties from the specified response instance to
            this instance.
            </summary>
            <param name="templateResponse">
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="templateResponse"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Redirect(System.String)">
            <summary>
            Configures the response to redirect the client's request to
            the specified URL.
            </summary>
            <remarks>
            This method sets the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.RedirectLocation"/> property to
            <paramref name="url"/>, the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode"/> property to
            302, and the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusDescription"/> property to "Found".
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the absolute URL to which
            the client is redirected to locate a requested resource.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.SetCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Adds or updates an HTTP cookie in the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to set.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="cookie"/> already exists in the cookies but
            it cannot be updated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.SetHeader(System.String,System.String)">
            <summary>
            Adds or updates an HTTP header with the specified name and value in
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpRequestHeader">
            <summary>
            Indicates the HTTP header that may be specified in a client request.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Accept">
            <summary>
            Indicates the Accept header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptCharset">
            <summary>
            Indicates the Accept-Charset header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptEncoding">
            <summary>
            Indicates the Accept-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptLanguage">
            <summary>
            Indicates the Accept-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Authorization">
            <summary>
            Indicates the Authorization header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Cookie">
            <summary>
            Indicates the Cookie header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Expect">
            <summary>
            Indicates the Expect header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.From">
            <summary>
            Indicates the From header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Host">
            <summary>
            Indicates the Host header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfMatch">
            <summary>
            Indicates the If-Match header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfModifiedSince">
            <summary>
            Indicates the If-Modified-Since header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfNoneMatch">
            <summary>
            Indicates the If-None-Match header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfRange">
            <summary>
            Indicates the If-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            Indicates the If-Unmodified-Since header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.MaxForwards">
            <summary>
            Indicates the Max-Forwards header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ProxyAuthorization">
            <summary>
            Indicates the Proxy-Authorization header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Referer">
            <summary>
            Indicates the Referer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Range">
            <summary>
            Indicates the Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Te">
            <summary>
            Indicates the TE header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Translate">
            <summary>
            Indicates the Translate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.UserAgent">
            <summary>
            Indicates the User-Agent header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketKey">
            <summary>
            Indicates the Sec-WebSocket-Key header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpResponseHeader">
            <summary>
            Indicates the HTTP header that can be specified in a server response.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.AcceptRanges">
            <summary>
            Indicates the Accept-Ranges header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Age">
            <summary>
            Indicates the Age header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ETag">
            <summary>
            Indicates the ETag header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Location">
            <summary>
            Indicates the Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ProxyAuthenticate">
            <summary>
            Indicates the Proxy-Authenticate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.RetryAfter">
            <summary>
            Indicates the Retry-After header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Server">
            <summary>
            Indicates the Server header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SetCookie">
            <summary>
            Indicates the Set-Cookie header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Vary">
            <summary>
            Indicates the Vary header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.WwwAuthenticate">
            <summary>
            Indicates the WWW-Authenticate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketAccept">
            <summary>
            Indicates the Sec-WebSocket-Accept header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpStatusCode">
            <summary>
            Indicates the HTTP status code that can be specified in a server response.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-10">RFC 2616</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Continue">
            <summary>
            Equivalent to status code 100. Indicates that the client should continue
            with its request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.SwitchingProtocols">
            <summary>
            Equivalent to status code 101. Indicates that the server is switching
            the HTTP version or protocol on the connection.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.OK">
            <summary>
            Equivalent to status code 200. Indicates that the client's request has
            succeeded.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Created">
            <summary>
            Equivalent to status code 201. Indicates that the client's request has
            been fulfilled and resulted in a new resource being created.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Accepted">
            <summary>
            Equivalent to status code 202. Indicates that the client's request has
            been accepted for processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            Equivalent to status code 203. Indicates that the returned metainformation
            is from a local or a third-party copy instead of the origin server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NoContent">
            <summary>
            Equivalent to status code 204. Indicates that the server has fulfilled
            the client's request but does not need to return an entity-body.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ResetContent">
            <summary>
            Equivalent to status code 205. Indicates that the server has fulfilled
            the client's request, and the user agent should reset the document view
            which caused the request to be sent.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PartialContent">
            <summary>
            Equivalent to status code 206. Indicates that the server has fulfilled
            the partial GET request for the resource.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MultipleChoices">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              MultipleChoices is a synonym for Ambiguous.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Ambiguous">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              Ambiguous is a synonym for MultipleChoices.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MovedPermanently">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              MovedPermanently is a synonym for Moved.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Moved">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              Moved is a synonym for MovedPermanently.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Found">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Found is a synonym for Redirect.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Redirect">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Redirect is a synonym for Found.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.SeeOther">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              SeeOther is a synonym for RedirectMethod.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RedirectMethod">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              RedirectMethod is a synonym for SeeOther.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotModified">
            <summary>
            Equivalent to status code 304. Indicates that the client has performed
            a conditional GET request and access is allowed, but the document has
            not been modified.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.UseProxy">
            <summary>
            Equivalent to status code 305. Indicates that the requested resource
            must be accessed through the proxy given by the Location field.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Unused">
            <summary>
            Equivalent to status code 306. This status code was used in a previous
            version of the specification, is no longer used, and is reserved for
            future use.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.TemporaryRedirect">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              TemporaryRedirect is a synonym for RedirectKeepVerb.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              RedirectKeepVerb is a synonym for TemporaryRedirect.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.BadRequest">
            <summary>
            Equivalent to status code 400. Indicates that the client's request could
            not be understood by the server due to malformed syntax.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Unauthorized">
            <summary>
            Equivalent to status code 401. Indicates that the client's request
            requires user authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PaymentRequired">
            <summary>
            Equivalent to status code 402. This status code is reserved for future
            use.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Forbidden">
            <summary>
            Equivalent to status code 403. Indicates that the server understood
            the client's request but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotFound">
            <summary>
            Equivalent to status code 404. Indicates that the server has not found
            anything matching the request URI.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to status code 405. Indicates that the method specified
            in the request line is not allowed for the resource identified by
            the request URI.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotAcceptable">
            <summary>
            Equivalent to status code 406. Indicates that the server does not
            have the appropriate resource to respond to the Accept headers in
            the client's request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to status code 407. Indicates that the client must first
            authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestTimeout">
            <summary>
            Equivalent to status code 408. Indicates that the client did not produce
            a request within the time that the server was prepared to wait.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Conflict">
            <summary>
            Equivalent to status code 409. Indicates that the client's request could
            not be completed due to a conflict on the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Gone">
            <summary>
            Equivalent to status code 410. Indicates that the requested resource is
            no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.LengthRequired">
            <summary>
            Equivalent to status code 411. Indicates that the server refuses to
            accept the client's request without a defined Content-Length.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PreconditionFailed">
            <summary>
            Equivalent to status code 412. Indicates that the precondition given in
            one or more of the request headers evaluated to false when it was tested
            on the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            Equivalent to status code 413. Indicates that the entity of the client's
            request is larger than the server is willing or able to process.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestUriTooLong">
            <summary>
            Equivalent to status code 414. Indicates that the request URI is longer
            than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to status code 415. Indicates that the entity of the client's
            request is in a format not supported by the requested resource for the
            requested method.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            Equivalent to status code 416. Indicates that none of the range
            specifier values in a Range request header overlap the current
            extent of the selected resource.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ExpectationFailed">
            <summary>
            Equivalent to status code 417. Indicates that the expectation given in
            an Expect request header could not be met by the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.InternalServerError">
            <summary>
            Equivalent to status code 500. Indicates that the server encountered
            an unexpected condition which prevented it from fulfilling the client's
            request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotImplemented">
            <summary>
            Equivalent to status code 501. Indicates that the server does not
            support the functionality required to fulfill the client's request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.BadGateway">
            <summary>
            Equivalent to status code 502. Indicates that a gateway or proxy server
            received an invalid response from the upstream server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to status code 503. Indicates that the server is currently
            unable to handle the client's request due to a temporary overloading
            or maintenance of the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.GatewayTimeout">
            <summary>
            Equivalent to status code 504. Indicates that a gateway or proxy server
            did not receive a timely response from the upstream server or some other
            auxiliary server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to status code 505. Indicates that the server does not
            support the HTTP version used in the client's request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.htmlEncode(System.String,System.Boolean)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <remarks>
              <para>
              This method starts encoding with a NCR from the character code 160
              but does not stop at the character code 255.
              </para>
              <para>
              One reason is the unicode characters &#65308; and &#65310; that
              look like &lt; and &gt;.
              </para>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents an encoded string.
            </returns>
            <param name="s">
            A <see cref="T:System.String"/> to encode.
            </param>
            <param name="minimal">
            A <see cref="T:System.Boolean"/>: <c>true</c> if encodes without a NCR;
            otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.initEntities">
            <summary>
            Initializes the _entities field.
            </summary>
            <remarks>
            This method builds a dictionary of HTML character entity references.
            This dictionary comes from the HTML 4.01 W3C recommendation.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Net.HttpVersion">
            <summary>
            Provides the HTTP version numbers.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpVersion.Version10">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.0.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpVersion.Version11">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.1.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpVersion"/> class.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.NetworkCredential">
            <summary>
            Provides the credentials for the password-based authentication.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username and password.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username, password, domain and roles.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the domain associated with
            the credentials.
            </param>
            <param name="roles">
            An array of <see cref="T:System.String"/> that specifies the roles associated
            with the credentials if any.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Domain">
            <summary>
            Gets the domain associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the domain was initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the domain name to which
            the username belongs.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Password">
            <summary>
            Gets the password for the username associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the password was initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Roles">
            <summary>
            Gets the roles associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty array if the roles were initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            An array of <see cref="T:System.String"/> that represents the role names
            to which the username belongs.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Username">
            <summary>
            Gets the username associated with the credentials.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the username.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.ServerSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by servers.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ServerSslConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/>
            class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ServerSslConfiguration.#ctor(WebSocketSharp.Net.ServerSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateRequired">
            <summary>
            Gets or sets a value indicating whether the client is asked for
            a certificate for authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the client is asked for a certificate for
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the client.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the server validates
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ServerCertificate">
            <summary>
            Gets or sets the certificate used to authenticate the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.WebHeaderCollection">
            <summary>
            Provides a collection of the HTTP headers associated with a request or
            response.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/> class
            from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the specified name is not found in
            <paramref name="serializationInfo"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/>
            class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names in the collection.
            </summary>
            <value>
            An array of <see cref="T:System.String"/> that contains all header names in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of headers in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Item(WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Gets or sets the specified request header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the request header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Item(WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Gets or sets the specified response header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the response header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Keys">
            <summary>
            Gets a collection of header names in the collection.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"/> that contains
            all header names in the collection.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
            <summary>
            Adds a header to the collection without checking if the header is on
            the restricted header list.
            </summary>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="headerValue">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerValue"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="headerValue"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Adds the specified header to the collection.
            </summary>
            <param name="header">
            A <see cref="T:System.String"/> that specifies the header to add,
            with the name and value separated by a colon character (':').
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> does not contain a colon character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the value part of <paramref name="header"/> is greater
            than 65,535 characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Adds the specified request header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Adds the specified response header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a header with the specified name and value to the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Get(System.Int32)">
            <summary>
            Get the value of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the value of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Get(System.String)">
            <summary>
            Get the value of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that receives the value of the header.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetEnumerator">
            <summary>
            Gets the enumerator used to iterate through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetKey(System.Int32)">
            <summary>
            Get the name of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the name of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetValues(System.Int32)">
            <summary>
            Get the values of the header at the specified index in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetValues(System.String)">
            <summary>
            Get the values of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String)">
            <summary>
            Determines whether the specified HTTP header can be set for the request.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
            <summary>
            Determines whether the specified HTTP header can be set for the request
            or the response.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <param name="response">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the test is for the response;
            otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">
            An <see cref="T:System.Object"/> instance that represents the source of
            the deserialization event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Removes the specified request header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Removes the specified response header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Sets the specified request header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the request header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Sets the specified response header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the response header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.ToByteArray">
            <summary>
            Converts the current instance to an array of byte.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte"/> converted from a string that represents
            the current instance.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents all headers in the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:System.Net.Sockets.TcpListener"/> instance.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.WebSocketContext">
            <summary>
            Exposes the access to the information in a WebSocket handshake request.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.WebSocketContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebSockets.WebSocketContext"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
            the cookies.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server host name requested
            by the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the Origin header.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query parameters.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the WebSocket protocol
            version specified by the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
            A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
            authentication, and security roles for the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:WebSocketSharp.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.PayloadData.Empty">
            <summary>
            Represents the empty payload data.
            </summary>
        </member>
        <member name="F:WebSocketSharp.PayloadData.MaxLength">
            <summary>
            Represents the allowable max length of payload data.
            </summary>
            <remarks>
              <para>
              A <see cref="T:WebSocketSharp.WebSocketException"/> is thrown when the length of
              incoming payload data is greater than the value of this field.
              </para>
              <para>
              If you would like to change the value of this field, it must be
              a number between <see cref="F:WebSocketSharp.WebSocket.FragmentLength"/> and
              <see cref="F:System.Int64.MaxValue"/> inclusive.
              </para>
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Rsv">
            <summary>
            Indicates whether each RSV (RSV1, RSV2, and RSV3) of a WebSocket frame is non-zero.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Server.HttpRequestEventArgs">
            <summary>
            Represents the event data for the HTTP request events of the
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
              <para>
              An HTTP request event occurs when the <see cref="T:WebSocketSharp.Server.HttpServer"/>
              instance receives an HTTP request.
              </para>
              <para>
              You should access the <see cref="P:WebSocketSharp.Server.HttpRequestEventArgs.Request"/> property if you would
              like to get the request data sent from a client.
              </para>
              <para>
              And you should access the <see cref="P:WebSocketSharp.Server.HttpRequestEventArgs.Response"/> property if you
              would like to get the response data to return to the client.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.Request">
            <summary>
            Gets the request data sent from a client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerRequest"/> that provides the methods and
            properties for the request data.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.Response">
            <summary>
            Gets the response data to return to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> that provides the methods and
            properties for the response data.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.User">
            <summary>
            Gets the information for the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication scheme, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.HttpRequestEventArgs.ReadFile(System.String)">
            <summary>
            Reads the specified file from the document folder of the
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> that receives the contents of
              the file.
              </para>
              <para>
              <see langword="null"/> if the read has failed.
              </para>
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpRequestEventArgs.TryReadFile(System.String,System.Byte[]@)">
            <summary>
            Tries to read the specified file from the document folder of
            the <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <param name="contents">
              <para>
              When this method returns, an array of <see cref="T:System.Byte"/> that
              receives the contents of the file.
              </para>
              <para>
              <see langword="null"/> if the read has failed.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Server.HttpServer">
            <summary>
            Provides a simple HTTP server.
            </summary>
            <remarks>
              <para>
              The server supports HTTP/1.1 version request and response.
              </para>
              <para>
              Also the server allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class can provide multiple WebSocket services.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on the IP address and
              port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is https; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is https.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the HTTP URL of the server.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.DocumentRootPath">
            <summary>
            Gets or sets the path to the document folder of the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a path to the folder
              from which to find the requested file.
              </para>
              <para>
              / or \ is trimmed from the end of the value if present.
              </para>
              <para>
              The default value is "./Public".
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an absolute root.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an invalid path string.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnConnect">
            <summary>
            Occurs when the server receives an HTTP CONNECT request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnDelete">
            <summary>
            Occurs when the server receives an HTTP DELETE request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnGet">
            <summary>
            Occurs when the server receives an HTTP GET request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnHead">
            <summary>
            Occurs when the server receives an HTTP HEAD request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnOptions">
            <summary>
            Occurs when the server receives an HTTP OPTIONS request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnPost">
            <summary>
            Occurs when the server receives an HTTP POST request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnPut">
            <summary>
            Occurs when the server receives an HTTP PUT request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnTrace">
            <summary>
            Occurs when the server receives an HTTP TRACE request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:WebSocketSharp.Net.HttpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Server.IWebSocketSession">
            <summary>
            Exposes the access to the information in a WebSocket session.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.ID">
            <summary>
            Gets the unique ID of the session.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the unique ID of the session.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.StartTime">
            <summary>
            Gets the time that the session has started.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time that the session
            has started.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.WebSocket">
            <summary>
            Gets the WebSocket interface for the session.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketBehavior">
            <summary>
            Exposes a set of methods and properties used to define the behavior of
            a WebSocket service provided by the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Headers">
            <summary>
            Gets the HTTP headers for a session.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers
            included in the WebSocket handshake request.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible for
            a session.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.QueryString">
            <summary>
            Gets the query string for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters included in the WebSocket handshake request.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.ReadyState">
            <summary>
            Gets the current state of the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.User">
            <summary>
            Gets the client information for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.UserEndPoint">
            <summary>
            Gets the client endpoint for a session.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.CookiesValidator">
            <summary>
            Gets or sets the delegate used to validate the HTTP cookies.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{CookieCollection, CookieCollection, bool}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              1st <see cref="T:WebSocketSharp.Net.CookieCollection"/> parameter passed to the delegate
              contains the cookies to validate.
              </para>
              <para>
              2nd <see cref="T:WebSocketSharp.Net.CookieCollection"/> parameter passed to the delegate
              receives the cookies to send to the client.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the cookies are valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is emitted
            when the WebSocket interface for a session receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when receives
              a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.HostValidator">
            <summary>
            Gets or sets the delegate used to validate the Host header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the delegate is
              the value of the Host header.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.ID">
            <summary>
            Gets the unique ID of a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the unique ID of the session.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.IgnoreExtensions">
            <summary>
            Gets or sets a value indicating whether the WebSocket interface for
            a session ignores the Sec-WebSocket-Extensions header.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface ignores the extensions requested
              from the client; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.OriginValidator">
            <summary>
            Gets or sets the delegate used to validate the Origin header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the delegate is
              the value of the Origin header or <see langword="null"/> if
              the header is not present.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Protocol">
            <summary>
            Gets or sets the name of the WebSocket subprotocol for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the subprotocol.
              </para>
              <para>
              The value specified for a set operation must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
              <para>
              The default value is an empty string.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is not a token.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the session has already started.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.StartTime">
            <summary>
            Gets the time that a session has started.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the time that the session
              has started.
              </para>
              <para>
              <see cref="F:System.DateTime.MaxValue"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close">
            <summary>
            Closes the WebSocket connection for a session.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync">
            <summary>
            Closes the WebSocket connection for a session asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnClose(WebSocketSharp.CloseEventArgs)">
            <summary>
            Called when the WebSocket connection for a session has been closed.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.CloseEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnClose"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnError(WebSocketSharp.ErrorEventArgs)">
            <summary>
            Called when the WebSocket interface for a session gets an error.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.ErrorEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnError"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnMessage(WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when the WebSocket interface for a session receives a message.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.MessageEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnMessage"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnOpen">
            <summary>
            Called when the WebSocket connection for a session has been established.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Ping">
            <summary>
            Sends a ping to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.Byte[])">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the client for a session.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.String)">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.WebSocket">
            <summary>
            Gets the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.WebSocket"/> that represents
              the WebSocket interface.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServer">
            <summary>
            Provides a WebSocket protocol server.
            </summary>
            <remarks>
            This class can provide multiple WebSocket services.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              the IP address and port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is wss; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is wss.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the WebSocket URL of the server.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Start">
            <summary>
            Starts receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:System.Net.Sockets.TcpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Stop">
            <summary>
            Stops receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServiceHost">
            <summary>
            Exposes the methods and properties used to access the information in
            a WebSocket service provided by the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost.#ctor(System.String,WebSocketSharp.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/>
            class with the specified path and logging function.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the absolute path to
            the service.
            </param>
            <param name="log">
            A <see cref="T:WebSocketSharp.Logger"/> that specifies the logging function for
            the service.
            </param>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Log">
            <summary>
            Gets the logging function for the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.KeepClean">
            <summary>
            Gets or sets a value indicating whether the service cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the service cleans up the inactive sessions every
            60 seconds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Path">
            <summary>
            Gets the path to the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the absolute path to
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.BehaviorType">
            <summary>
            Gets the type of the behavior of the service.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that represents the type of the behavior of
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost.CreateSession">
            <summary>
            Creates a new session for the service.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> instance that represents
            the new session.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServiceManager">
            <summary>
            Provides the management function for the WebSocket services.
            </summary>
            <remarks>
            This class manages the WebSocket services provided by the
            <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Count">
            <summary>
            Gets the number of the WebSocket services.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the services.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Hosts">
            <summary>
            Gets the service host instances for the WebSocket services.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketServiceHost}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the service host instances.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Item(System.String)">
            <summary>
            Gets the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/> instance that represents
              the service host instance.
              </para>
              <para>
              It provides the function to access the information in the service.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to get.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket services are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the inactive sessions are cleaned up every 60
              seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Paths">
            <summary>
            Gets the paths for the WebSocket services.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the paths.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.AddService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.Clear">
            <summary>
            Removes all WebSocket services managed by the manager.
            </summary>
            <remarks>
            Each service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.RemoveService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.TryGetServiceHost(System.String,WebSocketSharp.Server.WebSocketServiceHost@)">
            <summary>
            Tries to get the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to get.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="host">
              <para>
              When this method returns, a <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/>
              instance that receives the service host instance.
              </para>
              <para>
              It provides the function to access the information in the service.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketSessionManager">
            <summary>
            Provides the management function for the sessions in a WebSocket service.
            </summary>
            <remarks>
            This class manages the sessions in a WebSocket service provided by the
            <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.ActiveIDs">
            <summary>
            Gets the IDs for the active sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the active sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Count">
            <summary>
            Gets the number of the sessions in the WebSocket service.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the sessions.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.IDs">
            <summary>
            Gets the IDs for the sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.InactiveIDs">
            <summary>
            Gets the IDs for the inactive sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the inactive sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Item(System.String)">
            <summary>
            Gets the session instance with the specified ID.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Server.IWebSocketSession"/> instance that provides
              the function to access the information in the session.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to get.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket service are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the inactive sessions are cleaned up every 60 seconds;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Sessions">
            <summary>
            Gets the session instances in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{IWebSocketSession}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the session instances.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.Byte[])">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.String)">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.Byte[],System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.String,System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.IO.Stream,System.Int32,System.Action)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String)">
            <summary>
            Closes the session with the specified ID.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,System.UInt16,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String)">
            <summary>
            Sends a ping to the client using the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String,System.String)">
            <summary>
            Sends a ping with the specified message to the client using
            the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="message"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.Byte[],System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.String,System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.Byte[],System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.IO.Stream,System.Int32,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Sweep">
            <summary>
            Cleans up the inactive sessions in the WebSocket service.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.TryGetSession(System.String,WebSocketSharp.Server.IWebSocketSession@)">
            <summary>
            Tries to get the session instance with the specified ID.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to get.
            </param>
            <param name="session">
              <para>
              When this method returns, a <see cref="T:WebSocketSharp.Server.IWebSocketSession"/> instance
              that receives the session instance.
              </para>
              <para>
              It provides the function to access the information in the session.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.WebSocket">
            <summary>
            Implements the WebSocket interface.
            </summary>
            <remarks>
              <para>
              This class provides a set of methods and properties for two-way
              communication using the WebSocket protocol.
              </para>
              <para>
              The WebSocket protocol is defined in
              <see href="http://tools.ietf.org/html/rfc6455">RFC 6455</see>.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.WebSocket.EmptyBytes">
            <summary>
            Represents the empty array of <see cref="T:System.Byte"/> used internally.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocket.FragmentLength">
            <summary>
            Represents the length used to determine whether the data should
            be fragmented in sending.
            </summary>
            <remarks>
              <para>
              The data will be fragmented if its length is greater than
              the value of this field.
              </para>
              <para>
              If you would like to change the value, you must set it to
              a value between 125 and <c>Int32.MaxValue - 14</c> inclusive.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.WebSocket.RandomNumber">
            <summary>
            Represents the random number generator used internally.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.WebSocket"/> class with
            the specified URL and optionally subprotocols.
            </summary>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL to which to connect.
              </para>
              <para>
              The scheme of the URL must be ws or wss.
              </para>
              <para>
              The new instance uses a secure connection if the scheme is wss.
              </para>
            </param>
            <param name="protocols">
              <para>
              An array of <see cref="T:System.String"/> that specifies the names of
              the subprotocols if necessary.
              </para>
              <para>
              Each value of the array must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is an invalid WebSocket URL string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value that is not a token.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value twice.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Compression">
            <summary>
            Gets or sets the compression method used to compress a message.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.CompressionMethod"/> enum values.
              </para>
              <para>
              It indicates the compression method used to compress a message.
              </para>
              <para>
              The default value is <see cref="F:WebSocketSharp.CompressionMethod.None"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Cookies">
            <summary>
            Gets the HTTP cookies included in the handshake request/response.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketSharp.Net.Cookie}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the cookies.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Credentials">
            <summary>
            Gets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.NetworkCredential"/> that represents the credentials
              used to authenticate the client.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is
            emitted when the interface receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when
              receives a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.EnableRedirection">
            <summary>
            Gets or sets a value indicating whether the URL redirection for
            the handshake request is allowed.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              <c>true</c> if the interface allows the URL redirection for
              the handshake request; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Extensions">
            <summary>
            Gets the extensions selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a list of the extensions
              negotiated between the client and server.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsSecure">
            <summary>
            Gets a value indicating whether the connection is secure.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Log">
            <summary>
            Gets the logging function.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Origin">
            <summary>
            Gets or sets the value of the HTTP Origin header to send with
            the handshake request.
            </summary>
            <remarks>
              <para>
              The HTTP Origin header is defined in
              <see href="http://tools.ietf.org/html/rfc6454#section-7">
              Section 7 of RFC 6454</see>.
              </para>
              <para>
              The interface sends the Origin header if this property has any.
              </para>
              <para>
              The set operation works if the current state of the interface is
              New or Closed.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin
              header to send.
              </para>
              <para>
              The syntax is &lt;scheme&gt;://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation includes the path segments.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Protocol">
            <summary>
            Gets the name of subprotocol selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that will be one of the names of
              subprotocols specified by client.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.ReadyState">
            <summary>
            Gets the current state of the interface.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
              <para>
              The default value is <see cref="F:WebSocketSharp.WebSocketState.New"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the interface attempts to connect,
            so it must be configured before any connect method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/> that represents the
            configuration used to establish a secure connection.
            </value>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              The interface does not use a secure connection.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Url">
            <summary>
            Gets the URL to which to connect.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL to which to connect.
              </para>
              <para>
              Also it represents the URL requested by the client if the interface
              is for the server.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the ping or close.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 5 seconds if the interface is
              for the client.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnClose">
            <summary>
            Occurs when the connection has been closed.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnError">
            <summary>
            Occurs when the interface gets an error.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnMessage">
            <summary>
            Occurs when the interface receives a message.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnOpen">
            <summary>
            Occurs when the connection has been established.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync">
            <summary>
            Closes the connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(System.UInt16)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Connect">
            <summary>
            Establishes a connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Connecting or Open.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.ConnectAsync">
            <summary>
            Establishes a connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the connect process to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Connecting or Open.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping">
            <summary>
            Sends a ping to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.Byte[])">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the remote endpoint.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.String)">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the remote endpoint.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the remote
            endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Sets an HTTP cookie to send with the handshake request.
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> that specifies the cookie to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Sets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the credentials.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <param name="preAuth">
            A <see cref="T:System.Boolean"/>: <c>true</c> if sends the credentials for
            the Basic authentication in advance with the first handshake
            request; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetProxy(System.String,System.String,System.String)">
            <summary>
            Sets the URL of the HTTP proxy server through which to connect and
            the credentials for the HTTP proxy authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL of the proxy
              server through which to connect.
              </para>
              <para>
              The syntax is http://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the URL and the credentials.
              </para>
            </param>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if the credentials
              are not necessary.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The scheme of <paramref name="url"/> is not http.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> includes the path segments.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.System#IDisposable#Dispose">
            <summary>
            Closes the connection and releases all associated resources.
            </summary>
            <remarks>
              <para>
              This method closes the connection with close status 1001 (going away).
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="T:WebSocketSharp.WebSocketException">
            <summary>
            The exception that is thrown when a fatal error occurs in
            the WebSocket communication.
            </summary>
        </member>
        <member name="P:WebSocketSharp.WebSocketException.Code">
            <summary>
            Gets the status code indicating the cause of the exception.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code indicating
              the cause of the exception.
              </para>
              <para>
              It is one of the status codes for the WebSocket connection close.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.WebSocketState">
            <summary>
            Indicates the state of the WebSocket interface.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.New">
            <summary>
            Equivalent to numeric value 0. Indicates that a new interface has
            been created.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Connecting">
            <summary>
            Equivalent to numeric value 1. Indicates that the connect process is
            in progress.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Open">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection has
            been established and the communication is possible.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Closing">
            <summary>
            Equivalent to numeric value 3. Indicates that the close process is
            in progress.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Closed">
            <summary>
            Equivalent to numeric value 4. Indicates that the connection has
            been closed or could not be established.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream" />.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream" /> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteEnd(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BinaryConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BinaryConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.CustomCreationConverter`1">
            <summary>
            Creates a custom object.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.RegexConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.RegexConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when serializing and deserializing.
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.VersionConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.VersionConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="T:System.DateTimeOffset" />.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft_X.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, <c>null</c> for a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> property.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Newtonsoft_X.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Newtonsoft.Json.IJsonLineInfo.LineNumber" /> and <see cref="P:Newtonsoft.Json.IJsonLineInfo.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
        </member>
        <member name="P:Newtonsoft_X.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.DateTime,Newtonsoft_X.Json.DateFormatHandling,Newtonsoft_X.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft_X.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft_X.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft_X.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft_X.Json.Formatting,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft_X.Json.Formatting,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft_X.Json.Formatting,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConverter.WriteJson(Newtonsoft_X.Json.JsonWriter,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConverter.ReadJson(Newtonsoft_X.Json.JsonReader,System.Type,System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType" />.
            If <c>null</c>, the default constructor is used.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" />. Can be <c>null</c>.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonObjectAttribute.#ctor(Newtonsoft_X.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> type used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter" /> type.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
            <value>
            <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.DateFormatString">
            <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.SetToken(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.SetToken(Newtonsoft_X.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.SetToken(Newtonsoft_X.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Start">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonReader" /> read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonReader.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Constructor">
            <summary>
            Reader is in a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Newtonsoft_X.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Create(Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.CreateDefault(Newtonsoft_X.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Populate(Newtonsoft_X.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Deserialize(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.TextReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Deserialize``1(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Deserialize(Newtonsoft_X.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Serialize(Newtonsoft_X.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializer.Serialize(Newtonsoft_X.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Newtonsoft.Json.JsonConverter" /> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the JSON data to read.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" />.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader" /> is also closed.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Newtonsoft.Json.JsonTextReader.LineNumber" /> and <see cref="P:Newtonsoft.Json.JsonTextReader.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" />s to write for each level in the hierarchy when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter" /> and also flushes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteEnd(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteToken(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteToken(Newtonsoft_X.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteToken(Newtonsoft_X.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.
            </param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteToken(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteEnd(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriter.SetWriteState(Newtonsoft_X.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Newtonsoft.Json.Linq.JValue" /> with type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment" />.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft_X.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.#ctor(Newtonsoft_X.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Load(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Load(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Parse(System.String,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.FromObject(System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.IndexOf(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Insert(System.Int32,Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Newtonsoft.Json.Linq.JArray" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Add(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Contains(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
            <c>true</c> if <paramref name="item" /> is found in the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.CopyTo(Newtonsoft_X.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only.
            </summary>
            <returns><c>true</c> if the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JArray.Remove(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
            <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item" /> is not found in the original <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.#ctor(Newtonsoft_X.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.Load(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JConstructor.Load(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing this token, and all the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JContainer.Merge(System.Object,Newtonsoft_X.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JEnumerable`1.Equals(Newtonsoft_X.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Newtonsoft_X.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.#ctor(Newtonsoft_X.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.</returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Load(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Load(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Parse(System.String,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.FromObject(System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft_X.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Add(System.String,Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft_X.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.#ctor(Newtonsoft_X.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.Load(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JProperty.Load(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to.
            When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />
            methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JRaw.#ctor(Newtonsoft_X.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JRaw.Create(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            The default value is <see cref="F:Newtonsoft.Json.Linq.CommentHandling.Ignore" />.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            The default value is <see cref="F:Newtonsoft.Json.Linq.LineInfoHandling.Load" />.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.DeepEquals(Newtonsoft_X.Json.Linq.JToken,Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Replace(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <remarks>
            <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Newtonsoft.Json.Linq.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Newtonsoft.Json.Linq.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" />.
            </remarks>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToString(Newtonsoft_X.Json.Formatting,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Explicit(Newtonsoft_X.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" />[] to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft_X.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.FromObject(System.Object,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToObject``1(Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ToObject(System.Type,Newtonsoft_X.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ReadFrom(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.ReadFrom(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Parse(System.String,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Load(Newtonsoft_X.Json.JsonReader,Newtonsoft_X.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Load(Newtonsoft_X.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JSONPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or <c>null</c>.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JSONPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JSONPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JSONPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.Type" /> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.Type" /> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.Type" /> of annotations to remove.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft_X.Json.Linq.JToken,Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the reader's current position.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenReader.#ctor(Newtonsoft_X.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenReader.#ctor(Newtonsoft_X.Json.Linq.JToken,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
            <param name="token">The token to read from.</param>
            <param name="initialPath">The initial path of the token. It is prepended to the returned <see cref="P:Newtonsoft.Json.Linq.JTokenReader.Path" />.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the writer's current position.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.#ctor(Newtonsoft_X.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
            <remarks>
            Setting <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> to <c>true</c> has no additional effect, since the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" /> is a type that cannot be closed.
            </remarks>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft_X.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(Newtonsoft_X.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.</returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.WriteTo(Newtonsoft_X.Json.JsonWriter,Newtonsoft_X.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.Equals(Newtonsoft_X.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <remarks>
            <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Newtonsoft.Json.Linq.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" />.
            </remarks>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Linq.JValue.CompareTo(Newtonsoft_X.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj" /> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to <c>false</c>.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft_X.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:Newtonsoft_X.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft_X.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft_X.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft_X.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft_X.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)" /> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft_X.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type" /> of the collection items.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.InternalConverter">
            <summary>
            Gets the internally resolved <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract's type.
            This converter is used as a fallback converter when no other converter is resolved.
            Setting <see cref="P:Newtonsoft.Json.Serialization.JsonContract.Converter" /> will always override this converter.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.
            </summary>
            <value>The <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft_X.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft_X.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of <paramref name="propertyName" /> and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the <see cref="T:Newtonsoft.Json.JsonConverter" /> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:Newtonsoft.Json.JsonConverter" /> type to create.</param>
            <param name="args">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft_X.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider" /> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft_X.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Newtonsoft_X.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <remarks>
            <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="F:Newtonsoft_X.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)" />
            or <see cref="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)" />.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder" /> this class lets you reuse its internal buffer.
            </summary>
        </member>
        <member name="M:Newtonsoft_X.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft_X.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft_X.Json.WriteState.Start">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonWriter" /> write method has not been called.
            </summary>
        </member>
    </members>
</doc>
